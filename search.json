[{"path":"https://mladenjovanovic.github.io/shorts/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Mladen Jovanovic Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mladen Jovanović. Author, maintainer. Jason D. Vescovi. Data contributor.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jovanović M, Vescovi JD (2023). shorts: Short Sprints. R package version 2.5.0.9000, https://CRAN.R-project.org/package=shorts.","code":"@Manual{shorts-package,   title = {{shorts}: Short Sprints},   author = {Mladen Jovanović and Jason D. Vescovi},   year = {2023},   note = {R package version 2.5.0.9000},   url = {https://CRAN.R-project.org/package=shorts}, }"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"shorts-","dir":"","previous_headings":"","what":"Short Sprints","title":"Short Sprints","text":"package creates short sprint (<6sec) profiles using split times, radar gun data. Mono-exponential equation used estimate maximal sprinting speed (MSS), relative acceleration (TAU), parameters. parameters can used predict kinematic kinetics variables compare individuals.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Short Sprints","text":"","code":"# Install from CRAN install.packages(\"shorts\")  # Or the development version from GitHub # install.packages(\"remotes\") remotes::install_github(\"mladenjovanovic/shorts\")"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Short Sprints","text":"{shorts} comes two sample data sets: split_times radar_gun_data N=5 athletes. Let’s load :","code":"require(shorts) require(tidyverse) require(knitr)  data(\"split_times\", \"radar_gun_data\")"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"profiling-using-split-times","dir":"","previous_headings":"Examples","what":"Profiling using split times","title":"Short Sprints","text":"model sprint performance using split times, distance used predictor time target. Since split_times contains data multiple athletes, let’s extract one athlete model using shorts::model_timing_gates() function. shorts::model_timing_gates() returns object data, model_info, model (returned minpack.lm::nlsLM() function), parameters, corrections, predictions, model_fit CV elements. Parameters estimated using mono-exponential equation maximal sprinting speed (MSS), relative acceleration (TAU). Additional parameters computed MSS TAU maximal acceleration (MAC) maximal relative power (PMAX) (calculated MAC*MSS/4). return predicted outcome (case time variable), use predict() function: create simple plot use S3 plot() method. four type options: “model” (default), “kinematics-time”, “kinematics-distance”, “residuals”:     interested calculating average split velocity, use shorts::format_splits() plot predicted velocity, acceleration, air resistance, force, power distance, use shorts:predict_XXX(). Please note calculate force, air resistance, power, need Kimberley’s bodymass height (well characteristics air pressure, temperature wind - see get_air_resistance() function).  prediction simpler, use shorts::predict_kinematics() function. provide kinetics kinematics 0-6s sprint using 100Hz. get model residuals, use residuals() function: Package {shorts} comes find_XXX() family functions allow finding peak power ’s location, well critical distance velocity, acceleration, power drops certain threshold:","code":"kimberley_data <- filter(split_times, athlete == \"Kimberley\")  kable(kimberley_data) kimberley_profile <- shorts::model_timing_gates(   distance = kimberley_data$distance,   time = kimberley_data$time )  kimberley_profile #> Estimated model parameters #> -------------------------- #>        MSS        TAU        MAC       PMAX  #>  8.5911430  0.8113285 10.5889820 22.7428645  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>     0.99965531    -0.00309334    -0.53860253    -0.05293456    -4.57120551  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>     0.02699162     0.85714883     0.05293456     4.57120551     0.02778875  #>      RMSE_perc            MAE       MAE_perc  #>     1.93921846     0.02333341     1.19263265  summary(kimberley_profile) #>  #> Formula: time ~ TAU * I(LambertW::W(-exp(1)^(-distance/(MSS * TAU) - 1))) +  #>     distance/MSS + TAU #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|)     #> MSS  8.59114    0.12251   70.13 2.48e-07 *** #> TAU  0.81133    0.04581   17.71 5.97e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.03403 on 4 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08  coef(kimberley_profile) #>        MSS        TAU        MAC       PMAX  #>  8.5911430  0.8113285 10.5889820 22.7428645 predict(kimberley_profile) #> [1] 1.210935 1.897021 2.521028 3.122008 4.299243 5.466324 plot(kimberley_profile) +   theme_bw() plot(kimberley_profile, \"kinematics-time\") +   theme_bw() plot(kimberley_profile, \"kinematics-distance\") +   theme_bw() plot(kimberley_profile, \"residuals\") +   theme_bw() kable(shorts::format_splits(   distance = kimberley_data$distance,   time = kimberley_data$time )) kimberley_bodymass <- 60 # in kilograms kimberley_bodyheight <- 1.7 # in meters  kimberley_pred <- tibble(   distance = seq(0, 40, length.out = 1000),    # Velocity   pred_velocity = shorts::predict_velocity_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU   ),    # Acceleration   pred_acceleration = shorts::predict_acceleration_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU   ),    # Air resistance   pred_air_resistance = shorts::predict_air_resistance_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU,     bodymass = kimberley_bodymass,     bodyheight = kimberley_bodyheight   ),    # Force   pred_force = shorts::predict_force_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU,     bodymass = kimberley_bodymass,     bodyheight = kimberley_bodyheight   ),    # Power   pred_power = shorts::predict_power_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU,     bodymass = kimberley_bodymass,     bodyheight = kimberley_bodyheight   ), )  # Convert to long kimberley_pred <- gather(kimberley_pred, \"metric\", \"value\", -distance)  ggplot(kimberley_pred, aes(x = distance, y = value)) +   theme_bw() +   geom_line() +   facet_wrap(~metric, scales = \"free_y\") +   xlab(\"Distance (m)\") +   ylab(NULL) predicted_kinematics <- predict_kinematics(   kimberley_profile,   bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight )  kable(head(predicted_kinematics)) residuals(kimberley_profile) #> [1] -0.052934560 -0.004021206  0.019971712  0.026991617  0.013756878 #> [6] -0.022324483 # Peak power and location shorts::find_peak_power_distance(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,    bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight ) #> $peak_power #> [1] 1384.248 #>  #> $distance #> [1] 1.424183  # Distance over which power is over 80% shorts::find_power_critical_distance(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,    bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight,   percent = 0.8 ) #> $lower #> [1] 0.3421958 #>  #> $upper #> [1] 4.26947  # Distance over which acceleration is under 50% shorts::find_acceleration_critical_distance(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,   percent = 0.5 ) #> [1] 1.34628  # Distance over which velocity is over 95% shorts::find_velocity_critical_distance(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,   percent = 0.95 ) #> [1] 14.25923"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"profiling-using-radar-gun-data","dir":"","previous_headings":"Examples","what":"Profiling using radar gun data","title":"Short Sprints","text":"radar gun data modeled using measured velocity target variable time predictor. Individual analysis performed using shorts::model_radar_gun() function. Let’s analysis Jim:  object returned shorts::model_radar_gun() object returned shorts::model_timing_gates(). Let’s plot Jim’s measured velocity predicted velocity (want use generic S3 plot() method):  Rather estimating MSS, shorts::model_radar_gun() function allows utilize peak velocity observed data MSS. done setting use_observed_MSS parameter TRUE:","code":"jim_data <- filter(radar_gun_data, athlete == \"Jim\")  jim_profile <- shorts::model_radar_gun(   time = jim_data$time,   velocity = jim_data$velocity )  jim_profile #> Estimated model parameters #> -------------------------- #>        MSS        TAU        MAC       PMAX  #>  7.9980114  0.8887955  8.9987083 17.9929427  #>  #> Estimated model corrections #> -------------------------- #>           TC  #> 0.0001103989  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.992441e-01  -4.601924e-08           -Inf  -1.640452e-01           -Inf  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   1.511231e-01   2.332507e+00   1.640452e-01            Inf   5.050254e-02  #>      RMSE_perc            MAE       MAE_perc  #>            Inf   3.927236e-02            Inf  summary(jim_profile) #>  #> Formula: velocity ~ MSS * (1 - exp(1)^(-(time + TC)/TAU)) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> MSS 7.9980114  0.0031934 2504.54   <2e-16 *** #> TAU 0.8887955  0.0021794  407.81   <2e-16 *** #> TC  0.0001104  0.0012283    0.09    0.928     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.05063 on 597 degrees of freedom #>  #> Number of iterations to convergence: 6  #> Achieved convergence tolerance: 1.49e-08  # Plot model residuals plot(jim_profile, \"residuals\") +   theme_bw() ggplot(   data.frame(jim_profile$predictions),   aes(x = .predictor)) +   theme_bw() +   geom_line(aes(y = .observed), alpha = 0.5) +   geom_line(aes(y = .predicted), color = \"red\", alpha = 0.5) +   xlab(\"Time (s)\") +   ylab(\"Velocity (m/s)\") jim_profile <- shorts::model_radar_gun(   time = jim_data$time,   velocity = jim_data$velocity,   use_observed_MSS = TRUE )  jim_profile #> Estimated model parameters #> -------------------------- #>        MSS        TAU        MAC       PMAX  #>  8.0950000  0.9327946  8.6782238 17.5625555  #>  #> Estimated model corrections #> -------------------------- #>         TC  #> 0.01117667  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>     0.99875693    -0.03881100           -Inf    -0.22869210           -Inf  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>     0.18253899     2.81739446     0.22869210            Inf     0.07984600  #>      RMSE_perc            MAE       MAE_perc  #>            Inf     0.06431869            Inf  summary(jim_profile) #>  #> Formula: velocity ~ MSS * (1 - exp(1)^(-(time + TC)/TAU)) #>  #> Parameters: #>     Estimate Std. Error  t value Pr(>|t|)     #> MSS 8.095000   0.005209 1554.099  < 2e-16 *** #> TAU 0.932795   0.003605  258.739  < 2e-16 *** #> TC  0.011177   0.002025    5.519  5.1e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.08005 on 597 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"profiling-using-tether-devices","dir":"","previous_headings":"Examples","what":"Profiling using tether devices","title":"Short Sprints","text":"tether devices provide data velocity--distance format. case, velocity outcome variable distance predictor. estimate sprint profiles tether data, use shorts::model_tether() function:  Setting use_observed_MSS parameter TRUE shorts::model_tether() function also allows use observed peak velocity MSS. case distance centered zero, use shorts::model_tether_DC() also estimated distance correction (DC) parameter, serving model intercept (info see Using corrections section):","code":"distance <- c(5, 10, 20, 30, 40)  velocity <- predict_velocity_at_distance(distance, MSS = 10, MAC = 8)  m1 <- model_tether(distance = distance, velocity = velocity)  df <- data.frame(   distance = distance,   obs_velocity = velocity )  ggplot(   data.frame(m1$predictions),   aes(x = .predictor)) +   theme_bw() +   geom_point(aes(y = .observed), alpha = 0.5) +   geom_line(aes(y = .predicted), color = \"red\", alpha = 0.5) +   xlab(\"Distance (m)\") +   ylab(\"Velocity (m/s)\") distance <- c(5, 10, 20, 30, 40)  velocity <- predict_velocity_at_distance(distance - 0.5, MSS = 10, MAC = 8)  m1 <- model_tether_DC(distance = distance, velocity = velocity) m1 #> Estimated model parameters #> -------------------------- #>   MSS   TAU   MAC  PMAX  #> 10.00  1.25  8.00 20.00  #>  #> Estimated model corrections #> -------------------------- #>   DC  #> -0.5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   7.105427e-16   8.773026e-15   0.000000e+00   0.000000e+00  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   1.776357e-15   1.842711e-14   1.776357e-15   1.842711e-14   9.729507e-16  #>      RMSE_perc            MAE       MAE_perc  #>   1.155185e-14   7.105427e-16   8.773026e-15"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"embedded-ie-in-situ-profiling","dir":"","previous_headings":"Examples","what":"Embedded (i.e., in-situ) Profiling","title":"Short Sprints","text":"modern technologies like GPS LPS, session acceleration velocity can tracked continuously. provides opportunity estimate short sprint profiles -situ, without need explicit testing (assuming maximal effort performed). analysis based theoretical model acceleration velocity linear relationship. time frame analysis can vary single drills (e.g., sprint drills), session, week, multiple weeks. example data collected one basketball session single person. Duration aprox. 90min 20Hz sampling rate. positional data:  next figure plots instant acceleration velocity:  estimate embedded short sprint profile, need filter positive acceleration velocities 3 ms−1 (defaul), filter top acceleration observations per velocity bracket (information please see Clavel et al. (2023)). graphical representation:","code":"data(\"LPS_session\")  LPS_session %>%   ggplot(aes(x = x, y = y)) +   theme_bw() +   geom_point(alpha = 0.1) LPS_session %>%   ggplot(aes(x = velocity, y = acceleration)) +   theme_bw() +   geom_point(alpha = 0.1) embedded_model <- model_in_situ(   LPS_session$velocity,   LPS_session$acceleration,   velocity_threshold = 4)                                  LPS_session %>%   filter(acceleration > 0) %>%   ggplot(aes(x = velocity, y = acceleration)) +   theme_bw() +   geom_point(alpha = 0.1) +   geom_point(     data = embedded_model$data,      color = \"red\"   ) +   geom_abline(     intercept = coef(embedded_model$model)[[1]],     slope = coef(embedded_model$model)[[2]],     linetype = \"dotted\", color = \"red\") +   scale_x_continuous(expand = c(0, 0), limits = c(0,  embedded_model$parameters$MSS)) +   scale_y_continuous(expand = c(0, 0), limits = c(0, embedded_model$parameters$MAC))"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"force-velocity-profiling","dir":"","previous_headings":"Examples","what":"Force-Velocity Profiling","title":"Short Sprints","text":"estimate Force-Velocity Profile (FVP) using approach Samozino et al. (2016, 2022) use shorts::create_FVP(): convert back Acceleration-Velocity Profile (AVP), use:","code":"kimberley_fv <- shorts::create_FVP(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,   # These are needed to estimate air resistance   bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight )  kimberley_fv #> $bodymass #> [1] 60 #>  #> $F0 #> [1] 635.3389 #>  #> $F0_rel #> [1] 10.58898 #>  #> $V0 #> [1] 8.845438 #>  #> $Pmax #> [1] 1404.963 #>  #> $Pmax_rel #> [1] 23.41605 #>  #> $FV_slope #> [1] -1.197112 kimberley_avp <- shorts::convert_FVP(   F0 = kimberley_fv$F0,   V0 = kimberley_fv$V0,   bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight )  kimberley_avp #> $MSS #> [1] 8.591143 #>  #> $MAC #> [1] 10.58898"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"using-external-load","dir":"","previous_headings":"Examples","what":"Using external load","title":"Short Sprints","text":"{shorts} package also allows utilizing external load estimating FVP, well using FVP parameters predict kinematic kinetic variables. External load represented either additional inertia (.e., weight vest), horizontal resistance (.e., tether device create additional resistance help, hill sprinting), (.e., sled, inertia resistance due friction forces). One might also consider head tail wind form resistance (assistance). Let’s see theoretical model, assuming FVP determinant performance (agree , BTW), predicts changes sprint characteristics (.e., MSS MAC) different external load conditions magnitudes using Kimberley’s estimated FVP:  Following figure depicts effect split times different load types magnitudes, assuming FVP determinant performance (.e., causal mechanism):  One can use external resistance predicting force power: External resistances can also utilized Optimization functions, covered later.","code":"loads_df <- rbind(   tibble(type = \"Weight vest\", magnitude = seq(0, 20, length.out = 100), inertia = magnitude, resistance = 0),   tibble(type = \"Tether\", magnitude = seq(-50, 200, length.out = 100), inertia = 0, resistance = magnitude),   tibble(type = \"Sled\", magnitude = seq(0, 40, length.out = 100), inertia = magnitude, resistance = magnitude * 9.81 * 0.4) ) %>%   mutate(     data.frame(shorts::convert_FVP(       F0 = kimberley_fv$F0,       V0 = kimberley_fv$V0,       bodymass = kimberley_bodymass,       bodyheight = kimberley_bodyheight,       inertia = inertia,       resistance = resistance     ))   )   loads_df %>%   pivot_longer(cols = c(MSS, MAC), names_to = \"parameter\") %>%   ggplot(aes(x = magnitude, y = value, color = parameter)) +   theme_bw() +    geom_vline(xintercept = 0, linetype = \"dotted\") +   geom_line() +   facet_wrap(~type, scales = \"free_x\") +   ylab(NULL) dist_df <- expand_grid(   loads_df,   distance = c(5, 10, 20, 30, 40) ) %>%   mutate(     time = predict_time_at_distance(distance, MSS, MAC),     distance = factor(       paste0(distance, \"m\"), levels = c(\"5m\", \"10m\", \"20m\", \"30m\", \"40m\"))   )   dist_df %>%   ggplot(aes(x = magnitude, y = time, color = distance)) +   theme_bw() +    geom_vline(xintercept = 0, linetype = \"dotted\") +   geom_line() +   facet_wrap(~type, scales = \"free_x\") +   ylab(\"Time (s)\") shorts::predict_force_at_time(   time = 0.5,   MSS = 9,   MAC = 7,   bodymass = 75,   inertia = 20,   resistance = 50) #> [1] 503.0126  shorts::predict_power_at_time(   time = 0.5,   MSS = 9,   MAC = 7,   bodymass = 75,   inertia = 20,   resistance = 50) #> [1] 1458.593  shorts::predict_time_at_distance_FV(   distance = 10,   F0 = 750,   V0 = 8,   bodymass = 75,   inertia = 20,   resistance = 50) #> [1] 2.259444"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"using-corrections","dir":"","previous_headings":"Examples","what":"Using corrections","title":"Short Sprints","text":"probably noticed estimated MSS TAU bit high splits data. Biased estimates due differences starting positions timing triggering methods certain measurement approaches (e.g. starting behind first timing gate, allowing body rocking). provide quick summary. Often, bias estimates dealt using heuristic rule thumb adding time correction (time_correction) split times (e.g. 0.3-0.5sec; see Haugen et al., 2012). , just add time correction time split: Instead providing TC, parameter can estimated using shorts::model_timing_gates_TC(). Instead estimating TC, {shorts} package features method estimating flying start distance (FD): want use fixed FD parameter (e.g., know flying distance), similar vein using fixed TC correction, use:","code":"kimberley_profile_fixed_TC <- shorts::model_timing_gates(   distance = kimberley_data$distance,   time = kimberley_data$time + 0.3 )  kimberley_profile_fixed_TC #> Estimated model parameters #> -------------------------- #>       MSS       TAU       MAC      PMAX  #>  9.127769  1.377624  6.625731 15.119536  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>    0.999971375    0.001009227    0.125589831   -0.007689947   -0.222961649  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>    0.016398636    1.124735002    0.016398636    1.124735002    0.008139867  #>      RMSE_perc            MAE       MAE_perc  #>    0.477039249    0.006393853    0.285701748  summary(kimberley_profile_fixed_TC) #>  #> Formula: time ~ TAU * I(LambertW::W(-exp(1)^(-distance/(MSS * TAU) - 1))) +  #>     distance/MSS + TAU #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|)     #> MSS  9.12777    0.05355  170.44 7.11e-09 *** #> TAU  1.37762    0.02131   64.66 3.43e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.009969 on 4 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08  coef(kimberley_profile_fixed_TC) #>       MSS       TAU       MAC      PMAX  #>  9.127769  1.377624  6.625731 15.119536 kimberley_profile_TC <- shorts::model_timing_gates_TC(   distance = kimberley_data$distance,   time = kimberley_data$time )  kimberley_profile_TC #> Estimated model parameters #> -------------------------- #>       MSS       TAU       MAC      PMAX  #>  8.974835  1.234857  7.267917 16.307090  #>  #> Estimated model corrections #> -------------------------- #>         TC  #> -0.2346537  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.999997e-01   1.696769e-11   1.816277e-03  -1.180735e-03  -6.237372e-02  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   1.209466e-03   5.974775e-02   1.209466e-03   6.237372e-02   7.983565e-04  #>      RMSE_perc            MAE       MAE_perc  #>   3.748225e-02   6.586034e-04   2.823533e-02 kimberley_profile_FD <- shorts::model_timing_gates_FD(   distance = kimberley_data$distance,   time = kimberley_data$time )  kimberley_profile_FD #> Estimated model parameters #> -------------------------- #>       MSS       TAU       MAC      PMAX  #>  9.002681  1.287701  6.991283 15.735073  #>  #> Estimated model corrections #> -------------------------- #>        FD  #> 0.3015635  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   6.447913e-07   3.182714e-04  -4.036159e-04  -1.281727e-02  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   4.557031e-04   1.056580e-02   4.557031e-04   1.281727e-02   2.758661e-04  #>      RMSE_perc            MAE       MAE_perc  #>   8.402643e-03   2.367539e-04   7.829109e-03 kimberley_profile_fixed_FD <- shorts::model_timing_gates_FD(   distance = kimberley_data$distance,   time = kimberley_data$time,   FD = 0.5 )  kimberley_profile_fixed_FD #> Estimated model parameters #> -------------------------- #>       MSS       TAU       MAC      PMAX  #>  9.178464  1.472935  6.231413 14.298700  #>  #> Estimated model corrections #> -------------------------- #>  FD  #> 0.5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>    0.999973897    0.001247560    0.177401430   -0.007903690   -0.250990459  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>    0.015461987    1.335232014    0.015461987    1.335232014    0.007939415  #>      RMSE_perc            MAE       MAE_perc  #>    0.564926535    0.006718969    0.349905006"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"cross-validation-cv","dir":"","previous_headings":"Examples","what":"Cross-Validation (CV)","title":"Short Sprints","text":"model_ family functions come CV feature performed setting function parameter CV desired number folds. feature useful checking model parameters robustness model predictions unseen data. Let’s use Kimberley , time perform special kind CV, leave-one--cross-validation (LOOCV): Radar gun data often comes much observations, thus can set smaller CV parameter:","code":"kimberley_profile_CV <- shorts::model_timing_gates(   distance = kimberley_data$distance,   time = kimberley_data$time,   # To perform LOOCV number of folds is equal to    # number of observatins   CV = nrow(kimberley_data) )  kimberley_profile_CV #> Estimated model parameters #> -------------------------- #>        MSS        TAU        MAC       PMAX  #>  8.5911430  0.8113285 10.5889820 22.7428645  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>     0.99965531    -0.00309334    -0.53860253    -0.05293456    -4.57120551  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>     0.02699162     0.85714883     0.05293456     4.57120551     0.02778875  #>      RMSE_perc            MAE       MAE_perc  #>     1.93921846     0.02333341     1.19263265  #>  #>  #> Cross-Validation #> ------------------------------ #> Parameters: #>   .fold      MSS       TAU      MAC     PMAX #> 1     1 8.693800 0.8561005 10.15512 22.07163 #> 2     2 8.560667 0.7953648 10.76319 23.03503 #> 3     3 8.394674 0.7596924 11.05010 23.19049 #> 4     4 8.571600 0.7972998 10.75079 23.03786 #> 5     5 8.608052 0.8130141 10.58783 22.78514 #> 6     6 8.599599 0.8152661 10.54821 22.67760 #>  #> Testing model fit estimators (overall): #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>     0.99901083    -0.01236576    -0.85484629    -0.08009036    -5.96012084  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>     0.03444978     1.09399120     0.08009036     5.96012084     0.04742765  #>      RMSE_perc            MAE       MAE_perc  #>     2.59202754     0.03923868     1.72270383 jim_profile_CV <- shorts::model_radar_gun(   time = jim_data$time,   velocity = jim_data$velocity,   CV = 10 )  jim_profile_CV #> Estimated model parameters #> -------------------------- #>        MSS        TAU        MAC       PMAX  #>  7.9980114  0.8887955  8.9987083 17.9929427  #>  #> Estimated model corrections #> -------------------------- #>           TC  #> 0.0001103989  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.992441e-01  -4.601924e-08           -Inf  -1.640452e-01           -Inf  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   1.511231e-01   2.332507e+00   1.640452e-01            Inf   5.050254e-02  #>      RMSE_perc            MAE       MAE_perc  #>            Inf   3.927236e-02            Inf  #>  #>  #> Cross-Validation #> ------------------------------ #> Parameters: #>    .fold      MSS       TAU      MAC     PMAX #> 1      1 7.997012 0.8890576 8.994931 17.98314 #> 2      2 7.997697 0.8883183 9.003189 18.00119 #> 3      3 7.997266 0.8888389 8.997430 17.98871 #> 4      4 7.998063 0.8888795 8.997915 17.99147 #> 5      5 7.999258 0.8889119 8.998932 17.99619 #> 6      6 7.998143 0.8884548 9.002307 18.00043 #> 7      7 7.998979 0.8892622 8.995074 17.98785 #> 8      8 7.998321 0.8885668 9.001374 17.99897 #> 9      9 7.998101 0.8880004 9.006867 18.00946 #> 10    10 7.997287 0.8897072 8.988672 17.97125 #>  #> Testing model fit estimators (overall): #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.992387e-01  -1.380449e-05           -Inf  -1.616499e-01           -Inf  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   1.507893e-01   2.327354e+00   1.616499e-01            Inf   5.068118e-02  #>      RMSE_perc            MAE       MAE_perc  #>            Inf   3.944145e-02            Inf"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"optimization","dir":"","previous_headings":"Examples","what":"Optimization","title":"Short Sprints","text":"Using method outlined Samozino et al (2022), one can find optimal profiles, well profile imbalance (compared optimal), sprint profiles (.e., MSS MAC) Force-Velocity (FV). addition , one can probe profiles (.e., increase V0/F0 MSS/MAC say 2.5% check improvement yield improvement sprint time). following graph depicts estimate profile imbalances. Note >100% velocity deficit (.e., increasing velocity; MSS V0; yield improvement sprint times), <100% force deficit.","code":"MSS <- 10 MAC <- 8 bodymass <- 75  fv <- create_FVP(MSS, MAC, bodymass)  opt_df <- tibble(   dist = seq(5, 50, by = 5) ) %>%   mutate(     `Sprint Profile` = optimal_MSS_MAC(       distance = dist,       MSS,       MAC     )[[\"profile_imb\"]],     `FV Profile` = optimal_FV(       distance = dist,       fv$F0,       fv$V0,       bodymass     )[[\"profile_imb\"]],     `FV Profile (PeakPower)` = optimal_FV(       distance = dist,       fv$F0,       fv$V0,       bodymass,       method = \"peak\"     )[[\"profile_imb\"]],     `Probe FV` = probe_FV(       distance = dist,       fv$F0,       fv$V0,       bodymass     )[[\"profile_imb\"]],     `Probe MSS/MAC` = probe_MSS_MAC(       distance = dist,       MSS,       MAC     )[[\"profile_imb\"]]   ) %>%   pivot_longer(-dist, names_to = \"profile\")  opt_dist <- tibble(   `Sprint Profile` = find_optimal_distance(     MSS,     MAC,     optimal_func = optimal_MSS_MAC   ),   `FV Profile` = find_optimal_distance(     fv$F0,     fv$V0,     bodymass,     optimal_func = optimal_FV   ),   `FV Profile (PeakPower)` = find_optimal_distance(     fv$F0,     fv$V0,     bodymass,     optimal_func = optimal_FV,     method = \"peak\"   ),   `Probe FV` = find_optimal_distance(     fv$F0,     fv$V0,     bodymass,     optimal_func = probe_FV   ),   `Probe MSS/MAC` = find_optimal_distance(     MSS,     MAC,     optimal_func = probe_MSS_MAC   ) ) %>%   pivot_longer(cols = 1:5, names_to = \"profile\")  ggplot(opt_df, aes(x = dist, y = value, color = profile)) +   theme_bw() +   geom_hline(yintercept = 100, linetype = \"dashed\", alpha = 0.6) +   geom_line() +   geom_point(data = opt_dist, aes(x = value, y = 100), size = 2) +   xlab(\"Distance (m)\") +   ylab(\"Profile imbalance\")"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"publications","dir":"","previous_headings":"","what":"Publications","title":"Short Sprints","text":"Jovanović, M., Vescovi, J.D. (2022). {shorts}: R Package Modeling Short Sprints. International Journal Strength Conditioning, 2(1). https://doi.org/10.47206/ijsc.v2i1.74 Jovanović M. (2023). Bias estimated short sprint profiles using timing gates due flying start: simulation study proposed solutions. Computer Methods Biomechanics Biomedical Engineering:1–11. https://doi.org/10.1080/10255842.2023.2170713 Vescovi, JD Jovanović, M. (2021). Sprint Mechanical Characteristics Female Soccer Players: Retrospective Pilot Study Examine Novel Approach Correction Timing Gate Starts. Front Sports Act Living 3: 629694, 2021. https://doi.org/10.3389/fspor.2021.629694","code":""},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Short Sprints","text":"cite {shorts}, please use following command get BibTex entry:","code":"citation(\"shorts\")"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Short Sprints","text":"Please refer publications information short sprints modeling using mono-exponential equation: Chelly SM, Denis C. 2001. Leg power hopping stiffness: relationship sprint running performance: Medicine Science Sports Exercise:326–333. DOI: 10.1097/00005768-200102000-00024. Clark KP, Rieger RH, Bruno RF, Stearne DJ. 2017. NFL Combine 40-Yard Dash: Important Maximum Velocity? Journal Strength Conditioning Research:1. DOI: 10.1519/JSC.0000000000002081. Clavel, P., Leduc, C., Morin, J.-B., Buchheit, M., & Lacome, M. (2023). Reliability individual acceleration-speed profile -situ elite youth soccer players. Journal Biomechanics, 153, 111602. https://doi.org/10.1016/j.jbiomech.2023.111602 Furusawa K, Hill AV, Parkinson JL. dynamics ” sprint” running. Proceedings Royal Society London. Series B, Containing Papers Biological Character 102 (713): 29-42, 1927 Greene PR. 1986. Predicting sprint dynamics maximum-velocity measurements. Mathematical Biosciences 80:1–18. DOI: 10.1016/0025-5564(86)90063-5. Haugen TA, Tønnessen E, Seiler SK. 2012. Difference Start: Impact Timing Start Procedure Sprint Running Performance: Journal Strength Conditioning Research 26:473–479. DOI: 10.1519/JSC.0b013e318226030b. Samozino P, Rabita G, Dorel S, Slawinski J, Peyrot N, Saez de Villarreal E, Morin J-B. 2016. simple method measuring power, force, velocity properties, mechanical effectiveness sprint running: Simple method compute sprint mechanics. Scandinavian Journal Medicine & Science Sports 26:648–658. DOI: 10.1111/sms.12490. Samozino P. 2018. Simple Method Measuring Force, Velocity Power Capabilities Mechanical Effectiveness Sprint Running. : Morin J-B, Samozino P eds. Biomechanics Training Testing. Cham: Springer International Publishing, 237–267. DOI: 10.1007/978-3-319-05633-3_11. Samozino P, Peyrot N, Edouard P, Nagahara R, Jimenez‐Reyes P, Vanwanseele B, Morin J. 2022. Optimal mechanical force‐velocity profile sprint acceleration performance.Scandinavian Journal Medicine & Science Sports 32:559–575. DOI: 10.1111/sms.14097.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/LPS_session.html","id":null,"dir":"Reference","previous_headings":"","what":"LPS Basketball Session Dataset — LPS_session","title":"LPS Basketball Session Dataset — LPS_session","text":"LPS Basketball Session Dataset","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/LPS_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LPS Basketball Session Dataset — LPS_session","text":"","code":"data(LPS_session)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/LPS_session.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"LPS Basketball Session Dataset — LPS_session","text":"Data frame 5 variables 91,099 observations: time Time seconds start session x x-coordinate meters provided LPS y y-coordinate meters provided LPS velocity Velocity provided LPS m/s acceleration Acceleration provided LPS m/s","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/LPS_session.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LPS Basketball Session Dataset — LPS_session","text":"dataset represents sample data provided Local Positioning System (LPS) single individual     performing single basketball practice session (aprox. 90min). Sampling frequency 20Hz.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/coef.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","title":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","text":"S3 method extracting model parameters shorts_model object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/coef.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","text":"","code":"# S3 method for shorts_model coef(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/coef.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","text":"object shorts_model object ... Extra arguments. used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/coef.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) coef(simple_model) #>        MSS        TAU        MAC       PMAX  #>  9.7809914  0.7879759 12.4128052 30.3523852"},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"function converts back Force-Velocity profile (FVP) Acceleration-Velocity     profile (AVP)","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"","code":"convert_FVP(   F0,   V0,   bodymass = 75,   inertia = 0,   resistance = 0,   wind_velocity = 0,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"F0, V0 Numeric vectors. FV profile parameters bodymass Body mass kg. Used calculate relative power forwarded get_air_resistance inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind ... Forwarded predict_power_at_distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"list calculated MSS MAC parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"","code":"FVP <- create_FVP(7, 8.3, inertia = 10, resistance = 50)  convert_FVP(FVP$F0, FVP$V0, inertia = 10, resistance = 50) #> $MSS #> [1] 7 #>  #> $MAC #> [1] 8.3 #>"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Force-Velocity Profile — create_FVP","title":"Create Force-Velocity Profile — create_FVP","text":"Provides Force-Velocity (FV) profile modified using ideas Pierre Samozino JB-Morin, et al. (2016)    Pierre Samozino Nicolas Peyror, et al (2021).","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Force-Velocity Profile — create_FVP","text":"","code":"create_FVP(   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   wind_velocity = 0,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Force-Velocity Profile — create_FVP","text":"MSS, MAC Numeric vectors. Model parameters bodymass Body mass kg. Used calculate relative power forwarded get_air_resistance inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind ... Forwarded predict_power_at_distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Force-Velocity Profile — create_FVP","text":"List containing following elements:  bodymass Returned bodymass used FV profiling F0 Horizontal force velocity=0 F0_rel F0 divided bodymass V0 Velocity horizontal force=0 Pmax Maximal horizontal power Pmax_rel Pmax divided bodymass FV_slope Slope FV profile. See References info","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create Force-Velocity Profile — create_FVP","text":"Samozino P, Rabita G, Dorel S, Slawinski J, Peyrot N, Saez de Villarreal E, Morin J-B. 2016.     simple method measuring power, force, velocity properties, mechanical effectiveness     sprint running: Simple method compute sprint mechanics. Scandinavian Journal Medicine & Science     Sports 26:648–658. DOI: 10.1111/sms.12490. Samozino P, Peyrot N, Edouard P, Nagahara R, Jimenez‐Reyes P, Vanwanseele B, Morin J. 2022.      Optimal mechanical force‐velocity profile sprint acceleration performance.       Scandinavian Journal Medicine & Science Sports 32:559–575. DOI: 10.1111/sms.14097.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Force-Velocity Profile — create_FVP","text":"","code":"data(\"jb_morin\")  m1 <- model_radar_gun(time = jb_morin$time, velocity = jb_morin$velocity)  fv_profile <- create_FVP(   MSS = m1$parameters$MSS,   MAC = m1$parameters$MAC,   bodyheight = 1.72,   bodymass = 120,  )  fv_profile #> $bodymass #> [1] 120 #>  #> $F0 #> [1] 829.9911 #>  #> $F0_rel #> [1] 6.916592 #>  #> $V0 #> [1] 9.534875 #>  #> $Pmax #> [1] 1978.465 #>  #> $Pmax_rel #> [1] 16.48721 #>  #> $FV_slope #> [1] -0.7253994 #>"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_timing_gates_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Timing Gates Splits — create_timing_gates_splits","title":"Create Timing Gates Splits — create_timing_gates_splits","text":"function used generate timing gates splits predetermined parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_timing_gates_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Timing Gates Splits — create_timing_gates_splits","text":"","code":"create_timing_gates_splits(   MSS,   MAC,   gates = c(5, 10, 20, 30, 40),   FD = 0,   TC = 0,   noise = 0 )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_timing_gates_splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Timing Gates Splits — create_timing_gates_splits","text":"MSS, MAC Numeric vectors. Model parameters gates Numeric vectors. Distances timing gates FD Numeric vector. Flying start distance. Default 0 TC Numeric vector. Time-correction added split times (e.g., reaction time). Default 0 noise Numeric vector. SD Gaussian noise added split times. Default 0","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_timing_gates_splits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Timing Gates Splits — create_timing_gates_splits","text":"","code":"create_timing_gates_splits(   gates = c(10, 20, 30, 40, 50),   MSS = 10,   MAC = 9,   FD = 0.5,   TC = 0 ) #> [1] 1.622046 2.741529 3.783338 4.799463 5.805886"},{"path":"https://mladenjovanovic.github.io/shorts/reference/dynaspeed.html","id":null,"dir":"Reference","previous_headings":"","what":"DynaSpeed Single Sprint Data — dynaspeed","title":"DynaSpeed Single Sprint Data — dynaspeed","text":"DynaSpeed(TM) data collected single athlete (female, 177cm, 64kg) single sprint 40m.     Sampling frequenzy 1,000Hz","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/dynaspeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DynaSpeed Single Sprint Data — dynaspeed","text":"","code":"data(dynaspeed)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/dynaspeed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DynaSpeed Single Sprint Data — dynaspeed","text":"Data frame 4 variables 7,251 observations: time time seconds distance Distance meters velocity Smoothed velocity meters per second raw_velocity Velocity meters per second","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/dynaspeed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DynaSpeed Single Sprint Data — dynaspeed","text":"Håkan Andersson     High-Performance Center     Växjö, Swedenhakan.andersson@hpcsweden.com","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Find functions — find_functions","title":"Find functions — find_functions","text":"Family functions serve purpose finding maximal value critical distances times     power, acceleration velocity drops certain threshold. find_peak_power_distance finds peak power distance    peak power occurs find_peak_power_time finds peak power time     peak power occurs find_velocity_critical_distance finds critical distance percent     MSS achieved find_velocity_critical_time finds critical time percent MSS     achieved find_acceleration_critical_distance finds critical distance percent     MAC reached find_acceleration_critical_time finds critical time percent     MAC reached find_power_critical_distance finds critical distances peak power     percent achieved find_power_critical_time finds critical times peak power     percent achieved","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find functions — find_functions","text":"","code":"find_peak_power_distance(MSS, MAC, inertia = 0, resistance = 0, ...)  find_peak_power_time(MSS, MAC, inertia = 0, resistance = 0, ...)  find_velocity_critical_distance(MSS, MAC, percent = 0.9)  find_velocity_critical_time(MSS, MAC, percent = 0.9)  find_acceleration_critical_distance(MSS, MAC, percent = 0.9)  find_acceleration_critical_time(MSS, MAC, percent = 0.9)  find_power_critical_distance(   MSS,   MAC,   inertia = 0,   resistance = 0,   percent = 0.9,   ... )  find_power_critical_time(   MSS,   MAC,   inertia = 0,   resistance = 0,   percent = 0.9,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find functions — find_functions","text":"MSS, MAC Numeric vectors. Model parameters inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) ... Forwarded predict_power functions purpose calculation air resistance percent Numeric vector. Used calculate critical distance. Default 0.9","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find functions — find_functions","text":"find_peak_power_distance returns list two elements: peak_power distance peak power occurs find_peak_power_time returns list two elements: peak_power  time peak power occurs","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find functions — find_functions","text":"Haugen TA, Tønnessen E, Seiler SK. 2012. Difference Start: Impact Timing Start         Procedure Sprint Running Performance: Journal Strength Conditioning Research 26:473–479.         DOI: 10.1519/JSC.0b013e318226030b. Samozino P. 2018. Simple Method Measuring Force, Velocity Power Capabilities Mechanical         Effectiveness Sprint Running. : Morin J-B, Samozino P eds. Biomechanics Training Testing.        Cham: Springer International Publishing, 237–267. DOI: 10.1007/978-3-319-05633-3_11.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find functions — find_functions","text":"","code":"dist <- seq(0, 40, length.out = 1000)  velocity <- predict_velocity_at_distance(   distance = dist,   MSS = 10,   MAC = 9 )  acceleration <- predict_acceleration_at_distance(   distance = dist,   MSS = 10,   MAC = 9 )  # Use ... to forward parameters to the shorts::get_air_resistance pwr <- predict_power_at_distance(   distance = dist,   MSS = 10,   MAC = 9   # bodyweight = 100,   # bodyheight = 1.9,   # barometric_pressure = 760,   # air_temperature = 25,   # wind_velocity = 0 )  # Find critical distance when 90% of MSS is reached plot(x = dist, y = velocity, type = \"l\") abline(h = 10 * 0.9, col = \"gray\") abline(v = find_velocity_critical_distance(MSS = 10, MAC = 9), col = \"red\")   # Find critical distance when 20% of MAC is reached plot(x = dist, y = acceleration, type = \"l\") abline(h = 9 * 0.2, col = \"gray\") abline(v = find_acceleration_critical_distance(MSS = 10, MAC = 9, percent = 0.2), col = \"red\")   # Find peak power and location of peak power plot(x = dist, y = pwr, type = \"l\")  peak_pwr <- find_peak_power_distance(   MSS = 10,   MAC = 9   # Use ... to forward parameters to the shorts::get_air_resistance ) abline(h = peak_pwr$peak_power, col = \"gray\") abline(v = peak_pwr$distance, col = \"red\")   # Find distance in which relative power stays over 75% of PMAX' plot(x = dist, y = pwr, type = \"l\") abline(h = peak_pwr$peak_power * 0.75, col = \"gray\") pwr_zone <- find_power_critical_distance(MSS = 10, MAC = 9, percent = 0.75) abline(v = pwr_zone$lower, col = \"blue\") abline(v = pwr_zone$upper, col = \"blue\")"},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that finds the distance at which the sprint, probe, or\n    FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","title":"Function that finds the distance at which the sprint, probe, or\n    FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"Function finds distance sprint, probe,     FV profile optimal (.e., equal 100 perc)","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that finds the distance at which the sprint, probe, or\n    FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"","code":"find_optimal_distance(..., optimal_func = optimal_FV, min = 1, max = 60)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that finds the distance at which the sprint, probe, or\n    FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"... Forwarded selected optimal_func optimal_func Selected profile optimization function. Default optimal_FV min, max Distance find optimal profile distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that finds the distance at which the sprint, probe, or\n    FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"Distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function that finds the distance at which the sprint, probe, or\n    FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"","code":"MSS <- 10 MAC <- 8 bodymass <- 75  fv <- create_FVP(MSS, MAC, bodymass)  find_optimal_distance(   F0 = fv$F0,   V0 = fv$V0,   bodymass = fv$bodymass,   optimal_func = optimal_FV,   method = \"max\" ) #> [1] 18.80181  find_optimal_distance(   MSS = MSS,   MAC = MAC,   optimal_func = optimal_MSS_MAC ) #> [1] 15.8214  find_optimal_distance(   MSS = MSS,   MAC = MAC,   optimal_func = probe_MSS_MAC ) #> [1] 16.01597"},{"path":"https://mladenjovanovic.github.io/shorts/reference/fitted.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for returning predictions of shorts_model — fitted.shorts_model","title":"S3 method for returning predictions of shorts_model — fitted.shorts_model","text":"S3 method returning predictions shorts_model","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/fitted.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for returning predictions of shorts_model — fitted.shorts_model","text":"","code":"# S3 method for shorts_model fitted(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/fitted.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for returning predictions of shorts_model — fitted.shorts_model","text":"object shorts_model object ... Extra arguments. used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/fitted.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for returning predictions of shorts_model — fitted.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) fitted(simple_model) #> [1] 1.721739 2.810500 3.849193 4.875922 5.899491"},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Split Data — format_splits","title":"Format Split Data — format_splits","text":"Function formats split data calculates split distances, split times average split velocity","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Split Data — format_splits","text":"","code":"format_splits(distance, time)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Split Data — format_splits","text":"distance Numeric vector time Numeric vector","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Split Data — format_splits","text":"Data frame following columns:  split Split number split_distance_start Distance split starts split_distance_stop Distance split ends split_distance Split distance split_time_start Time distance starts split_time_stop Time distance ends split_time Split time split_mean_velocity Mean velocity split distance split_mean_acceleration Mean acceleration split distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Split Data — format_splits","text":"","code":"data(\"split_times\")  john_data <- split_times[split_times$athlete == \"John\", ]  format_splits(john_data$distance, john_data$time) #>   split split_distance_start split_distance_stop split_distance #> 1     1                    0                   5              5 #> 2     2                    5                  10              5 #> 3     3                   10                  15              5 #> 4     4                   15                  20              5 #> 5     5                   20                  30             10 #> 6     6                   30                  40             10 #>   split_time_start split_time_stop split_time split_mean_velocity #> 1                0           1.201      1.201        4.163197.... #> 2            1.201           1.967      0.766        6.527415.... #> 3            1.967           2.656      0.689        7.256894.... #> 4            2.656           3.314      0.658        7.598784.... #> 5            3.314           4.591      1.277        7.830853.... #> 6            4.591           5.849      1.258        7.949125.... #>   split_mean_acceleration #> 1            3.466442.... #> 2            3.086446.... #> 3            1.058750.... #> 4            0.519589.... #> 5            0.181730.... #> 6            0.094015...."},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Air Resistance — get_air_resistance","title":"Get Air Resistance — get_air_resistance","text":"get_air_resistance estimates air resistance Newtons","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Air Resistance — get_air_resistance","text":"","code":"get_air_resistance(   velocity,   bodymass = 75,   bodyheight = 1.75,   barometric_pressure = 760,   air_temperature = 25,   wind_velocity = 0 )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Air Resistance — get_air_resistance","text":"velocity Instantaneous running velocity meters per second (m/s) bodymass kilograms (kg) bodyheight meters (m) barometric_pressure Torrs air_temperature Celzius (C) wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Air Resistance — get_air_resistance","text":"Air resistance Newtons (N)","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Air Resistance — get_air_resistance","text":"Arsac LM, Locatelli E. 2002. Modeling energetics 100-m running using speed curves         world champions. Journal Applied Physiology 92:1781–1788.         DOI: 10.1152/japplphysiol.00754.2001. Samozino P, Rabita G, Dorel S, Slawinski J, Peyrot N, Saez de Villarreal E, Morin J-B. 2016.         simple method measuring power, force, velocity properties, mechanical         effectiveness sprint running: Simple method compute sprint mechanics.         Scandinavian Journal Medicine & Science Sports 26:648–658. DOI: 10.1111/sms.12490. van Ingen Schenau GJ, Jacobs R, de Koning JJ. 1991. Can cycle power predict sprint running        performance? European Journal Applied Physiology Occupational Physiology 63:255–260.        DOI: 10.1007/BF00233857.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Air Resistance — get_air_resistance","text":"","code":"get_air_resistance(   velocity = 5,   bodymass = 80,   bodyheight = 1.90,   barometric_pressure = 760,   air_temperature = 16,   wind_velocity = -0.5 ) #> [1] 9.183696"},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":null,"dir":"Reference","previous_headings":"","what":"JB Morin Sample Dataset — jb_morin","title":"JB Morin Sample Dataset — jb_morin","text":"Sample radar gun data provided Jean-Benoît Morin website. See   https://jbmorin.net/2017/12/13/-spreadsheet--sprint-acceleration-force-velocity-power-profiling/    details.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JB Morin Sample Dataset — jb_morin","text":"","code":"data(jb_morin)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"JB Morin Sample Dataset — jb_morin","text":"Data frame 2 variables 232 observations: time Time seconds velocity Velocity m/s","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"JB Morin Sample Dataset — jb_morin","text":"dataset represents sample data provided Jean-Benoît Morin single individual running     approximately 35m stand still position measured radar gun. Individual's body     mass 75kg, height 1.72m. Conditions run following: air temperature 25C,     barometric pressure 760mmHg, wind velocity 0m/s. purpose including dataset package check agreement model estimates     Jean-Benoît Morin Microsoft Excel spreadsheet.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"JB Morin Sample Dataset — jb_morin","text":"Morin JB. 2017.spreadsheet Sprint acceleration Force-Velocity-Power profiling.     Available https://jbmorin.net/2017/12/13/-spreadsheet--sprint-acceleration-force-velocity-power-profiling/     (accessed October 27, 2020).","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"JB Morin Sample Dataset — jb_morin","text":"Jean-Benoît Morin      Inter-university Laboratory Human Movement Biology      Saint-Étienne, France      https://jbmorin.net/","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Model functions — model_functions","title":"Model functions — model_functions","text":"Family functions serve purpose estimating short sprint parameters model_in_situ estimates short sprint parameters using velocity-acceleration trace,     provided monitoring systems like GPS LPS. See references information model_radar_gun estimates short sprint parameters using time-velocity trace,     additional parameter TC serving intercept model_laser_gun alias model_radar_gun model_tether estimates short sprint parameters using distance-velocity trace     (e.g., tether devices) model_tether_DC estimates short sprint parameters using distance-velocity trace     (e.g., tether devices) additional distance correction DC parameter model_timing_gates estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells) model_timing_gates_TC estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells), additional time correction parameter TC model_timing_gates_FD estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells), additional flying distance correction parameter FD model_timing_gates_FD_TC estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells), additional flying distance correction parameter FD      time correction parameter TC","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model functions — model_functions","text":"","code":"model_in_situ(   velocity,   acceleration,   weights = 1,   velocity_threshold = 3,   velocity_step = 0.2,   n_observations = 2,   CV = NULL,   na.rm = FALSE,   ... )  model_radar_gun(   time,   velocity,   weights = 1,   CV = NULL,   use_observed_MSS = FALSE,   na.rm = FALSE,   ... )  model_laser_gun(   time,   velocity,   weights = 1,   CV = NULL,   use_observed_MSS = FALSE,   na.rm = FALSE,   ... )  model_tether(   distance,   velocity,   weights = 1,   CV = NULL,   use_observed_MSS = FALSE,   na.rm = FALSE,   ... )  model_tether_DC(   distance,   velocity,   weights = 1,   CV = NULL,   use_observed_MSS = FALSE,   na.rm = FALSE,   ... )  model_timing_gates(distance, time, weights = 1, CV = NULL, na.rm = FALSE, ...)  model_timing_gates_TC(   distance,   time,   weights = 1,   CV = NULL,   na.rm = FALSE,   ... )  model_timing_gates_FD(   distance,   time,   weights = 1,   FD = NULL,   CV = NULL,   na.rm = FALSE,   ... )  model_timing_gates_FD_TC(   distance,   time,   weights = 1,   FD = NULL,   CV = NULL,   na.rm = FALSE,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model functions — model_functions","text":"weights Numeric vector. Default 1 velocity_threshold Default 3 m/s velocity_step Velocity increment size finding max acceleration. Default 0.2 m/s n_observations Number top acceleration observations keep velocity bracket. Default 2 CV cross-validation used estimate model fit? Default NULL. Otherwise use integer indicating number folds. na.rm Logical. Default FALSE ... Forwarded nlsLM function time, velocity, distance, acceleration Numeric vector use_observed_MSS observed peak velocity used MSS parameter? Default FALSE FD Use parameter want FD parameter estimated, rather take provided value","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model functions — model_functions","text":"List object following elements:  data Data frame used estimate sprint parameters model_info Extra information regarding model used model Model returned nlsLM function parameters List following estimated parameters:             MSS, TAU, MAC, PMAX correction List additional model correcitons predictions Data frame .predictor, .observed,             .predicted, .residual columns model_fit List multiple model fit estimators CV cross-validation performed, included data ,              fold","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model functions — model_functions","text":"Samozino P. 2018. Simple Method Measuring Force, Velocity Power Capabilities Mechanical         Effectiveness Sprint Running. : Morin J-B, Samozino P eds. Biomechanics Training Testing.        Cham: Springer International Publishing, 237–267. DOI: 10.1007/978-3-319-05633-3_11. Clavel, P., Leduc, C., Morin, J.-B., Buchheit, M., & Lacome, M. (2023).     Reliability individual acceleration-speed profile -situ elite youth     soccer players. Journal Biomechanics, 153, 111602.     https://doi.org/10.1016/j.jbiomech.2023.111602","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model functions — model_functions","text":"","code":"data(\"LPS_session\")  insitu_model <- model_in_situ(LPS_session$velocity, LPS_session$acceleration)  print(insitu_model) #> Estimated model parameters #> -------------------------- #>       MSS       TAU       MAC      PMAX  #>  8.854798  1.348506  6.566378 14.535986  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.050428e-01   1.245023e-15  -3.855491e+00  -5.914683e-01  -7.255279e+01  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   4.489672e-01   1.422132e+01   5.914683e-01   7.255279e+01   2.879777e-01  #>      RMSE_perc            MAE       MAE_perc  #>   1.951217e+01   2.453256e-01   1.203888e+01  coef(insitu_model) #>       MSS       TAU       MAC      PMAX  #>  8.854798  1.348506  6.566378 14.535986  plot(insitu_model)   instant_velocity <- data.frame(   time = c(0, 1, 2, 3, 4, 5, 6),   velocity = c(0.00, 4.99, 6.43, 6.84, 6.95, 6.99, 7.00) )  sprint_model <- with(   instant_velocity,   model_radar_gun(time, velocity) )  print(sprint_model) #> Estimated model parameters #> -------------------------- #>        MSS        TAU        MAC       PMAX  #>  7.0032221  0.8013434  8.7393523 15.3009063  #>  #> Estimated model corrections #> -------------------------- #>            TC  #> -3.962943e-05  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.999984e-01  -3.025984e-09            Inf  -5.635219e-03  -8.108228e-02  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   4.080233e-03            Inf   5.635219e-03            Inf   2.966951e-03  #>      RMSE_perc            MAE       MAE_perc  #>            Inf   2.312051e-03            Inf  coef(sprint_model) #>        MSS        TAU        MAC       PMAX  #>  7.0032221  0.8013434  8.7393523 15.3009063  plot(sprint_model)  instant_velocity <- data.frame(   time = c(0, 1, 2, 3, 4, 5, 6),   velocity = c(0.00, 4.99, 6.43, 6.84, 6.95, 6.99, 7.00) )  sprint_model <- with(   instant_velocity,   model_laser_gun(time, velocity) )  print(sprint_model) #> Estimated model parameters #> -------------------------- #>        MSS        TAU        MAC       PMAX  #>  7.0032221  0.8013434  8.7393523 15.3009063  #>  #> Estimated model corrections #> -------------------------- #>            TC  #> -3.962943e-05  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.999984e-01  -3.025984e-09            Inf  -5.635219e-03  -8.108228e-02  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   4.080233e-03            Inf   5.635219e-03            Inf   2.966951e-03  #>      RMSE_perc            MAE       MAE_perc  #>            Inf   2.312051e-03            Inf  coef(sprint_model) #>        MSS        TAU        MAC       PMAX  #>  7.0032221  0.8013434  8.7393523 15.3009063  plot(sprint_model)  # example code  distance <- c(5, 10, 20, 30, 40)  velocity <- predict_velocity_at_distance(distance, MSS = 10, MAC = 8)  m1 <- model_tether(distance = distance, velocity = velocity)  m1 #> Estimated model parameters #> -------------------------- #>   MSS   TAU   MAC  PMAX  #> 10.00  1.25  8.00 20.00  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00  -3.552714e-16  -3.679839e-15  -1.776357e-15  -1.839919e-14  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   0.000000e+00   0.000000e+00   1.776357e-15   1.839919e-14   7.944109e-16  #>      RMSE_perc            MAE       MAE_perc  #>   8.228369e-15   3.552714e-16   3.679839e-15   plot(m1)  distance <- c(5, 10, 20, 30, 40)  velocity <- predict_velocity_at_distance(distance - 0.5, MSS = 10, MAC = 8)  m1 <- model_tether_DC(distance = distance, velocity = velocity)  m1 #> Estimated model parameters #> -------------------------- #>   MSS   TAU   MAC  PMAX  #> 10.00  1.25  8.00 20.00  #>  #> Estimated model corrections #> -------------------------- #>   DC  #> -0.5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   7.105427e-16   8.773026e-15   0.000000e+00   0.000000e+00  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   1.776357e-15   1.842711e-14   1.776357e-15   1.842711e-14   9.729507e-16  #>      RMSE_perc            MAE       MAE_perc  #>   1.155185e-14   7.105427e-16   8.773026e-15   plot(m1)   split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times)  print(simple_model) #> Estimated model parameters #> -------------------------- #>       MSS       TAU       MAC      PMAX  #> 10.000000  1.111111  9.000000 22.500000  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>              1              0              0              0              0  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>              0              0              0              0              0  #>      RMSE_perc            MAE       MAE_perc  #>              0              0              0  coef(simple_model) #>       MSS       TAU       MAC      PMAX  #> 10.000000  1.111111  9.000000 22.500000  plot(simple_model)  split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0,   TC = 0.2,   noise = 0.001 )  # TC model TC_model <- model_timing_gates_TC(split_distances, split_times)  print(TC_model) #> Estimated model parameters #> -------------------------- #>       MSS       TAU       MAC      PMAX  #> 10.000464  1.112268  8.991059 22.478690  #>  #> Estimated model corrections #> -------------------------- #>        TC  #> 0.1993149  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.999997e-01  -7.132428e-12  -1.035021e-04  -1.361363e-03  -2.569241e-02  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   6.489426e-04   1.450706e-02   1.361363e-03   2.569241e-02   7.401642e-04  #>      RMSE_perc            MAE       MAE_perc  #>   1.469220e-02   6.035224e-04   1.296567e-02  coef(TC_model) #>       MSS       TAU       MAC      PMAX  #> 10.000464  1.112268  8.991059 22.478690  plot(TC_model)  split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.5,   TC = 0,   noise = 0.001 )  # FD model FD_model <- model_timing_gates_FD(split_distances, split_times)  print(FD_model) #> Estimated model parameters #> -------------------------- #>       MSS       TAU       MAC      PMAX  #>  9.994255  1.101349  9.074555 22.673353  #>  #> Estimated model corrections #> -------------------------- #>        FD  #> 0.4804831  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.999997e-01  -7.307918e-07  -2.769588e-04  -1.382258e-03  -2.881062e-02  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   7.684871e-04   2.031081e-02   1.382258e-03   2.881062e-02   7.640736e-04  #>      RMSE_perc            MAE       MAE_perc  #>   1.692250e-02   6.014981e-04   1.428708e-02  coef(FD_model) #>       MSS       TAU       MAC      PMAX  #>  9.994255  1.101349  9.074555 22.673353  plot(FD_model)  split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.5,   TC = 0.1,   noise = 0.001 )  # FD TC model FD_TC_model <- model_timing_gates_FD_TC(split_distances, split_times) #> Warning: lmdif: info = -1. Number of iterations has reached `maxiter' == 50.  print(FD_TC_model) #> Estimated model parameters #> -------------------------- #>       MSS       TAU       MAC      PMAX  #>  9.981388  1.062691  9.392563 23.437702  #>  #> Estimated model corrections #> -------------------------- #>           FD           TC  #>  0.000034593 -0.159248866  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.999998e-01  -2.072381e-07  -3.627897e-04  -1.054665e-03  -2.717061e-02  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   1.179357e-03   4.148730e-02   1.179357e-03   4.148730e-02   7.361925e-04  #>      RMSE_perc            MAE       MAE_perc  #>   2.392214e-02   5.905950e-04   1.896632e-02  coef(FD_TC_model) #>       MSS       TAU       MAC      PMAX  #>  9.981388  1.062691  9.392563 23.437702  plot(FD_TC_model)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal profile functions — optimal_functions","title":"Optimal profile functions — optimal_functions","text":"Family functions serve purpose finding optimal sprint force-velocity profile optimal_FV finds \"optimal\" F0 V0 time distance     minimized, keeping power optimal_MSS_MAC finds \"optimal\" MSS MAS time distance     minimized, keeping Pmax ","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal profile functions — optimal_functions","text":"","code":"optimal_FV(   distance,   F0,   V0,   bodymass = 75,   inertia = 0,   resistance = 0,   method = \"max\",   ... )  optimal_MSS_MAC(distance, MSS, MAC)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal profile functions — optimal_functions","text":"distance Numeric vector F0, V0 Numeric vectors. FV profile parameters bodymass Body mass kg inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) method Method utilized. Options \"peak\" \"max\" (default) ... Forwarded get_air_resistance purpose calculation air resistance MSS, MAC Numeric vectors. Model parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal profile functions — optimal_functions","text":"optimal_FV returns s data frame following columns  F0 Original F0 V0 Original F0 bodymass Bodymass inertia Inertia resistance Resistance Pmax Maximal power estimated using F0 * V0 / 4 Pmax_rel Relative maximal power slope FV profile slope distance Distance time Time cover distance Ppeak Peak power estimated quantitatively Ppeak_rel Relative peak power Ppeak_dist Distance peak power manifested Ppeak_time Time peak power manifested F0_optim Optimal F0 F0_coef Ratio F0_optim F0 V0_optim Optimal V0 V0_coef Ratio V0_optim V0 Pmax_optim Optimal maximal power estimated F0_optim * V0_optim / 4 Pmax_rel_optim Optimal relative maximal power slope_optim Optimal FV profile slope profile_imb Percent ratio slope optimal slope time_optim Time cover distance profile optimal time_gain Difference time cover distance time_optimal time Ppeak_optim Optimal peak power estimated quantitatively Ppeak_rel_optim Optimal relative peak power Ppeak_dist_optim Distance optimal peak power manifested Ppeak_time_optim Time optimal peak power manifested optimal_MSS_MAC returns data frame following columns  MSS Original MSS MAC Original MAC Pmax_rel Relative maximal power estimated using MSS * MAC / 4 slope Sprint profile slope distance Distance time Time cover distance MSS_optim Optimal MSS MSS_coef Ratio MSS_optim MSS MAC_optim Optimal MAC MAC_coef Ratio MAC_optim MAC Pmax_rel_optim Optimal relative maximal power estimated using MSS_optim * MAC_optim / 4 slope_optim Optimal sprint profile slope profile_imb Percent ratio slope optimal slope time_optim Time cover distance profile optimal time_gain Difference time cover distance time_optimal time","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal profile functions — optimal_functions","text":"Samozino P, Peyrot N, Edouard P, Nagahara R, Jimenez‐Reyes P, Vanwanseele B, Morin J. 2022.      Optimal mechanical force-velocity profile sprint acceleration performance.       Scandinavian Journal Medicine & Science Sports 32:559–575. DOI: 10.1111/sms.14097.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal profile functions — optimal_functions","text":"","code":"MSS <- 10 MAC <- 8 bodymass <- 75  fv <- create_FVP(MSS, MAC, bodymass)  dist <- seq(5, 40, by = 5)  opt_MSS_MAC_profile <- optimal_MSS_MAC(   distance = dist,   MSS,   MAC )[[\"profile_imb\"]]  opt_FV_profile <- optimal_FV(   distance = dist,   fv$F0,   fv$V0,   fv$bodymass )[[\"profile_imb\"]]  opt_FV_profile_peak <- optimal_FV(   distance = dist,   fv$F0,   fv$V0,   fv$bodymass,   method = \"peak\" )[[\"profile_imb\"]]  plot(x = dist, y = opt_MSS_MAC_profile, type = \"l\", ylab = \"Profile imbalance\") lines(x = dist, y = opt_FV_profile, type = \"l\", col = \"blue\") lines(x = dist, y = opt_FV_profile_peak, type = \"l\", col = \"red\") abline(h = 100, col = \"gray\", lty = 2)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for plotting shorts_model object — plot.shorts_model","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"S3 method plotting shorts_model object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"","code":"# S3 method for shorts_model plot(x, type = \"model\", ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"x shorts_model object type Type plot. Can \"model\" (default), \"kinematics-time\", \"kinematics-distance\", \"residuals\" ... used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"ggplot object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"","code":"# Simple model with radar gun data instant_velocity <- data.frame(   time = c(0, 1, 2, 3, 4, 5, 6),   velocity = c(0.00, 4.99, 6.43, 6.84, 6.95, 6.99, 7.00) )  radar_model <- with(   instant_velocity,   model_radar_gun(time, velocity) )  plot(radar_model)  plot(radar_model, \"kinematics-time\")  plot(radar_model, \"kinematics-distance\")  plot(radar_model, \"residuals\")"},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for making predictions using shorts_model — predict.shorts_model","title":"S3 method for making predictions using shorts_model — predict.shorts_model","text":"S3 method making predictions using shorts_model","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for making predictions using shorts_model — predict.shorts_model","text":"","code":"# S3 method for shorts_model predict(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for making predictions using shorts_model — predict.shorts_model","text":"object shorts_model object ... Forwarded generic predict() function","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for making predictions using shorts_model — predict.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) predict(simple_model) #> [1] 1.721739 2.810500 3.849193 4.875922 5.899491"},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":null,"dir":"Reference","previous_headings":"","what":"Kinematics prediction functions — predict_kinematics","title":"Kinematics prediction functions — predict_kinematics","text":"Predicts kinematic known MSS MAC parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kinematics prediction functions — predict_kinematics","text":"","code":"predict_velocity_at_time(time, MSS, MAC)  predict_distance_at_time(time, MSS, MAC)  predict_acceleration_at_time(time, MSS, MAC)  predict_time_at_distance(distance, MSS, MAC)  predict_time_at_distance_FV(   distance,   F0,   V0,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_velocity_at_distance(distance, MSS, MAC)  predict_acceleration_at_distance(distance, MSS, MAC)  predict_acceleration_at_velocity(velocity, MSS, MAC)  predict_air_resistance_at_time(time, MSS, MAC, ...)  predict_air_resistance_at_distance(distance, MSS, MAC, ...)  predict_force_at_velocity(   velocity,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_force_at_time(   time,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_force_at_distance(   distance,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_power_at_distance(   distance,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_power_at_time(   time,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_relative_power_at_distance(   distance,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_relative_power_at_time(   time,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_work_till_time(time, ...)  predict_work_till_distance(distance, ...)  predict_kinematics(   object = NULL,   MSS,   MAC,   max_time = 6,   frequency = 100,   bodymass = 75,   inertia = 0,   resistance = 0,   add_inertia_to_vertical = TRUE,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kinematics prediction functions — predict_kinematics","text":"time, distance, velocity Numeric vectors MSS, MAC Numeric vectors. Model parameters F0, V0 Numeric vectors. FV profile parameters bodymass Body mass kg. Used calculate relative power forwarded get_air_resistance inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) ... Forwarded predict_power_at_distance object shorts_model object provided, estimated parameters used. Otherwise provide MSS MAC parameters max_time Predict 0 max_time. Default 6seconds frequency Number samples within one second. Default 100Hz add_inertia_to_vertical inertia added bodymass calculating vertical force? Use TRUE (Default) using weight vest, FALSE dragging sled","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kinematics prediction functions — predict_kinematics","text":"Numeric vector Data frame kinetic kinematic variables","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kinematics prediction functions — predict_kinematics","text":"Haugen TA, Tønnessen E, Seiler SK. 2012. Difference Start: Impact Timing Start         Procedure Sprint Running Performance: Journal Strength Conditioning Research 26:473–479.         DOI: 10.1519/JSC.0b013e318226030b. Jovanović, M., Vescovi, J.D. (2020). shorts: R Package Modeling Short Sprints. Preprint         available SportRxiv. https://doi.org/10.31236/osf.io/4jw62 Samozino P. 2018. Simple Method Measuring Force, Velocity Power Capabilities Mechanical         Effectiveness Sprint Running. : Morin J-B, Samozino P eds. Biomechanics Training Testing.        Cham: Springer International Publishing, 237–267. DOI: 10.1007/978-3-319-05633-3_11.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kinematics prediction functions — predict_kinematics","text":"","code":"MSS <- 8 MAC <- 9  time_seq <- seq(0, 6, length.out = 10)  df <- data.frame(   time = time_seq,   distance_at_time = predict_distance_at_time(time_seq, MSS, MAC),   velocity_at_time = predict_velocity_at_time(time_seq, MSS, MAC),   acceleration_at_time = predict_acceleration_at_time(time_seq, MSS, MAC) )  df$time_at_distance <- predict_time_at_distance(df$distance_at_time, MSS, MAC) df$velocity_at_distance <- predict_velocity_at_distance(df$distance_at_time, MSS, MAC) df$acceleration_at_distance <- predict_acceleration_at_distance(df$distance_at_time, MSS, MAC) df$acceleration_at_velocity <- predict_acceleration_at_velocity(df$velocity_at_time, MSS, MAC)  # Power calculation uses shorts::get_air_resistance function and its defaults # values to calculate power. Use the ... to setup your own parameters for power # calculations df$power_at_time <- predict_power_at_time(   time = df$time, MSS = MSS, MAC = MAC,   # Check shorts::get_air_resistance for available params   bodymass = 100, bodyheight = 1.85 )  df #>         time distance_at_time velocity_at_time acceleration_at_time #> 1  0.0000000         0.000000         0.000000           9.00000000 #> 2  0.6666667         1.581273         4.221068           4.25129897 #> 3  1.3333333         5.142259         6.214959           2.00817144 #> 4  2.0000000         9.638394         7.156806           0.94859302 #> 5  2.6666667        14.576264         7.601703           0.44808362 #> 6  3.3333333        19.722793         7.811858           0.21165971 #> 7  4.0000000        24.967886         7.911128           0.09998097 #> 8  4.6666667        30.259538         7.958020           0.04722767 #> 9  5.3333333        35.573182         7.980170           0.02230877 #> 10 6.0000000        40.897215         7.990633           0.01053792 #>    time_at_distance velocity_at_distance acceleration_at_distance #> 1         0.0000000             0.000000               9.00000000 #> 2         0.6666667             4.221068               4.25129897 #> 3         1.3333333             6.214959               2.00817144 #> 4         2.0000000             7.156806               0.94859302 #> 5         2.6666667             7.601703               0.44808362 #> 6         3.3333333             7.811858               0.21165971 #> 7         4.0000000             7.911128               0.09998097 #> 8         4.6666667             7.958020               0.04722767 #> 9         5.3333333             7.980170               0.02230877 #> 10        6.0000000             7.990633               0.01053792 #>    acceleration_at_velocity power_at_time #> 1                9.00000000        0.0000 #> 2                4.25129897     1818.3818 #> 3                2.00817144     1324.2919 #> 4                0.94859302      795.2812 #> 5                0.44808362      480.0949 #> 6                0.21165971      316.7110 #> 7                0.09998097      236.3057 #> 8                0.04722767      197.6055 #> 9                0.02230877      179.1643 #> 10               0.01053792      170.4175  # Example for predict_kinematics split_times <- data.frame(   distance = c(5, 10, 20, 30, 35),   time = c(1.20, 1.96, 3.36, 4.71, 5.35) )  # Simple model simple_model <- with(   split_times,   model_timing_gates(distance, time) )  predict_kinematics(simple_model) #>     time     distance  velocity acceleration bodymass inertia resistance #> 1   0.00 0.000000e+00 0.0000000 1.159360e+01       75       0          0 #> 2   0.01 5.766621e-04 0.1150318 1.141323e+01       75       0          0 #> 3   0.02 2.294670e-03 0.2282739 1.123566e+01       75       0          0 #> 4   0.03 5.136268e-03 0.3397542 1.106086e+01       75       0          0 #> 5   0.04 9.083974e-03 0.4495001 1.088877e+01       75       0          0 #> 6   0.05 1.412058e-02 0.5575386 1.071937e+01       75       0          0 #> 7   0.06 2.022914e-02 0.6638962 1.055259e+01       75       0          0 #> 8   0.07 2.739299e-02 0.7685992 1.038842e+01       75       0          0 #> 9   0.08 3.559570e-02 0.8716731 1.022679e+01       75       0          0 #> 10  0.09 4.482111e-02 0.9731434 1.006769e+01       75       0          0 #> 11  0.10 5.505330e-02 1.0730351 9.911053e+00       75       0          0 #> 12  0.11 6.627663e-02 1.1713726 9.756857e+00       75       0          0 #> 13  0.12 7.847566e-02 1.2681802 9.605060e+00       75       0          0 #> 14  0.13 9.163521e-02 1.3634817 9.455624e+00       75       0          0 #> 15  0.14 1.057403e-01 1.4573004 9.308514e+00       75       0          0 #> 16  0.15 1.207764e-01 1.5496596 9.163692e+00       75       0          0 #> 17  0.16 1.367287e-01 1.6405818 9.021124e+00       75       0          0 #> 18  0.17 1.535833e-01 1.7300894 8.880773e+00       75       0          0 #> 19  0.18 1.713259e-01 1.8182045 8.742606e+00       75       0          0 #> 20  0.19 1.899428e-01 1.9049487 8.606589e+00       75       0          0 #> 21  0.20 2.094204e-01 1.9903434 8.472688e+00       75       0          0 #> 22  0.21 2.297452e-01 2.0744094 8.340870e+00       75       0          0 #> 23  0.22 2.509042e-01 2.1571676 8.211103e+00       75       0          0 #> 24  0.23 2.728843e-01 2.2386382 8.083354e+00       75       0          0 #> 25  0.24 2.956727e-01 2.3188413 7.957594e+00       75       0          0 #> 26  0.25 3.192570e-01 2.3977966 7.833790e+00       75       0          0 #> 27  0.26 3.436246e-01 2.4755235 7.711912e+00       75       0          0 #> 28  0.27 3.687634e-01 2.5520412 7.591930e+00       75       0          0 #> 29  0.28 3.946614e-01 2.6273683 7.473815e+00       75       0          0 #> 30  0.29 4.213069e-01 2.7015236 7.357537e+00       75       0          0 #> 31  0.30 4.486881e-01 2.7745251 7.243069e+00       75       0          0 #> 32  0.31 4.767936e-01 2.8463909 7.130381e+00       75       0          0 #> 33  0.32 5.056121e-01 2.9171386 7.019447e+00       75       0          0 #> 34  0.33 5.351327e-01 2.9867856 6.910238e+00       75       0          0 #> 35  0.34 5.653442e-01 3.0553490 6.802729e+00       75       0          0 #> 36  0.35 5.962361e-01 3.1228457 6.696892e+00       75       0          0 #> 37  0.36 6.277977e-01 3.1892923 6.592702e+00       75       0          0 #> 38  0.37 6.600185e-01 3.2547052 6.490133e+00       75       0          0 #> 39  0.38 6.928884e-01 3.3191003 6.389160e+00       75       0          0 #> 40  0.39 7.263972e-01 3.3824936 6.289757e+00       75       0          0 #> 41  0.40 7.605350e-01 3.4449006 6.191901e+00       75       0          0 #> 42  0.41 7.952919e-01 3.5063367 6.095568e+00       75       0          0 #> 43  0.42 8.306585e-01 3.5668170 6.000733e+00       75       0          0 #> 44  0.43 8.666252e-01 3.6263563 5.907374e+00       75       0          0 #> 45  0.44 9.031825e-01 3.6849693 5.815467e+00       75       0          0 #> 46  0.45 9.403215e-01 3.7426704 5.724990e+00       75       0          0 #> 47  0.46 9.780330e-01 3.7994738 5.635921e+00       75       0          0 #> 48  0.47 1.016308e+00 3.8553934 5.548237e+00       75       0          0 #> 49  0.48 1.055138e+00 3.9104431 5.461918e+00       75       0          0 #> 50  0.49 1.094514e+00 3.9646362 5.376941e+00       75       0          0 #> 51  0.50 1.134428e+00 4.0179863 5.293287e+00       75       0          0 #> 52  0.51 1.174871e+00 4.0705063 5.210934e+00       75       0          0 #> 53  0.52 1.215835e+00 4.1222092 5.129862e+00       75       0          0 #> 54  0.53 1.257312e+00 4.1731078 5.050052e+00       75       0          0 #> 55  0.54 1.299295e+00 4.2232144 4.971483e+00       75       0          0 #> 56  0.55 1.341774e+00 4.2725415 4.894137e+00       75       0          0 #> 57  0.56 1.384743e+00 4.3211012 4.817994e+00       75       0          0 #> 58  0.57 1.428194e+00 4.3689053 4.743036e+00       75       0          0 #> 59  0.58 1.472119e+00 4.4159658 4.669244e+00       75       0          0 #> 60  0.59 1.516511e+00 4.4622941 4.596600e+00       75       0          0 #> 61  0.60 1.561362e+00 4.5079015 4.525086e+00       75       0          0 #> 62  0.61 1.606666e+00 4.5527995 4.454685e+00       75       0          0 #> 63  0.62 1.652416e+00 4.5969989 4.385379e+00       75       0          0 #> 64  0.63 1.698604e+00 4.6405107 4.317151e+00       75       0          0 #> 65  0.64 1.745224e+00 4.6833455 4.249985e+00       75       0          0 #> 66  0.65 1.792269e+00 4.7255138 4.183864e+00       75       0          0 #> 67  0.66 1.839732e+00 4.7670262 4.118771e+00       75       0          0 #> 68  0.67 1.887607e+00 4.8078926 4.054692e+00       75       0          0 #> 69  0.68 1.935888e+00 4.8481233 3.991609e+00       75       0          0 #> 70  0.69 1.984567e+00 4.8877281 3.929507e+00       75       0          0 #> 71  0.70 2.033640e+00 4.9267167 3.868372e+00       75       0          0 #> 72  0.71 2.083100e+00 4.9650987 3.808188e+00       75       0          0 #> 73  0.72 2.132940e+00 5.0028836 3.748940e+00       75       0          0 #> 74  0.73 2.183155e+00 5.0400806 3.690614e+00       75       0          0 #> 75  0.74 2.233740e+00 5.0766989 3.633196e+00       75       0          0 #> 76  0.75 2.284687e+00 5.1127475 3.576671e+00       75       0          0 #> 77  0.76 2.335993e+00 5.1482352 3.521025e+00       75       0          0 #> 78  0.77 2.387650e+00 5.1831709 3.466245e+00       75       0          0 #> 79  0.78 2.439654e+00 5.2175630 3.412317e+00       75       0          0 #> 80  0.79 2.492000e+00 5.2514200 3.359228e+00       75       0          0 #> 81  0.80 2.544681e+00 5.2847503 3.306965e+00       75       0          0 #> 82  0.81 2.597693e+00 5.3175620 3.255516e+00       75       0          0 #> 83  0.82 2.651031e+00 5.3498633 3.204866e+00       75       0          0 #> 84  0.83 2.704689e+00 5.3816620 3.155005e+00       75       0          0 #> 85  0.84 2.758662e+00 5.4129659 3.105920e+00       75       0          0 #> 86  0.85 2.812946e+00 5.4437829 3.057598e+00       75       0          0 #> 87  0.86 2.867536e+00 5.4741204 3.010028e+00       75       0          0 #> 88  0.87 2.922427e+00 5.5039859 2.963198e+00       75       0          0 #> 89  0.88 2.977614e+00 5.5333868 2.917096e+00       75       0          0 #> 90  0.89 3.033093e+00 5.5623302 2.871712e+00       75       0          0 #> 91  0.90 3.088860e+00 5.5908234 2.827034e+00       75       0          0 #> 92  0.91 3.144908e+00 5.6188732 2.783051e+00       75       0          0 #> 93  0.92 3.201236e+00 5.6464867 2.739753e+00       75       0          0 #> 94  0.93 3.257837e+00 5.6736705 2.697128e+00       75       0          0 #> 95  0.94 3.314708e+00 5.7004315 2.655166e+00       75       0          0 #> 96  0.95 3.371844e+00 5.7267760 2.613857e+00       75       0          0 #> 97  0.96 3.429242e+00 5.7527107 2.573190e+00       75       0          0 #> 98  0.97 3.486897e+00 5.7782419 2.533157e+00       75       0          0 #> 99  0.98 3.544805e+00 5.8033759 2.493746e+00       75       0          0 #> 100 0.99 3.602963e+00 5.8281189 2.454948e+00       75       0          0 #> 101 1.00 3.661366e+00 5.8524769 2.416754e+00       75       0          0 #> 102 1.01 3.720011e+00 5.8764560 2.379154e+00       75       0          0 #> 103 1.02 3.778894e+00 5.9000620 2.342139e+00       75       0          0 #> 104 1.03 3.838011e+00 5.9233007 2.305701e+00       75       0          0 #> 105 1.04 3.897359e+00 5.9461779 2.269828e+00       75       0          0 #> 106 1.05 3.956934e+00 5.9686991 2.234515e+00       75       0          0 #> 107 1.06 4.016732e+00 5.9908700 2.199750e+00       75       0          0 #> 108 1.07 4.076750e+00 6.0126959 2.165526e+00       75       0          0 #> 109 1.08 4.136985e+00 6.0341823 2.131835e+00       75       0          0 #> 110 1.09 4.197432e+00 6.0553344 2.098668e+00       75       0          0 #> 111 1.10 4.258090e+00 6.0761574 2.066017e+00       75       0          0 #> 112 1.11 4.318955e+00 6.0966564 2.033874e+00       75       0          0 #> 113 1.12 4.380022e+00 6.1168365 2.002231e+00       75       0          0 #> 114 1.13 4.441290e+00 6.1367027 1.971080e+00       75       0          0 #> 115 1.14 4.502755e+00 6.1562597 1.940414e+00       75       0          0 #> 116 1.15 4.564414e+00 6.1755125 1.910225e+00       75       0          0 #> 117 1.16 4.626265e+00 6.1944658 1.880506e+00       75       0          0 #> 118 1.17 4.688303e+00 6.2131242 1.851249e+00       75       0          0 #> 119 1.18 4.750526e+00 6.2314923 1.822447e+00       75       0          0 #> 120 1.19 4.812932e+00 6.2495746 1.794094e+00       75       0          0 #> 121 1.20 4.875517e+00 6.2673756 1.766181e+00       75       0          0 #> 122 1.21 4.938278e+00 6.2848997 1.738703e+00       75       0          0 #> 123 1.22 5.001214e+00 6.3021511 1.711652e+00       75       0          0 #> 124 1.23 5.064320e+00 6.3191342 1.685023e+00       75       0          0 #> 125 1.24 5.127595e+00 6.3358530 1.658807e+00       75       0          0 #> 126 1.25 5.191037e+00 6.3523117 1.632999e+00       75       0          0 #> 127 1.26 5.254641e+00 6.3685143 1.607593e+00       75       0          0 #> 128 1.27 5.318406e+00 6.3844648 1.582582e+00       75       0          0 #> 129 1.28 5.382329e+00 6.4001672 1.557960e+00       75       0          0 #> 130 1.29 5.446409e+00 6.4156253 1.533722e+00       75       0          0 #> 131 1.30 5.510641e+00 6.4308429 1.509860e+00       75       0          0 #> 132 1.31 5.575025e+00 6.4458238 1.486370e+00       75       0          0 #> 133 1.32 5.639557e+00 6.4605715 1.463245e+00       75       0          0 #> 134 1.33 5.704235e+00 6.4750899 1.440480e+00       75       0          0 #> 135 1.34 5.769058e+00 6.4893823 1.418069e+00       75       0          0 #> 136 1.35 5.834022e+00 6.5034524 1.396006e+00       75       0          0 #> 137 1.36 5.899126e+00 6.5173036 1.374287e+00       75       0          0 #> 138 1.37 5.964368e+00 6.5309393 1.352906e+00       75       0          0 #> 139 1.38 6.029744e+00 6.5443628 1.331858e+00       75       0          0 #> 140 1.39 6.095254e+00 6.5575775 1.311137e+00       75       0          0 #> 141 1.40 6.160895e+00 6.5705866 1.290738e+00       75       0          0 #> 142 1.41 6.226665e+00 6.5833933 1.270657e+00       75       0          0 #> 143 1.42 6.292562e+00 6.5960008 1.250888e+00       75       0          0 #> 144 1.43 6.358584e+00 6.6084121 1.231427e+00       75       0          0 #> 145 1.44 6.424730e+00 6.6206303 1.212268e+00       75       0          0 #> 146 1.45 6.490996e+00 6.6326585 1.193408e+00       75       0          0 #> 147 1.46 6.557382e+00 6.6444995 1.174841e+00       75       0          0 #> 148 1.47 6.623886e+00 6.6561562 1.156562e+00       75       0          0 #> 149 1.48 6.690505e+00 6.6676317 1.138569e+00       75       0          0 #> 150 1.49 6.757238e+00 6.6789286 1.120855e+00       75       0          0 #> 151 1.50 6.824083e+00 6.6900497 1.103417e+00       75       0          0 #> 152 1.51 6.891038e+00 6.7009978 1.086250e+00       75       0          0 #> 153 1.52 6.958102e+00 6.7117756 1.069350e+00       75       0          0 #> 154 1.53 7.025273e+00 6.7223857 1.052713e+00       75       0          0 #> 155 1.54 7.092549e+00 6.7328307 1.036335e+00       75       0          0 #> 156 1.55 7.159929e+00 6.7431132 1.020212e+00       75       0          0 #> 157 1.56 7.227411e+00 6.7532358 1.004339e+00       75       0          0 #> 158 1.57 7.294994e+00 6.7632008 9.887136e-01       75       0          0 #> 159 1.58 7.362675e+00 6.7730108 9.733312e-01       75       0          0 #> 160 1.59 7.430453e+00 6.7826682 9.581881e-01       75       0          0 #> 161 1.60 7.498328e+00 6.7921754 9.432807e-01       75       0          0 #> 162 1.61 7.566296e+00 6.8015346 9.286051e-01       75       0          0 #> 163 1.62 7.634358e+00 6.8107482 9.141579e-01       75       0          0 #> 164 1.63 7.702511e+00 6.8198185 8.999354e-01       75       0          0 #> 165 1.64 7.770754e+00 6.8287477 8.859342e-01       75       0          0 #> 166 1.65 7.839085e+00 6.8375379 8.721509e-01       75       0          0 #> 167 1.66 7.907504e+00 6.8461914 8.585820e-01       75       0          0 #> 168 1.67 7.976009e+00 6.8547103 8.452242e-01       75       0          0 #> 169 1.68 8.044598e+00 6.8630966 8.320742e-01       75       0          0 #> 170 1.69 8.113270e+00 6.8713524 8.191288e-01       75       0          0 #> 171 1.70 8.182024e+00 6.8794798 8.063848e-01       75       0          0 #> 172 1.71 8.250859e+00 6.8874808 7.938391e-01       75       0          0 #> 173 1.72 8.319774e+00 6.8953573 7.814885e-01       75       0          0 #> 174 1.73 8.388766e+00 6.9031112 7.693302e-01       75       0          0 #> 175 1.74 8.457835e+00 6.9107445 7.573609e-01       75       0          0 #> 176 1.75 8.526980e+00 6.9182591 7.455779e-01       75       0          0 #> 177 1.76 8.596200e+00 6.9256567 7.339782e-01       75       0          0 #> 178 1.77 8.665493e+00 6.9329392 7.225590e-01       75       0          0 #> 179 1.78 8.734859e+00 6.9401085 7.113175e-01       75       0          0 #> 180 1.79 8.804295e+00 6.9471662 7.002508e-01       75       0          0 #> 181 1.80 8.873802e+00 6.9541140 6.893563e-01       75       0          0 #> 182 1.81 8.943377e+00 6.9609538 6.786313e-01       75       0          0 #> 183 1.82 9.013020e+00 6.9676872 6.680732e-01       75       0          0 #> 184 1.83 9.082730e+00 6.9743159 6.576793e-01       75       0          0 #> 185 1.84 9.152506e+00 6.9808414 6.474471e-01       75       0          0 #> 186 1.85 9.222347e+00 6.9872653 6.373742e-01       75       0          0 #> 187 1.86 9.292251e+00 6.9935894 6.274579e-01       75       0          0 #> 188 1.87 9.362218e+00 6.9998150 6.176959e-01       75       0          0 #> 189 1.88 9.432247e+00 7.0059438 6.080858e-01       75       0          0 #> 190 1.89 9.502337e+00 7.0119772 5.986252e-01       75       0          0 #> 191 1.90 9.572486e+00 7.0179168 5.893118e-01       75       0          0 #> 192 1.91 9.642695e+00 7.0237639 5.801433e-01       75       0          0 #> 193 1.92 9.712961e+00 7.0295201 5.711175e-01       75       0          0 #> 194 1.93 9.783285e+00 7.0351868 5.622320e-01       75       0          0 #> 195 1.94 9.853665e+00 7.0407652 5.534848e-01       75       0          0 #> 196 1.95 9.924100e+00 7.0462569 5.448737e-01       75       0          0 #> 197 1.96 9.994590e+00 7.0516631 5.363966e-01       75       0          0 #> 198 1.97 1.006513e+01 7.0569853 5.280513e-01       75       0          0 #> 199 1.98 1.013573e+01 7.0622246 5.198359e-01       75       0          0 #> 200 1.99 1.020638e+01 7.0673824 5.117483e-01       75       0          0 #> 201 2.00 1.027708e+01 7.0724600 5.037865e-01       75       0          0 #> 202 2.01 1.034783e+01 7.0774586 4.959486e-01       75       0          0 #> 203 2.02 1.041863e+01 7.0823794 4.882327e-01       75       0          0 #> 204 2.03 1.048947e+01 7.0872236 4.806368e-01       75       0          0 #> 205 2.04 1.056037e+01 7.0919925 4.731590e-01       75       0          0 #> 206 2.05 1.063131e+01 7.0966872 4.657976e-01       75       0          0 #> 207 2.06 1.070230e+01 7.1013088 4.585508e-01       75       0          0 #> 208 2.07 1.077334e+01 7.1058586 4.514166e-01       75       0          0 #> 209 2.08 1.084442e+01 7.1103375 4.443935e-01       75       0          0 #> 210 2.09 1.091555e+01 7.1147468 4.374796e-01       75       0          0 #> 211 2.10 1.098671e+01 7.1190875 4.306733e-01       75       0          0 #> 212 2.11 1.105793e+01 7.1233606 4.239729e-01       75       0          0 #> 213 2.12 1.112918e+01 7.1275673 4.173768e-01       75       0          0 #> 214 2.13 1.120048e+01 7.1317085 4.108832e-01       75       0          0 #> 215 2.14 1.127182e+01 7.1357853 4.044907e-01       75       0          0 #> 216 2.15 1.134319e+01 7.1397986 3.981976e-01       75       0          0 #> 217 2.16 1.141461e+01 7.1437496 3.920025e-01       75       0          0 #> 218 2.17 1.148607e+01 7.1476390 3.859037e-01       75       0          0 #> 219 2.18 1.155756e+01 7.1514680 3.798998e-01       75       0          0 #> 220 2.19 1.162910e+01 7.1552373 3.739894e-01       75       0          0 #> 221 2.20 1.170067e+01 7.1589481 3.681708e-01       75       0          0 #> 222 2.21 1.177228e+01 7.1626010 3.624428e-01       75       0          0 #> 223 2.22 1.184392e+01 7.1661972 3.568040e-01       75       0          0 #> 224 2.23 1.191560e+01 7.1697374 3.512528e-01       75       0          0 #> 225 2.24 1.198731e+01 7.1732226 3.457880e-01       75       0          0 #> 226 2.25 1.205906e+01 7.1766535 3.404083e-01       75       0          0 #> 227 2.26 1.213085e+01 7.1800310 3.351122e-01       75       0          0 #> 228 2.27 1.220266e+01 7.1833560 3.298985e-01       75       0          0 #> 229 2.28 1.227451e+01 7.1866292 3.247660e-01       75       0          0 #> 230 2.29 1.234640e+01 7.1898516 3.197133e-01       75       0          0 #> 231 2.30 1.241831e+01 7.1930238 3.147392e-01       75       0          0 #> 232 2.31 1.249026e+01 7.1961466 3.098425e-01       75       0          0 #> 233 2.32 1.256223e+01 7.1992209 3.050219e-01       75       0          0 #> 234 2.33 1.263424e+01 7.2022473 3.002764e-01       75       0          0 #> 235 2.34 1.270628e+01 7.2052266 2.956047e-01       75       0          0 #> 236 2.35 1.277835e+01 7.2081596 2.910057e-01       75       0          0 #> 237 2.36 1.285044e+01 7.2110470 2.864782e-01       75       0          0 #> 238 2.37 1.292257e+01 7.2138894 2.820212e-01       75       0          0 #> 239 2.38 1.299472e+01 7.2166876 2.776335e-01       75       0          0 #> 240 2.39 1.306690e+01 7.2194423 2.733141e-01       75       0          0 #> 241 2.40 1.313911e+01 7.2221542 2.690619e-01       75       0          0 #> 242 2.41 1.321134e+01 7.2248238 2.648758e-01       75       0          0 #> 243 2.42 1.328360e+01 7.2274519 2.607549e-01       75       0          0 #> 244 2.43 1.335589e+01 7.2300391 2.566981e-01       75       0          0 #> 245 2.44 1.342821e+01 7.2325861 2.527044e-01       75       0          0 #> 246 2.45 1.350054e+01 7.2350934 2.487728e-01       75       0          0 #> 247 2.46 1.357291e+01 7.2375617 2.449024e-01       75       0          0 #> 248 2.47 1.364530e+01 7.2399916 2.410922e-01       75       0          0 #> 249 2.48 1.371771e+01 7.2423838 2.373413e-01       75       0          0 #> 250 2.49 1.379014e+01 7.2447387 2.336488e-01       75       0          0 #> 251 2.50 1.386260e+01 7.2470569 2.300137e-01       75       0          0 #> 252 2.51 1.393508e+01 7.2493391 2.264351e-01       75       0          0 #> 253 2.52 1.400759e+01 7.2515858 2.229122e-01       75       0          0 #> 254 2.53 1.408012e+01 7.2537976 2.194442e-01       75       0          0 #> 255 2.54 1.415266e+01 7.2559749 2.160301e-01       75       0          0 #> 256 2.55 1.422523e+01 7.2581183 2.126691e-01       75       0          0 #> 257 2.56 1.429783e+01 7.2602284 2.093604e-01       75       0          0 #> 258 2.57 1.437044e+01 7.2623057 2.061031e-01       75       0          0 #> 259 2.58 1.444307e+01 7.2643507 2.028966e-01       75       0          0 #> 260 2.59 1.451573e+01 7.2663638 1.997399e-01       75       0          0 #> 261 2.60 1.458840e+01 7.2683456 1.966324e-01       75       0          0 #> 262 2.61 1.466109e+01 7.2702966 1.935732e-01       75       0          0 #> 263 2.62 1.473381e+01 7.2722173 1.905616e-01       75       0          0 #> 264 2.63 1.480654e+01 7.2741080 1.875968e-01       75       0          0 #> 265 2.64 1.487929e+01 7.2759693 1.846782e-01       75       0          0 #> 266 2.65 1.495206e+01 7.2778017 1.818050e-01       75       0          0 #> 267 2.66 1.502484e+01 7.2796056 1.789764e-01       75       0          0 #> 268 2.67 1.509765e+01 7.2813814 1.761919e-01       75       0          0 #> 269 2.68 1.517047e+01 7.2831296 1.734507e-01       75       0          0 #> 270 2.69 1.524331e+01 7.2848506 1.707522e-01       75       0          0 #> 271 2.70 1.531617e+01 7.2865448 1.680956e-01       75       0          0 #> 272 2.71 1.538904e+01 7.2882126 1.654804e-01       75       0          0 #> 273 2.72 1.546193e+01 7.2898545 1.629059e-01       75       0          0 #> 274 2.73 1.553484e+01 7.2914709 1.603714e-01       75       0          0 #> 275 2.74 1.560776e+01 7.2930621 1.578763e-01       75       0          0 #> 276 2.75 1.568070e+01 7.2946285 1.554201e-01       75       0          0 #> 277 2.76 1.575365e+01 7.2961706 1.530021e-01       75       0          0 #> 278 2.77 1.582662e+01 7.2976887 1.506217e-01       75       0          0 #> 279 2.78 1.589961e+01 7.2991831 1.482783e-01       75       0          0 #> 280 2.79 1.597261e+01 7.3006544 1.459714e-01       75       0          0 #> 281 2.80 1.604562e+01 7.3021027 1.437004e-01       75       0          0 #> 282 2.81 1.611865e+01 7.3035285 1.414647e-01       75       0          0 #> 283 2.82 1.619169e+01 7.3049321 1.392638e-01       75       0          0 #> 284 2.83 1.626475e+01 7.3063139 1.370971e-01       75       0          0 #> 285 2.84 1.633782e+01 7.3076742 1.349641e-01       75       0          0 #> 286 2.85 1.641090e+01 7.3090133 1.328644e-01       75       0          0 #> 287 2.86 1.648400e+01 7.3103316 1.307973e-01       75       0          0 #> 288 2.87 1.655711e+01 7.3116293 1.287623e-01       75       0          0 #> 289 2.88 1.663023e+01 7.3129069 1.267590e-01       75       0          0 #> 290 2.89 1.670337e+01 7.3141646 1.247869e-01       75       0          0 #> 291 2.90 1.677651e+01 7.3154027 1.228455e-01       75       0          0 #> 292 2.91 1.684967e+01 7.3166216 1.209343e-01       75       0          0 #> 293 2.92 1.692285e+01 7.3178215 1.190528e-01       75       0          0 #> 294 2.93 1.699603e+01 7.3190028 1.172006e-01       75       0          0 #> 295 2.94 1.706923e+01 7.3201656 1.153772e-01       75       0          0 #> 296 2.95 1.714243e+01 7.3213104 1.135821e-01       75       0          0 #> 297 2.96 1.721565e+01 7.3224374 1.118150e-01       75       0          0 #> 298 2.97 1.728888e+01 7.3235468 1.100754e-01       75       0          0 #> 299 2.98 1.736212e+01 7.3246390 1.083628e-01       75       0          0 #> 300 2.99 1.743537e+01 7.3257141 1.066769e-01       75       0          0 #> 301 3.00 1.750864e+01 7.3267726 1.050173e-01       75       0          0 #> 302 3.01 1.758191e+01 7.3278146 1.033834e-01       75       0          0 #> 303 3.02 1.765519e+01 7.3288403 1.017750e-01       75       0          0 #> 304 3.03 1.772849e+01 7.3298502 1.001915e-01       75       0          0 #> 305 3.04 1.780179e+01 7.3308443 9.863277e-02       75       0          0 #> 306 3.05 1.787510e+01 7.3318229 9.709824e-02       75       0          0 #> 307 3.06 1.794843e+01 7.3327863 9.558759e-02       75       0          0 #> 308 3.07 1.802176e+01 7.3337347 9.410044e-02       75       0          0 #> 309 3.08 1.809510e+01 7.3346684 9.263642e-02       75       0          0 #> 310 3.09 1.816845e+01 7.3355875 9.119519e-02       75       0          0 #> 311 3.10 1.824181e+01 7.3364924 8.977638e-02       75       0          0 #> 312 3.11 1.831518e+01 7.3373831 8.837964e-02       75       0          0 #> 313 3.12 1.838856e+01 7.3382600 8.700463e-02       75       0          0 #> 314 3.13 1.846195e+01 7.3391233 8.565101e-02       75       0          0 #> 315 3.14 1.853534e+01 7.3399731 8.431845e-02       75       0          0 #> 316 3.15 1.860875e+01 7.3408097 8.300663e-02       75       0          0 #> 317 3.16 1.868216e+01 7.3416333 8.171521e-02       75       0          0 #> 318 3.17 1.875558e+01 7.3424441 8.044389e-02       75       0          0 #> 319 3.18 1.882901e+01 7.3432423 7.919234e-02       75       0          0 #> 320 3.19 1.890244e+01 7.3440280 7.796027e-02       75       0          0 #> 321 3.20 1.897589e+01 7.3448015 7.674737e-02       75       0          0 #> 322 3.21 1.904934e+01 7.3455630 7.555333e-02       75       0          0 #> 323 3.22 1.912280e+01 7.3463127 7.437787e-02       75       0          0 #> 324 3.23 1.919627e+01 7.3470506 7.322070e-02       75       0          0 #> 325 3.24 1.926974e+01 7.3477771 7.208154e-02       75       0          0 #> 326 3.25 1.934322e+01 7.3484923 7.096009e-02       75       0          0 #> 327 3.26 1.941671e+01 7.3491964 6.985610e-02       75       0          0 #> 328 3.27 1.949021e+01 7.3498895 6.876928e-02       75       0          0 #> 329 3.28 1.956371e+01 7.3505718 6.769937e-02       75       0          0 #> 330 3.29 1.963722e+01 7.3512436 6.664610e-02       75       0          0 #> 331 3.30 1.971073e+01 7.3519048 6.560922e-02       75       0          0 #> 332 3.31 1.978426e+01 7.3525558 6.458847e-02       75       0          0 #> 333 3.32 1.985778e+01 7.3531966 6.358361e-02       75       0          0 #> 334 3.33 1.993132e+01 7.3538275 6.259437e-02       75       0          0 #> 335 3.34 2.000486e+01 7.3544486 6.162053e-02       75       0          0 #> 336 3.35 2.007841e+01 7.3550600 6.066184e-02       75       0          0 #> 337 3.36 2.015196e+01 7.3556619 5.971807e-02       75       0          0 #> 338 3.37 2.022552e+01 7.3562544 5.878897e-02       75       0          0 #> 339 3.38 2.029909e+01 7.3568377 5.787433e-02       75       0          0 #> 340 3.39 2.037266e+01 7.3574119 5.697393e-02       75       0          0 #> 341 3.40 2.044624e+01 7.3579772 5.608753e-02       75       0          0 #> 342 3.41 2.051982e+01 7.3585337 5.521492e-02       75       0          0 #> 343 3.42 2.059341e+01 7.3590816 5.435589e-02       75       0          0 #> 344 3.43 2.066700e+01 7.3596209 5.351022e-02       75       0          0 #> 345 3.44 2.074060e+01 7.3601518 5.267771e-02       75       0          0 #> 346 3.45 2.081420e+01 7.3606745 5.185815e-02       75       0          0 #> 347 3.46 2.088781e+01 7.3611890 5.105134e-02       75       0          0 #> 348 3.47 2.096143e+01 7.3616956 5.025708e-02       75       0          0 #> 349 3.48 2.103505e+01 7.3621942 4.947518e-02       75       0          0 #> 350 3.49 2.110867e+01 7.3626851 4.870545e-02       75       0          0 #> 351 3.50 2.118230e+01 7.3631684 4.794769e-02       75       0          0 #> 352 3.51 2.125593e+01 7.3636441 4.720172e-02       75       0          0 #> 353 3.52 2.132957e+01 7.3641124 4.646736e-02       75       0          0 #> 354 3.53 2.140322e+01 7.3645735 4.574442e-02       75       0          0 #> 355 3.54 2.147686e+01 7.3650273 4.503273e-02       75       0          0 #> 356 3.55 2.155052e+01 7.3654742 4.433211e-02       75       0          0 #> 357 3.56 2.162417e+01 7.3659140 4.364239e-02       75       0          0 #> 358 3.57 2.169783e+01 7.3663470 4.296340e-02       75       0          0 #> 359 3.58 2.177150e+01 7.3667733 4.229498e-02       75       0          0 #> 360 3.59 2.184517e+01 7.3671930 4.163696e-02       75       0          0 #> 361 3.60 2.191884e+01 7.3676061 4.098917e-02       75       0          0 #> 362 3.61 2.199252e+01 7.3680128 4.035146e-02       75       0          0 #> 363 3.62 2.206620e+01 7.3684132 3.972367e-02       75       0          0 #> 364 3.63 2.213989e+01 7.3688073 3.910565e-02       75       0          0 #> 365 3.64 2.221358e+01 7.3691953 3.849725e-02       75       0          0 #> 366 3.65 2.228727e+01 7.3695773 3.789831e-02       75       0          0 #> 367 3.66 2.236097e+01 7.3699533 3.730869e-02       75       0          0 #> 368 3.67 2.243467e+01 7.3703235 3.672824e-02       75       0          0 #> 369 3.68 2.250838e+01 7.3706879 3.615682e-02       75       0          0 #> 370 3.69 2.258209e+01 7.3710467 3.559429e-02       75       0          0 #> 371 3.70 2.265580e+01 7.3713998 3.504052e-02       75       0          0 #> 372 3.71 2.272951e+01 7.3717475 3.449536e-02       75       0          0 #> 373 3.72 2.280323e+01 7.3720898 3.395868e-02       75       0          0 #> 374 3.73 2.287696e+01 7.3724267 3.343035e-02       75       0          0 #> 375 3.74 2.295068e+01 7.3727584 3.291024e-02       75       0          0 #> 376 3.75 2.302441e+01 7.3730849 3.239823e-02       75       0          0 #> 377 3.76 2.309814e+01 7.3734064 3.189417e-02       75       0          0 #> 378 3.77 2.317188e+01 7.3737228 3.139797e-02       75       0          0 #> 379 3.78 2.324562e+01 7.3740344 3.090948e-02       75       0          0 #> 380 3.79 2.331936e+01 7.3743410 3.042859e-02       75       0          0 #> 381 3.80 2.339311e+01 7.3746430 2.995518e-02       75       0          0 #> 382 3.81 2.346685e+01 7.3749402 2.948914e-02       75       0          0 #> 383 3.82 2.354060e+01 7.3752328 2.903035e-02       75       0          0 #> 384 3.83 2.361436e+01 7.3755208 2.857869e-02       75       0          0 #> 385 3.84 2.368811e+01 7.3758044 2.813407e-02       75       0          0 #> 386 3.85 2.376187e+01 7.3760835 2.769636e-02       75       0          0 #> 387 3.86 2.383564e+01 7.3763583 2.726546e-02       75       0          0 #> 388 3.87 2.390940e+01 7.3766288 2.684126e-02       75       0          0 #> 389 3.88 2.398317e+01 7.3768952 2.642367e-02       75       0          0 #> 390 3.89 2.405694e+01 7.3771573 2.601257e-02       75       0          0 #> 391 3.90 2.413071e+01 7.3774154 2.560786e-02       75       0          0 #> 392 3.91 2.420449e+01 7.3776695 2.520946e-02       75       0          0 #> 393 3.92 2.427827e+01 7.3779196 2.481725e-02       75       0          0 #> 394 3.93 2.435205e+01 7.3781659 2.443114e-02       75       0          0 #> 395 3.94 2.442583e+01 7.3784083 2.405104e-02       75       0          0 #> 396 3.95 2.449961e+01 7.3786469 2.367686e-02       75       0          0 #> 397 3.96 2.457340e+01 7.3788818 2.330849e-02       75       0          0 #> 398 3.97 2.464719e+01 7.3791131 2.294586e-02       75       0          0 #> 399 3.98 2.472098e+01 7.3793408 2.258887e-02       75       0          0 #> 400 3.99 2.479478e+01 7.3795649 2.223743e-02       75       0          0 #> 401 4.00 2.486857e+01 7.3797855 2.189146e-02       75       0          0 #> 402 4.01 2.494237e+01 7.3800028 2.155087e-02       75       0          0 #> 403 4.02 2.501617e+01 7.3802166 2.121559e-02       75       0          0 #> 404 4.03 2.508998e+01 7.3804271 2.088551e-02       75       0          0 #> 405 4.04 2.516378e+01 7.3806343 2.056058e-02       75       0          0 #> 406 4.05 2.523759e+01 7.3808383 2.024070e-02       75       0          0 #> 407 4.06 2.531140e+01 7.3810391 1.992579e-02       75       0          0 #> 408 4.07 2.538521e+01 7.3812368 1.961579e-02       75       0          0 #> 409 4.08 2.545902e+01 7.3814315 1.931060e-02       75       0          0 #> 410 4.09 2.553284e+01 7.3816231 1.901017e-02       75       0          0 #> 411 4.10 2.560666e+01 7.3818117 1.871441e-02       75       0          0 #> 412 4.11 2.568048e+01 7.3819974 1.842325e-02       75       0          0 #> 413 4.12 2.575430e+01 7.3821802 1.813662e-02       75       0          0 #> 414 4.13 2.582812e+01 7.3823601 1.785445e-02       75       0          0 #> 415 4.14 2.590194e+01 7.3825373 1.757667e-02       75       0          0 #> 416 4.15 2.597577e+01 7.3827117 1.730322e-02       75       0          0 #> 417 4.16 2.604960e+01 7.3828834 1.703401e-02       75       0          0 #> 418 4.17 2.612343e+01 7.3830524 1.676900e-02       75       0          0 #> 419 4.18 2.619726e+01 7.3832187 1.650811e-02       75       0          0 #> 420 4.19 2.627109e+01 7.3833825 1.625127e-02       75       0          0 #> 421 4.20 2.634493e+01 7.3835438 1.599844e-02       75       0          0 #> 422 4.21 2.641876e+01 7.3837025 1.574953e-02       75       0          0 #> 423 4.22 2.649260e+01 7.3838588 1.550450e-02       75       0          0 #> 424 4.23 2.656644e+01 7.3840126 1.526328e-02       75       0          0 #> 425 4.24 2.664028e+01 7.3841641 1.502582e-02       75       0          0 #> 426 4.25 2.671412e+01 7.3843132 1.479205e-02       75       0          0 #> 427 4.26 2.678797e+01 7.3844599 1.456191e-02       75       0          0 #> 428 4.27 2.686181e+01 7.3846044 1.433536e-02       75       0          0 #> 429 4.28 2.693566e+01 7.3847466 1.411233e-02       75       0          0 #> 430 4.29 2.700951e+01 7.3848867 1.389277e-02       75       0          0 #> 431 4.30 2.708336e+01 7.3850245 1.367663e-02       75       0          0 #> 432 4.31 2.715721e+01 7.3851602 1.346385e-02       75       0          0 #> 433 4.32 2.723106e+01 7.3852938 1.325438e-02       75       0          0 #> 434 4.33 2.730491e+01 7.3854253 1.304816e-02       75       0          0 #> 435 4.34 2.737877e+01 7.3855548 1.284516e-02       75       0          0 #> 436 4.35 2.745263e+01 7.3856822 1.264532e-02       75       0          0 #> 437 4.36 2.752648e+01 7.3858077 1.244858e-02       75       0          0 #> 438 4.37 2.760034e+01 7.3859312 1.225491e-02       75       0          0 #> 439 4.38 2.767420e+01 7.3860528 1.206424e-02       75       0          0 #> 440 4.39 2.774806e+01 7.3861725 1.187655e-02       75       0          0 #> 441 4.40 2.782193e+01 7.3862903 1.169177e-02       75       0          0 #> 442 4.41 2.789579e+01 7.3864063 1.150987e-02       75       0          0 #> 443 4.42 2.796965e+01 7.3865205 1.133080e-02       75       0          0 #> 444 4.43 2.804352e+01 7.3866330 1.115452e-02       75       0          0 #> 445 4.44 2.811739e+01 7.3867436 1.098098e-02       75       0          0 #> 446 4.45 2.819125e+01 7.3868526 1.081013e-02       75       0          0 #> 447 4.46 2.826512e+01 7.3869599 1.064195e-02       75       0          0 #> 448 4.47 2.833899e+01 7.3870654 1.047638e-02       75       0          0 #> 449 4.48 2.841286e+01 7.3871694 1.031339e-02       75       0          0 #> 450 4.49 2.848674e+01 7.3872717 1.015294e-02       75       0          0 #> 451 4.50 2.856061e+01 7.3873725 9.994977e-03       75       0          0 #> 452 4.51 2.863448e+01 7.3874716 9.839475e-03       75       0          0 #> 453 4.52 2.870836e+01 7.3875693 9.686393e-03       75       0          0 #> 454 4.53 2.878224e+01 7.3876654 9.535692e-03       75       0          0 #> 455 4.54 2.885611e+01 7.3877600 9.387336e-03       75       0          0 #> 456 4.55 2.892999e+01 7.3878531 9.241288e-03       75       0          0 #> 457 4.56 2.900387e+01 7.3879448 9.097512e-03       75       0          0 #> 458 4.57 2.907775e+01 7.3880351 8.955973e-03       75       0          0 #> 459 4.58 2.915163e+01 7.3881239 8.816636e-03       75       0          0 #> 460 4.59 2.922551e+01 7.3882114 8.679467e-03       75       0          0 #> 461 4.60 2.929939e+01 7.3882975 8.544432e-03       75       0          0 #> 462 4.61 2.937328e+01 7.3883823 8.411498e-03       75       0          0 #> 463 4.62 2.944716e+01 7.3884658 8.280632e-03       75       0          0 #> 464 4.63 2.952105e+01 7.3885479 8.151802e-03       75       0          0 #> 465 4.64 2.959493e+01 7.3886288 8.024976e-03       75       0          0 #> 466 4.65 2.966882e+01 7.3887084 7.900124e-03       75       0          0 #> 467 4.66 2.974271e+01 7.3887868 7.777214e-03       75       0          0 #> 468 4.67 2.981660e+01 7.3888640 7.656216e-03       75       0          0 #> 469 4.68 2.989048e+01 7.3889400 7.537101e-03       75       0          0 #> 470 4.69 2.996437e+01 7.3890147 7.419839e-03       75       0          0 #> 471 4.70 3.003826e+01 7.3890884 7.304401e-03       75       0          0 #> 472 4.71 3.011216e+01 7.3891608 7.190759e-03       75       0          0 #> 473 4.72 3.018605e+01 7.3892322 7.078886e-03       75       0          0 #> 474 4.73 3.025994e+01 7.3893024 6.968752e-03       75       0          0 #> 475 4.74 3.033383e+01 7.3893716 6.860333e-03       75       0          0 #> 476 4.75 3.040773e+01 7.3894396 6.753600e-03       75       0          0 #> 477 4.76 3.048162e+01 7.3895066 6.648527e-03       75       0          0 #> 478 4.77 3.055552e+01 7.3895726 6.545090e-03       75       0          0 #> 479 4.78 3.062941e+01 7.3896375 6.443261e-03       75       0          0 #> 480 4.79 3.070331e+01 7.3897015 6.343017e-03       75       0          0 #> 481 4.80 3.077721e+01 7.3897644 6.244333e-03       75       0          0 #> 482 4.81 3.085111e+01 7.3898264 6.147183e-03       75       0          0 #> 483 4.82 3.092500e+01 7.3898874 6.051546e-03       75       0          0 #> 484 4.83 3.099890e+01 7.3899474 5.957396e-03       75       0          0 #> 485 4.84 3.107280e+01 7.3900065 5.864711e-03       75       0          0 #> 486 4.85 3.114670e+01 7.3900647 5.773468e-03       75       0          0 #> 487 4.86 3.122061e+01 7.3901220 5.683644e-03       75       0          0 #> 488 4.87 3.129451e+01 7.3901784 5.595218e-03       75       0          0 #> 489 4.88 3.136841e+01 7.3902339 5.508168e-03       75       0          0 #> 490 4.89 3.144231e+01 7.3902885 5.422472e-03       75       0          0 #> 491 4.90 3.151621e+01 7.3903423 5.338109e-03       75       0          0 #> 492 4.91 3.159012e+01 7.3903953 5.255059e-03       75       0          0 #> 493 4.92 3.166402e+01 7.3904474 5.173301e-03       75       0          0 #> 494 4.93 3.173793e+01 7.3904988 5.092814e-03       75       0          0 #> 495 4.94 3.181183e+01 7.3905493 5.013581e-03       75       0          0 #> 496 4.95 3.188574e+01 7.3905991 4.935579e-03       75       0          0 #> 497 4.96 3.195964e+01 7.3906480 4.858792e-03       75       0          0 #> 498 4.97 3.203355e+01 7.3906962 4.783199e-03       75       0          0 #> 499 4.98 3.210746e+01 7.3907437 4.708782e-03       75       0          0 #> 500 4.99 3.218137e+01 7.3907904 4.635523e-03       75       0          0 #> 501 5.00 3.225527e+01 7.3908364 4.563403e-03       75       0          0 #> 502 5.01 3.232918e+01 7.3908817 4.492406e-03       75       0          0 #> 503 5.02 3.240309e+01 7.3909263 4.422513e-03       75       0          0 #> 504 5.03 3.247700e+01 7.3909701 4.353708e-03       75       0          0 #> 505 5.04 3.255091e+01 7.3910133 4.285973e-03       75       0          0 #> 506 5.05 3.262482e+01 7.3910559 4.219292e-03       75       0          0 #> 507 5.06 3.269873e+01 7.3910977 4.153648e-03       75       0          0 #> 508 5.07 3.277264e+01 7.3911389 4.089026e-03       75       0          0 #> 509 5.08 3.284655e+01 7.3911795 4.025409e-03       75       0          0 #> 510 5.09 3.292047e+01 7.3912195 3.962781e-03       75       0          0 #> 511 5.10 3.299438e+01 7.3912588 3.901128e-03       75       0          0 #> 512 5.11 3.306829e+01 7.3912975 3.840435e-03       75       0          0 #> 513 5.12 3.314221e+01 7.3913356 3.780685e-03       75       0          0 #> 514 5.13 3.321612e+01 7.3913731 3.721865e-03       75       0          0 #> 515 5.14 3.329003e+01 7.3914100 3.663961e-03       75       0          0 #> 516 5.15 3.336395e+01 7.3914464 3.606957e-03       75       0          0 #> 517 5.16 3.343786e+01 7.3914822 3.550840e-03       75       0          0 #> 518 5.17 3.351178e+01 7.3915174 3.495596e-03       75       0          0 #> 519 5.18 3.358569e+01 7.3915521 3.441212e-03       75       0          0 #> 520 5.19 3.365961e+01 7.3915862 3.387673e-03       75       0          0 #> 521 5.20 3.373352e+01 7.3916198 3.334968e-03       75       0          0 #> 522 5.21 3.380744e+01 7.3916529 3.283083e-03       75       0          0 #> 523 5.22 3.388136e+01 7.3916855 3.232004e-03       75       0          0 #> 524 5.23 3.395527e+01 7.3917176 3.181721e-03       75       0          0 #> 525 5.24 3.402919e+01 7.3917491 3.132220e-03       75       0          0 #> 526 5.25 3.410311e+01 7.3917802 3.083489e-03       75       0          0 #> 527 5.26 3.417703e+01 7.3918108 3.035516e-03       75       0          0 #> 528 5.27 3.425094e+01 7.3918409 2.988289e-03       75       0          0 #> 529 5.28 3.432486e+01 7.3918706 2.941798e-03       75       0          0 #> 530 5.29 3.439878e+01 7.3918998 2.896029e-03       75       0          0 #> 531 5.30 3.447270e+01 7.3919285 2.850973e-03       75       0          0 #> 532 5.31 3.454662e+01 7.3919568 2.806617e-03       75       0          0 #> 533 5.32 3.462054e+01 7.3919846 2.762952e-03       75       0          0 #> 534 5.33 3.469446e+01 7.3920120 2.719966e-03       75       0          0 #> 535 5.34 3.476838e+01 7.3920390 2.677649e-03       75       0          0 #> 536 5.35 3.484230e+01 7.3920656 2.635990e-03       75       0          0 #> 537 5.36 3.491622e+01 7.3920918 2.594979e-03       75       0          0 #> 538 5.37 3.499014e+01 7.3921175 2.554607e-03       75       0          0 #> 539 5.38 3.506406e+01 7.3921429 2.514862e-03       75       0          0 #> 540 5.39 3.513799e+01 7.3921678 2.475736e-03       75       0          0 #> 541 5.40 3.521191e+01 7.3921924 2.437219e-03       75       0          0 #> 542 5.41 3.528583e+01 7.3922166 2.399300e-03       75       0          0 #> 543 5.42 3.535975e+01 7.3922404 2.361972e-03       75       0          0 #> 544 5.43 3.543367e+01 7.3922638 2.325225e-03       75       0          0 #> 545 5.44 3.550760e+01 7.3922869 2.289049e-03       75       0          0 #> 546 5.45 3.558152e+01 7.3923096 2.253436e-03       75       0          0 #> 547 5.46 3.565544e+01 7.3923319 2.218377e-03       75       0          0 #> 548 5.47 3.572937e+01 7.3923539 2.183863e-03       75       0          0 #> 549 5.48 3.580329e+01 7.3923756 2.149887e-03       75       0          0 #> 550 5.49 3.587721e+01 7.3923969 2.116439e-03       75       0          0 #> 551 5.50 3.595114e+01 7.3924179 2.083511e-03       75       0          0 #> 552 5.51 3.602506e+01 7.3924386 2.051096e-03       75       0          0 #> 553 5.52 3.609899e+01 7.3924590 2.019185e-03       75       0          0 #> 554 5.53 3.617291e+01 7.3924790 1.987771e-03       75       0          0 #> 555 5.54 3.624684e+01 7.3924987 1.956845e-03       75       0          0 #> 556 5.55 3.632076e+01 7.3925181 1.926401e-03       75       0          0 #> 557 5.56 3.639469e+01 7.3925373 1.896430e-03       75       0          0 #> 558 5.57 3.646861e+01 7.3925561 1.866925e-03       75       0          0 #> 559 5.58 3.654254e+01 7.3925746 1.837879e-03       75       0          0 #> 560 5.59 3.661646e+01 7.3925928 1.809286e-03       75       0          0 #> 561 5.60 3.669039e+01 7.3926108 1.781137e-03       75       0          0 #> 562 5.61 3.676432e+01 7.3926285 1.753426e-03       75       0          0 #> 563 5.62 3.683824e+01 7.3926459 1.726146e-03       75       0          0 #> 564 5.63 3.691217e+01 7.3926630 1.699291e-03       75       0          0 #> 565 5.64 3.698610e+01 7.3926798 1.672853e-03       75       0          0 #> 566 5.65 3.706002e+01 7.3926964 1.646827e-03       75       0          0 #> 567 5.66 3.713395e+01 7.3927128 1.621206e-03       75       0          0 #> 568 5.67 3.720788e+01 7.3927289 1.595983e-03       75       0          0 #> 569 5.68 3.728180e+01 7.3927447 1.571153e-03       75       0          0 #> 570 5.69 3.735573e+01 7.3927603 1.546709e-03       75       0          0 #> 571 5.70 3.742966e+01 7.3927756 1.522645e-03       75       0          0 #> 572 5.71 3.750359e+01 7.3927907 1.498956e-03       75       0          0 #> 573 5.72 3.757752e+01 7.3928056 1.475635e-03       75       0          0 #> 574 5.73 3.765144e+01 7.3928203 1.452677e-03       75       0          0 #> 575 5.74 3.772537e+01 7.3928347 1.430076e-03       75       0          0 #> 576 5.75 3.779930e+01 7.3928489 1.407827e-03       75       0          0 #> 577 5.76 3.787323e+01 7.3928628 1.385924e-03       75       0          0 #> 578 5.77 3.794716e+01 7.3928766 1.364362e-03       75       0          0 #> 579 5.78 3.802109e+01 7.3928901 1.343136e-03       75       0          0 #> 580 5.79 3.809502e+01 7.3929034 1.322239e-03       75       0          0 #> 581 5.80 3.816894e+01 7.3929166 1.301668e-03       75       0          0 #> 582 5.81 3.824287e+01 7.3929295 1.281416e-03       75       0          0 #> 583 5.82 3.831680e+01 7.3929422 1.261480e-03       75       0          0 #> 584 5.83 3.839073e+01 7.3929547 1.241854e-03       75       0          0 #> 585 5.84 3.846466e+01 7.3929670 1.222533e-03       75       0          0 #> 586 5.85 3.853859e+01 7.3929792 1.203513e-03       75       0          0 #> 587 5.86 3.861252e+01 7.3929911 1.184789e-03       75       0          0 #> 588 5.87 3.868645e+01 7.3930029 1.166356e-03       75       0          0 #> 589 5.88 3.876038e+01 7.3930144 1.148210e-03       75       0          0 #> 590 5.89 3.883431e+01 7.3930258 1.130346e-03       75       0          0 #> 591 5.90 3.890824e+01 7.3930370 1.112760e-03       75       0          0 #> 592 5.91 3.898217e+01 7.3930481 1.095448e-03       75       0          0 #> 593 5.92 3.905610e+01 7.3930589 1.078405e-03       75       0          0 #> 594 5.93 3.913003e+01 7.3930696 1.061627e-03       75       0          0 #> 595 5.94 3.920396e+01 7.3930802 1.045110e-03       75       0          0 #> 596 5.95 3.927790e+01 7.3930905 1.028850e-03       75       0          0 #> 597 5.96 3.935183e+01 7.3931008 1.012844e-03       75       0          0 #> 598 5.97 3.942576e+01 7.3931108 9.970857e-04       75       0          0 #> 599 5.98 3.949969e+01 7.3931207 9.815731e-04       75       0          0 #> 600 5.99 3.957362e+01 7.3931304 9.663018e-04       75       0          0 #> 601 6.00 3.964755e+01 7.3931400 9.512681e-04       75       0          0 #>     air_resistance horizontal_force horizontal_force_relative vertical_force #> 1      0.000000000        869.52014                11.5936018         735.75 #> 2      0.003571112        855.99573                11.4132764         735.75 #> 3      0.014063076        842.68871                11.2358494         735.75 #> 4      0.031152829        829.59548                11.0612730         735.75 #> 5      0.054528982        816.71251                10.8895001         735.75 #> 6      0.083891437        804.03632                10.7204842         735.75 #> 7      0.118951010        791.56350                10.5541799         735.75 #> 8      0.159429070        779.29069                10.3905426         735.75 #> 9      0.205057186        767.21461                10.2295281         735.75 #> 10     0.255576787        755.33201                10.0710934         735.75 #> 11     0.310738836        743.63970                 9.9151960         735.75 #> 12     0.370303509        732.13456                 9.7617942         735.75 #> 13     0.434039887        720.81352                 9.6108470         735.75 #> 14     0.501725659        709.67356                 9.4623141         735.75 #> 15     0.573146832        698.71169                 9.3161559         735.75 #> 16     0.648097453        687.92502                 9.1723335         735.75 #> 17     0.726379336        677.31065                 9.0308087         735.75 #> 18     0.807801803        666.86579                 8.8915438         735.75 #> 19     0.892181429        656.58765                 8.7545020         735.75 #> 20     0.979341798        646.47351                 8.6196468         735.75 #> 21     1.069113264        636.52069                 8.4869426         735.75 #> 22     1.161332722        626.72657                 8.3563542         735.75 #> 23     1.255843387        617.08854                 8.2278472         735.75 #> 24     1.352494577        607.60408                 8.1013877         735.75 #> 25     1.451141507        598.27067                 7.9769423         735.75 #> 26     1.551645087        589.08587                 7.8544782         735.75 #> 27     1.653871723        580.04724                 7.7339633         735.75 #> 28     1.757693137        571.15243                 7.6153658         735.75 #> 29     1.862986177        562.39909                 7.4986545         735.75 #> 30     1.969632642        553.78492                 7.3837990         735.75 #> 31     2.077519116        545.30768                 7.2707690         735.75 #> 32     2.186536795        536.96513                 7.1595350         735.75 #> 33     2.296581334        528.75510                 7.0500679         735.75 #> 34     2.407552689        520.67543                 6.9423391         735.75 #> 35     2.519354967        512.72403                 6.8363204         735.75 #> 36     2.631896285        504.89882                 6.7319842         735.75 #> 37     2.745088623        497.19775                 6.6293033         735.75 #> 38     2.858847697        489.61882                 6.5282509         735.75 #> 39     2.973092821        482.16006                 6.4288008         735.75 #> 40     3.087746785        474.81953                 6.3309271         735.75 #> 41     3.202735729        467.59533                 6.2346043         735.75 #> 42     3.317989027        460.48557                 6.1398076         735.75 #> 43     3.433439172        453.48841                 6.0465121         735.75 #> 44     3.549021662        446.60204                 5.9546939         735.75 #> 45     3.664674899        439.82469                 5.8643291         735.75 #> 46     3.780340079        433.15458                 5.7753944         735.75 #> 47     3.895961095        426.59000                 5.6878667         735.75 #> 48     4.011484439        420.12926                 5.6017235         735.75 #> 49     4.126859109        413.77068                 5.5169424         735.75 #> 50     4.242036520        407.51263                 5.4335017         735.75 #> 51     4.356970410        401.35348                 5.3513798         735.75 #> 52     4.471616764        395.29166                 5.2705555         735.75 #> 53     4.585933726        389.32561                 5.1910081         735.75 #> 54     4.699881521        383.45378                 5.1127171         735.75 #> 55     4.813422379        377.67467                 5.0356623         735.75 #> 56     4.926520463        371.98680                 4.9598240         735.75 #> 57     5.039141793        366.38871                 4.8851828         735.75 #> 58     5.151254181        360.87895                 4.8117193         735.75 #> 59     5.262827162        355.45612                 4.7394149         735.75 #> 60     5.373831930        350.11882                 4.6682509         735.75 #> 61     5.484241276        344.86569                 4.5982092         735.75 #> 62     5.594029526        339.69539                 4.5292718         735.75 #> 63     5.703172486        334.60659                 4.4614212         735.75 #> 64     5.811647383        329.59799                 4.3946398         735.75 #> 65     5.919432811        324.66831                 4.3289108         735.75 #> 66     6.026508678        319.81630                 4.2642173         735.75 #> 67     6.132856159        315.04071                 4.2005428         735.75 #> 68     6.238457640        310.34032                 4.1378710         735.75 #> 69     6.343296677        305.71395                 4.0761860         735.75 #> 70     6.447357949        301.16041                 4.0154721         735.75 #> 71     6.550627209        296.67854                 3.9557138         735.75 #> 72     6.653091249        292.26720                 3.8968959         735.75 #> 73     6.754737853        287.92526                 3.8390035         735.75 #> 74     6.855555757        283.65163                 3.7820218         735.75 #> 75     6.955534617        279.44522                 3.7259363         735.75 #> 76     7.054664963        275.30496                 3.6707328         735.75 #> 77     7.152938171        271.22980                 3.6163974         735.75 #> 78     7.250346423        267.21871                 3.5629161         735.75 #> 79     7.346882677        263.27066                 3.5102755         735.75 #> 80     7.442540632        259.38466                 3.4584621         735.75 #> 81     7.537314700        255.55972                 3.4074630         735.75 #> 82     7.631199973        251.79488                 3.3572650         735.75 #> 83     7.724192197        248.08918                 3.3078557         735.75 #> 84     7.816287740        244.44168                 3.2592224         735.75 #> 85     7.907483571        240.85146                 3.2113528         735.75 #> 86     7.997777227        237.31761                 3.1642348         735.75 #> 87     8.087166793        233.83925                 3.1178566         735.75 #> 88     8.175650877        230.41549                 3.0722065         735.75 #> 89     8.263228586        227.04546                 3.0272728         735.75 #> 90     8.349899501        223.72832                 2.9830443         735.75 #> 91     8.435663661        220.46323                 2.9395097         735.75 #> 92     8.520521535        217.24937                 2.8966582         735.75 #> 93     8.604474011        214.08592                 2.8544789         735.75 #> 94     8.687522365        210.97209                 2.8129612         735.75 #> 95     8.769668254        207.90710                 2.7720946         735.75 #> 96     8.850913689        204.89016                 2.7318688         735.75 #> 97     8.931261023        201.92054                 2.6922738         735.75 #> 98     9.010712930        198.99746                 2.6532995         735.75 #> 99     9.089272394        196.12021                 2.6149362         735.75 #> 100    9.166942688        193.28806                 2.5771741         735.75 #> 101    9.243727364        190.50029                 2.5400038         735.75 #> 102    9.319630235        187.75620                 2.5034161         735.75 #> 103    9.394655362        185.05512                 2.4674016         735.75 #> 104    9.468807042        182.39635                 2.4319513         735.75 #> 105    9.542089793        179.77922                 2.3970563         735.75 #> 106    9.614508343        177.20310                 2.3627079         735.75 #> 107    9.686067619        174.66731                 2.3288975         735.75 #> 108    9.756772733        172.17124                 2.2956166         735.75 #> 109    9.826628973        169.71426                 2.2628568         735.75 #> 110    9.895641792        167.29574                 2.2306099         735.75 #> 111    9.963816796        164.91509                 2.1988678         735.75 #> 112   10.031159738        162.57170                 2.1676227         735.75 #> 113   10.097676506        160.26500                 2.1368666         735.75 #> 114   10.163373112        157.99439                 2.1065919         735.75 #> 115   10.228255688        155.75932                 2.0767910         735.75 #> 116   10.292330475        153.55923                 2.0474563         735.75 #> 117   10.355603814        151.39356                 2.0185807         735.75 #> 118   10.418082140        149.26177                 1.9901569         735.75 #> 119   10.479771976        147.16333                 1.9621777         735.75 #> 120   10.540679922        145.09772                 1.9346362         735.75 #> 121   10.600812649        143.06441                 1.9075255         735.75 #> 122   10.660176898        141.06291                 1.8808388         735.75 #> 123   10.718779466        139.09271                 1.8545695         735.75 #> 124   10.776627204        137.15332                 1.8287109         735.75 #> 125   10.833727013        135.24425                 1.8032567         735.75 #> 126   10.890085832        133.36503                 1.7782004         735.75 #> 127   10.945710641        131.51519                 1.7535359         735.75 #> 128   11.000608450        129.69427                 1.7292570         735.75 #> 129   11.054786297        127.90182                 1.7053576         735.75 #> 130   11.108251241        126.13738                 1.6818317         735.75 #> 131   11.161010360        124.40052                 1.6586735         735.75 #> 132   11.213070746        122.69080                 1.6358773         735.75 #> 133   11.264439500        121.00780                 1.6134373         735.75 #> 134   11.315123729        119.35110                 1.5913480         735.75 #> 135   11.365130544        117.72028                 1.5696038         735.75 #> 136   11.414467051        116.11495                 1.5481993         735.75 #> 137   11.463140356        114.53469                 1.5271292         735.75 #> 138   11.511157553        112.97912                 1.5063883         735.75 #> 139   11.558525727        111.44785                 1.4859714         735.75 #> 140   11.605251950        109.94050                 1.4658734         735.75 #> 141   11.651343275        108.45670                 1.4460893         735.75 #> 142   11.696806738        106.99606                 1.4266142         735.75 #> 143   11.741649352        105.55824                 1.4074432         735.75 #> 144   11.785878107        104.14287                 1.3885716         735.75 #> 145   11.829499966        102.74961                 1.3699948         735.75 #> 146   11.872521864        101.37809                 1.3517079         735.75 #> 147   11.914950704        100.02800                 1.3337066         735.75 #> 148   11.956793359         98.69898                 1.3159864         735.75 #> 149   11.998056667         97.39071                 1.2985428         735.75 #> 150   12.038747428         96.10286                 1.2813715         735.75 #> 151   12.078872407         94.83512                 1.2644682         735.75 #> 152   12.118438330         93.58716                 1.2478289         735.75 #> 153   12.157451880         92.35869                 1.2314492         735.75 #> 154   12.195919701         91.14939                 1.2153252         735.75 #> 155   12.233848392         89.95896                 1.1994528         735.75 #> 156   12.271244508         88.78711                 1.1838281         735.75 #> 157   12.308114560         87.63355                 1.1684473         735.75 #> 158   12.344465011         86.49798                 1.1533065         735.75 #> 159   12.380302277         85.38014                 1.1384019         735.75 #> 160   12.415632726         84.27974                 1.1237299         735.75 #> 161   12.450462676         83.19651                 1.1092868         735.75 #> 162   12.484798396         82.13018                 1.0950691         735.75 #> 163   12.518646103         81.08049                 1.0810732         735.75 #> 164   12.552011966         80.04717                 1.0672956         735.75 #> 165   12.584902097         79.02997                 1.0537329         735.75 #> 166   12.617322560         78.02864                 1.0403819         735.75 #> 167   12.649279364         77.04293                 1.0272390         735.75 #> 168   12.680778464         76.07259                 1.0143012         735.75 #> 169   12.711825763         75.11739                 1.0015652         735.75 #> 170   12.742427109         74.17709                 0.9890278         735.75 #> 171   12.772588295         73.25145                 0.9766860         735.75 #> 172   12.802315059         72.34025                 0.9645366         735.75 #> 173   12.831613085         71.44325                 0.9525767         735.75 #> 174   12.860488001         70.56025                 0.9408033         735.75 #> 175   12.888945380         69.69102                 0.9292135         735.75 #> 176   12.916990740         68.83534                 0.9178045         735.75 #> 177   12.944629542         67.99300                 0.9065733         735.75 #> 178   12.971867193         67.16379                 0.8955172         735.75 #> 179   12.998709042         66.34752                 0.8846336         735.75 #> 180   13.025160384         65.54397                 0.8739196         735.75 #> 181   13.051226459         64.75295                 0.8633726         735.75 #> 182   13.076912448         63.97426                 0.8529901         735.75 #> 183   13.102223481         63.20771                 0.8427695         735.75 #> 184   13.127164628         62.45311                 0.8327082         735.75 #> 185   13.151740907         61.71028                 0.8228037         735.75 #> 186   13.175957279         60.97902                 0.8130536         735.75 #> 187   13.199818651         60.25916                 0.8034555         735.75 #> 188   13.223329873         59.55052                 0.7940070         735.75 #> 189   13.246495742         58.85293                 0.7847058         735.75 #> 190   13.269321001         58.16621                 0.7755495         735.75 #> 191   13.291810337         57.49020                 0.7665360         735.75 #> 192   13.313968384         56.82472                 0.7576629         735.75 #> 193   13.335799722         56.16961                 0.7489281         735.75 #> 194   13.357308877         55.52471                 0.7403295         735.75 #> 195   13.378500322         54.88986                 0.7318648         735.75 #> 196   13.399378478         54.26491                 0.7235321         735.75 #> 197   13.419947713         53.64969                 0.7153292         735.75 #> 198   13.440212341         53.04406                 0.7072542         735.75 #> 199   13.460176626         52.44787                 0.6993049         735.75 #> 200   13.479844780         51.86097                 0.6914796         735.75 #> 201   13.499220963         51.28321                 0.6837762         735.75 #> 202   13.518309284         50.71446                 0.6761928         735.75 #> 203   13.537113802         50.15456                 0.6687275         735.75 #> 204   13.555638527         49.60340                 0.6613786         735.75 #> 205   13.573887416         49.06081                 0.6541442         735.75 #> 206   13.591864380         48.52669                 0.6470225         735.75 #> 207   13.609573278         48.00088                 0.6400117         735.75 #> 208   13.627017923         47.48326                 0.6331102         735.75 #> 209   13.644202078         46.97371                 0.6263162         735.75 #> 210   13.661129459         46.47210                 0.6196280         735.75 #> 211   13.677803734         45.97830                 0.6130440         735.75 #> 212   13.694228525         45.49220                 0.6065626         735.75 #> 213   13.710407406         45.01366                 0.6001822         735.75 #> 214   13.726343907         44.54258                 0.5939011         735.75 #> 215   13.742041509         44.07884                 0.5877179         735.75 #> 216   13.757503650         43.62233                 0.5816310         735.75 #> 217   13.772733724         43.17292                 0.5756389         735.75 #> 218   13.787735079         42.73051                 0.5697402         735.75 #> 219   13.802511018         42.29500                 0.5639333         735.75 #> 220   13.817064803         41.86627                 0.5582169         735.75 #> 221   13.831399652         41.44421                 0.5525895         735.75 #> 222   13.845518739         41.02873                 0.5470498         735.75 #> 223   13.859425196         40.61972                 0.5415963         735.75 #> 224   13.873122116         40.21708                 0.5362278         735.75 #> 225   13.886612547         39.82071                 0.5309429         735.75 #> 226   13.899899497         39.43052                 0.5257403         735.75 #> 227   13.912985936         39.04640                 0.5206187         735.75 #> 228   13.925874790         38.66826                 0.5155769         735.75 #> 229   13.938568949         38.29602                 0.5106136         735.75 #> 230   13.951071261         37.92957                 0.5057275         735.75 #> 231   13.963384536         37.56882                 0.5009176         735.75 #> 232   13.975511547         37.21370                 0.4961826         735.75 #> 233   13.987455028         36.86410                 0.4915213         735.75 #> 234   13.999217675         36.51995                 0.4869326         735.75 #> 235   14.010802148         36.18116                 0.4824154         735.75 #> 236   14.022211070         35.84764                 0.4779685         735.75 #> 237   14.033447028         35.51931                 0.4735909         735.75 #> 238   14.044512572         35.19610                 0.4692814         735.75 #> 239   14.055410218         34.87793                 0.4650390         735.75 #> 240   14.066142447         34.56470                 0.4608627         735.75 #> 241   14.076711705         34.25635                 0.4567514         735.75 #> 242   14.087120404         33.95281                 0.4527041         735.75 #> 243   14.097370922         33.65399                 0.4487198         735.75 #> 244   14.107465604         33.35982                 0.4447976         735.75 #> 245   14.117406762         33.07024                 0.4409365         735.75 #> 246   14.127196676         32.78516                 0.4371354         735.75 #> 247   14.136837593         32.50452                 0.4333936         735.75 #> 248   14.146331729         32.22825                 0.4297100         735.75 #> 249   14.155681268         31.95628                 0.4260837         735.75 #> 250   14.164888365         31.68854                 0.4225139         735.75 #> 251   14.173955141         31.42498                 0.4189997         735.75 #> 252   14.182883690         31.16552                 0.4155402         735.75 #> 253   14.191676075         30.91009                 0.4121346         735.75 #> 254   14.200334329         30.65865                 0.4087820         735.75 #> 255   14.208860457         30.41111                 0.4054815         735.75 #> 256   14.217256435         30.16744                 0.4022325         735.75 #> 257   14.225524211         29.92755                 0.3990340         735.75 #> 258   14.233665705         29.69140                 0.3958853         735.75 #> 259   14.241682809         29.45893                 0.3927857         735.75 #> 260   14.249577387         29.23007                 0.3897343         735.75 #> 261   14.257351278         29.00478                 0.3867304         735.75 #> 262   14.265006294         28.78299                 0.3837733         735.75 #> 263   14.272544220         28.56466                 0.3808622         735.75 #> 264   14.279966816         28.34973                 0.3779964         735.75 #> 265   14.287275816         28.13814                 0.3751752         735.75 #> 266   14.294472930         27.92984                 0.3723979         735.75 #> 267   14.301559841         27.72479                 0.3696639         735.75 #> 268   14.308538209         27.52293                 0.3669724         735.75 #> 269   14.315409671         27.32421                 0.3643229         735.75 #> 270   14.322175838         27.12859                 0.3617145         735.75 #> 271   14.328838299         26.93601                 0.3591468         735.75 #> 272   14.335398618         26.74643                 0.3566191         735.75 #> 273   14.341858339         26.55980                 0.3541306         735.75 #> 274   14.348218981         26.37607                 0.3516810         735.75 #> 275   14.354482041         26.19521                 0.3492694         735.75 #> 276   14.360648996         26.01716                 0.3468954         735.75 #> 277   14.366721299         25.84188                 0.3445583         735.75 #> 278   14.372700383         25.66932                 0.3422577         735.75 #> 279   14.378587660         25.49946                 0.3399928         735.75 #> 280   14.384384520         25.33224                 0.3377632         735.75 #> 281   14.390092333         25.16762                 0.3355683         735.75 #> 282   14.395712451         25.00556                 0.3334075         735.75 #> 283   14.401246203         24.84603                 0.3312804         735.75 #> 284   14.406694899         24.68898                 0.3291864         735.75 #> 285   14.412059831         24.53437                 0.3271249         735.75 #> 286   14.417342271         24.38217                 0.3250956         735.75 #> 287   14.422543473         24.23234                 0.3230979         735.75 #> 288   14.427664670         24.08484                 0.3211312         735.75 #> 289   14.432707080         23.93964                 0.3191951         735.75 #> 290   14.437671901         23.79669                 0.3172892         735.75 #> 291   14.442560313         23.65597                 0.3154130         735.75 #> 292   14.447373480         23.51744                 0.3135659         735.75 #> 293   14.452112546         23.38107                 0.3117476         735.75 #> 294   14.456778642         23.24682                 0.3099576         735.75 #> 295   14.461372878         23.11466                 0.3081955         735.75 #> 296   14.465896350         22.98455                 0.3064607         735.75 #> 297   14.470350137         22.85648                 0.3047530         735.75 #> 298   14.474735301         22.73039                 0.3030719         735.75 #> 299   14.479052890         22.60627                 0.3014169         735.75 #> 300   14.483303935         22.48407                 0.2997877         735.75 #> 301   14.487489452         22.36378                 0.2981838         735.75 #> 302   14.491610441         22.24537                 0.2966049         735.75 #> 303   14.495667888         22.12879                 0.2950505         735.75 #> 304   14.499662764         22.01403                 0.2935204         735.75 #> 305   14.503596026         21.90105                 0.2920140         735.75 #> 306   14.507468615         21.78984                 0.2905312         735.75 #> 307   14.511281460         21.68035                 0.2890713         735.75 #> 308   14.515035473         21.57257                 0.2876342         735.75 #> 309   14.518731556         21.46646                 0.2862195         735.75 #> 310   14.522370595         21.36201                 0.2848268         735.75 #> 311   14.525953463         21.25918                 0.2834558         735.75 #> 312   14.529481021         21.15795                 0.2821060         735.75 #> 313   14.532954115         21.05830                 0.2807773         735.75 #> 314   14.536373581         20.96020                 0.2794693         735.75 #> 315   14.539740239         20.86362                 0.2781817         735.75 #> 316   14.543054900         20.76855                 0.2769140         735.75 #> 317   14.546318360         20.67496                 0.2756661         735.75 #> 318   14.549531405         20.58282                 0.2744376         735.75 #> 319   14.552694808         20.49212                 0.2732283         735.75 #> 320   14.555809331         20.40283                 0.2720377         735.75 #> 321   14.558875723         20.31493                 0.2708657         735.75 #> 322   14.561894724         20.22839                 0.2697119         735.75 #> 323   14.564867062         20.14321                 0.2685761         735.75 #> 324   14.567793452         20.05935                 0.2674579         735.75 #> 325   14.570674600         19.97679                 0.2663572         735.75 #> 326   14.573511202         19.89552                 0.2652736         735.75 #> 327   14.576303942         19.81551                 0.2642068         735.75 #> 328   14.579053493         19.73675                 0.2631567         735.75 #> 329   14.581760521         19.65921                 0.2621228         735.75 #> 330   14.584425678         19.58288                 0.2611051         735.75 #> 331   14.587049608         19.50774                 0.2601032         735.75 #> 332   14.589632946         19.43377                 0.2591169         735.75 #> 333   14.592176316         19.36095                 0.2581460         735.75 #> 334   14.594680332         19.28926                 0.2571901         735.75 #> 335   14.597145601         19.21869                 0.2562491         735.75 #> 336   14.599572719         19.14921                 0.2553228         735.75 #> 337   14.601962273         19.08082                 0.2544109         735.75 #> 338   14.604314841         19.01349                 0.2535132         735.75 #> 339   14.606630993         18.94721                 0.2526294         735.75 #> 340   14.608911289         18.88196                 0.2517594         735.75 #> 341   14.611156283         18.81772                 0.2509029         735.75 #> 342   14.613366518         18.75449                 0.2500598         735.75 #> 343   14.615542529         18.69223                 0.2492298         735.75 #> 344   14.617684844         18.63095                 0.2484127         735.75 #> 345   14.619793982         18.57062                 0.2476083         735.75 #> 346   14.621870455         18.51123                 0.2468164         735.75 #> 347   14.623914766         18.45277                 0.2460369         735.75 #> 348   14.625927412         18.39521                 0.2452694         735.75 #> 349   14.627908880         18.33855                 0.2445140         735.75 #> 350   14.629859651         18.28277                 0.2437702         735.75 #> 351   14.631780200         18.22786                 0.2430381         735.75 #> 352   14.633670991         18.17380                 0.2423173         735.75 #> 353   14.635532485         18.12058                 0.2416078         735.75 #> 354   14.637365134         18.06820                 0.2409093         735.75 #> 355   14.639169382         18.01662                 0.2402217         735.75 #> 356   14.640945669         17.96585                 0.2395447         735.75 #> 357   14.642694425         17.91587                 0.2388783         735.75 #> 358   14.644416077         17.86667                 0.2382223         735.75 #> 359   14.646111041         17.81823                 0.2375765         735.75 #> 360   14.647779731         17.77055                 0.2369407         735.75 #> 361   14.649422553         17.72361                 0.2363148         735.75 #> 362   14.651039906         17.67740                 0.2356987         735.75 #> 363   14.652632183         17.63191                 0.2350921         735.75 #> 364   14.654199772         17.58712                 0.2344950         735.75 #> 365   14.655743054         17.54304                 0.2339072         735.75 #> 366   14.657262406         17.49964                 0.2333285         735.75 #> 367   14.658758196         17.45691                 0.2327588         735.75 #> 368   14.660230789         17.41485                 0.2321980         735.75 #> 369   14.661680544         17.37344                 0.2316459         735.75 #> 370   14.663107814         17.33268                 0.2311024         735.75 #> 371   14.664512946         17.29255                 0.2305674         735.75 #> 372   14.665896283         17.25305                 0.2300406         735.75 #> 373   14.667258161         17.21416                 0.2295221         735.75 #> 374   14.668598914         17.17588                 0.2290117         735.75 #> 375   14.669918867         17.13819                 0.2285092         735.75 #> 376   14.671218342         17.10109                 0.2280145         735.75 #> 377   14.672497656         17.06456                 0.2275275         735.75 #> 378   14.673757121         17.02860                 0.2270481         735.75 #> 379   14.674997044         16.99321                 0.2265761         735.75 #> 380   14.676217727         16.95836                 0.2261115         735.75 #> 381   14.677419469         16.92406                 0.2256541         735.75 #> 382   14.678602562         16.89029                 0.2252038         735.75 #> 383   14.679767295         16.85704                 0.2247606         735.75 #> 384   14.680913952         16.82432                 0.2243242         735.75 #> 385   14.682042814         16.79210                 0.2238946         735.75 #> 386   14.683154154         16.76038                 0.2234717         735.75 #> 387   14.684248246         16.72916                 0.2230554         735.75 #> 388   14.685325356         16.69842                 0.2226456         735.75 #> 389   14.686385747         16.66816                 0.2222421         735.75 #> 390   14.687429677         16.63837                 0.2218450         735.75 #> 391   14.688457403         16.60905                 0.2214540         735.75 #> 392   14.689469174         16.58018                 0.2210690         735.75 #> 393   14.690465238         16.55176                 0.2206901         735.75 #> 394   14.691445838         16.52378                 0.2203171         735.75 #> 395   14.692411214         16.49624                 0.2199499         735.75 #> 396   14.693361602         16.46913                 0.2195883         735.75 #> 397   14.694297234         16.44243                 0.2192325         735.75 #> 398   14.695218338         16.41616                 0.2188821         735.75 #> 399   14.696125140         16.39029                 0.2185372         735.75 #> 400   14.697017861         16.36483                 0.2181977         735.75 #> 401   14.697896720         16.33976                 0.2178634         735.75 #> 402   14.698761931         16.31508                 0.2175344         735.75 #> 403   14.699613706         16.29078                 0.2172104         735.75 #> 404   14.700452253         16.26687                 0.2168915         735.75 #> 405   14.701277778         16.24332                 0.2165776         735.75 #> 406   14.702090481         16.22014                 0.2162686         735.75 #> 407   14.702890563         16.19732                 0.2159643         735.75 #> 408   14.703678218         16.17486                 0.2156648         735.75 #> 409   14.704453640         16.15275                 0.2153700         735.75 #> 410   14.705217017         16.13098                 0.2150797         735.75 #> 411   14.705968537         16.10955                 0.2147940         735.75 #> 412   14.706708384         16.08845                 0.2145127         735.75 #> 413   14.707436739         16.06768                 0.2142358         735.75 #> 414   14.708153779         16.04724                 0.2139632         735.75 #> 415   14.708859681         16.02711                 0.2136948         735.75 #> 416   14.709554616         16.00730                 0.2134306         735.75 #> 417   14.710238757         15.98779                 0.2131705         735.75 #> 418   14.710912268         15.96859                 0.2129145         735.75 #> 419   14.711575317         15.94968                 0.2126624         735.75 #> 420   14.712228064         15.93107                 0.2124143         735.75 #> 421   14.712870670         15.91275                 0.2121700         735.75 #> 422   14.713503292         15.89472                 0.2119296         735.75 #> 423   14.714126085         15.87696                 0.2116929         735.75 #> 424   14.714739201         15.85949                 0.2114598         735.75 #> 425   14.715342792         15.84228                 0.2112304         735.75 #> 426   14.715937003         15.82534                 0.2110045         735.75 #> 427   14.716521982         15.80867                 0.2107822         735.75 #> 428   14.717097870         15.79225                 0.2105633         735.75 #> 429   14.717664811         15.77609                 0.2103479         735.75 #> 430   14.718222941         15.76018                 0.2101357         735.75 #> 431   14.718772398         15.74452                 0.2099269         735.75 #> 432   14.719313317         15.72910                 0.2097214         735.75 #> 433   14.719845830         15.71392                 0.2095190         735.75 #> 434   14.720370068         15.69898                 0.2093198         735.75 #> 435   14.720886158         15.68427                 0.2091236         735.75 #> 436   14.721394228         15.66979                 0.2089306         735.75 #> 437   14.721894402         15.65554                 0.2087405         735.75 #> 438   14.722386803         15.64150                 0.2085534         735.75 #> 439   14.722871551         15.62769                 0.2083692         735.75 #> 440   14.723348765         15.61409                 0.2081879         735.75 #> 441   14.723818562         15.60070                 0.2080094         735.75 #> 442   14.724281058         15.58752                 0.2078336         735.75 #> 443   14.724736365         15.57455                 0.2076606         735.75 #> 444   14.725184595         15.56177                 0.2074903         735.75 #> 445   14.725625858         15.54920                 0.2073227         735.75 #> 446   14.726060263         15.53682                 0.2071576         735.75 #> 447   14.726487915         15.52463                 0.2069951         735.75 #> 448   14.726908920         15.51264                 0.2068352         735.75 #> 449   14.727323381         15.50083                 0.2066777         735.75 #> 450   14.727731399         15.48920                 0.2065227         735.75 #> 451   14.728133076         15.47776                 0.2063701         735.75 #> 452   14.728528508         15.46649                 0.2062199         735.75 #> 453   14.728917793         15.45540                 0.2060720         735.75 #> 454   14.729301026         15.44448                 0.2059264         735.75 #> 455   14.729678303         15.43373                 0.2057830         735.75 #> 456   14.730049714         15.42315                 0.2056420         735.75 #> 457   14.730415351         15.41273                 0.2055031         735.75 #> 458   14.730775305         15.40247                 0.2053663         735.75 #> 459   14.731129662         15.39238                 0.2052317         735.75 #> 460   14.731478511         15.38244                 0.2050992         735.75 #> 461   14.731821936         15.37265                 0.2049687         735.75 #> 462   14.732160022         15.36302                 0.2048403         735.75 #> 463   14.732492852         15.35354                 0.2047139         735.75 #> 464   14.732820507         15.34421                 0.2045894         735.75 #> 465   14.733143069         15.33502                 0.2044669         735.75 #> 466   14.733460615         15.32597                 0.2043463         735.75 #> 467   14.733773224         15.31706                 0.2042275         735.75 #> 468   14.734080973         15.30830                 0.2041106         735.75 #> 469   14.734383938         15.29967                 0.2039956         735.75 #> 470   14.734682191         15.29117                 0.2038823         735.75 #> 471   14.734975808         15.28281                 0.2037707         735.75 #> 472   14.735264859         15.27457                 0.2036610         735.75 #> 473   14.735549416         15.26647                 0.2035529         735.75 #> 474   14.735829549         15.25849                 0.2034465         735.75 #> 475   14.736105325         15.25063                 0.2033417         735.75 #> 476   14.736376814         15.24290                 0.2032386         735.75 #> 477   14.736644082         15.23528                 0.2031371         735.75 #> 478   14.736907193         15.22779                 0.2030372         735.75 #> 479   14.737166214         15.22041                 0.2029388         735.75 #> 480   14.737421206         15.21315                 0.2028420         735.75 #> 481   14.737672234         15.20600                 0.2027466         735.75 #> 482   14.737919359         15.19896                 0.2026528         735.75 #> 483   14.738162640         15.19203                 0.2025604         735.75 #> 484   14.738402139         15.18521                 0.2024694         735.75 #> 485   14.738637914         15.17849                 0.2023799         735.75 #> 486   14.738870022         15.17188                 0.2022917         735.75 #> 487   14.739098520         15.16537                 0.2022050         735.75 #> 488   14.739323466         15.15896                 0.2021195         735.75 #> 489   14.739544913         15.15266                 0.2020354         735.75 #> 490   14.739762917         15.14645                 0.2019526         735.75 #> 491   14.739977531         15.14034                 0.2018711         735.75 #> 492   14.740188807         15.13432                 0.2017909         735.75 #> 493   14.740396798         15.12839                 0.2017119         735.75 #> 494   14.740601554         15.12256                 0.2016342         735.75 #> 495   14.740803126         15.11682                 0.2015576         735.75 #> 496   14.741001564         15.11117                 0.2014823         735.75 #> 497   14.741196915         15.10561                 0.2014081         735.75 #> 498   14.741389228         15.10013                 0.2013351         735.75 #> 499   14.741578551         15.09474                 0.2012632         735.75 #> 500   14.741764929         15.08943                 0.2011924         735.75 #> 501   14.741948409         15.08420                 0.2011227         735.75 #> 502   14.742129035         15.07906                 0.2010541         735.75 #> 503   14.742306852         15.07400                 0.2009866         735.75 #> 504   14.742481904         15.06901                 0.2009201         735.75 #> 505   14.742654234         15.06410                 0.2008547         735.75 #> 506   14.742823883         15.05927                 0.2007903         735.75 #> 507   14.742990894         15.05451                 0.2007269         735.75 #> 508   14.743155307         15.04983                 0.2006644         735.75 #> 509   14.743317163         15.04522                 0.2006030         735.75 #> 510   14.743476502         15.04069                 0.2005425         735.75 #> 511   14.743633363         15.03622                 0.2004829         735.75 #> 512   14.743787784         15.03182                 0.2004243         735.75 #> 513   14.743939804         15.02749                 0.2003665         735.75 #> 514   14.744089459         15.02323                 0.2003097         735.75 #> 515   14.744236787         15.01903                 0.2002538         735.75 #> 516   14.744381823         15.01490                 0.2001987         735.75 #> 517   14.744524603         15.01084                 0.2001445         735.75 #> 518   14.744665163         15.00683                 0.2000911         735.75 #> 519   14.744803537         15.00289                 0.2000386         735.75 #> 520   14.744939758         14.99902                 0.1999869         735.75 #> 521   14.745073861         14.99520                 0.1999360         735.75 #> 522   14.745205877         14.99144                 0.1998858         735.75 #> 523   14.745335841         14.98774                 0.1998365         735.75 #> 524   14.745463783         14.98409                 0.1997879         735.75 #> 525   14.745589735         14.98051                 0.1997401         735.75 #> 526   14.745713728         14.97698                 0.1996930         735.75 #> 527   14.745835793         14.97350                 0.1996467         735.75 #> 528   14.745955959         14.97008                 0.1996010         735.75 #> 529   14.746074256         14.96671                 0.1995561         735.75 #> 530   14.746190713         14.96339                 0.1995119         735.75 #> 531   14.746305358         14.96013                 0.1994684         735.75 #> 532   14.746418220         14.95691                 0.1994255         735.75 #> 533   14.746529327         14.95375                 0.1993833         735.75 #> 534   14.746638706         14.95064                 0.1993418         735.75 #> 535   14.746746383         14.94757                 0.1993009         735.75 #> 536   14.746852386         14.94455                 0.1992607         735.75 #> 537   14.746956739         14.94158                 0.1992211         735.75 #> 538   14.747059470         14.93865                 0.1991821         735.75 #> 539   14.747160602         14.93578                 0.1991437         735.75 #> 540   14.747260162         14.93294                 0.1991059         735.75 #> 541   14.747358173         14.93015                 0.1990687         735.75 #> 542   14.747454659         14.92740                 0.1990320         735.75 #> 543   14.747549644         14.92470                 0.1989960         735.75 #> 544   14.747643152         14.92203                 0.1989605         735.75 #> 545   14.747735206         14.91941                 0.1989255         735.75 #> 546   14.747825827         14.91683                 0.1988911         735.75 #> 547   14.747915039         14.91429                 0.1988572         735.75 #> 548   14.748002864         14.91179                 0.1988239         735.75 #> 549   14.748089322         14.90933                 0.1987911         735.75 #> 550   14.748174435         14.90691                 0.1987588         735.75 #> 551   14.748258225         14.90452                 0.1987270         735.75 #> 552   14.748340711         14.90217                 0.1986956         735.75 #> 553   14.748421913         14.89986                 0.1986648         735.75 #> 554   14.748501853         14.89758                 0.1986345         735.75 #> 555   14.748580550         14.89534                 0.1986046         735.75 #> 556   14.748658022         14.89314                 0.1985752         735.75 #> 557   14.748734289         14.89097                 0.1985462         735.75 #> 558   14.748809369         14.88883                 0.1985177         735.75 #> 559   14.748883282         14.88672                 0.1984897         735.75 #> 560   14.748956045         14.88465                 0.1984620         735.75 #> 561   14.749027676         14.88261                 0.1984348         735.75 #> 562   14.749098193         14.88061                 0.1984081         735.75 #> 563   14.749167613         14.87863                 0.1983817         735.75 #> 564   14.749235953         14.87668                 0.1983558         735.75 #> 565   14.749303230         14.87477                 0.1983302         735.75 #> 566   14.749369460         14.87288                 0.1983051         735.75 #> 567   14.749434660         14.87103                 0.1982803         735.75 #> 568   14.749498846         14.86920                 0.1982560         735.75 #> 569   14.749562034         14.86740                 0.1982320         735.75 #> 570   14.749624238         14.86563                 0.1982084         735.75 #> 571   14.749685475         14.86388                 0.1981851         735.75 #> 572   14.749745759         14.86217                 0.1981622         735.75 #> 573   14.749805106         14.86048                 0.1981397         735.75 #> 574   14.749863529         14.85881                 0.1981175         735.75 #> 575   14.749921044         14.85718                 0.1980957         735.75 #> 576   14.749977663         14.85556                 0.1980742         735.75 #> 577   14.750033402         14.85398                 0.1980530         735.75 #> 578   14.750088274         14.85242                 0.1980322         735.75 #> 579   14.750142292         14.85088                 0.1980117         735.75 #> 580   14.750195470         14.84936                 0.1979915         735.75 #> 581   14.750247821         14.84787                 0.1979716         735.75 #> 582   14.750299358         14.84641                 0.1979521         735.75 #> 583   14.750350092         14.84496                 0.1979328         735.75 #> 584   14.750400038         14.84354                 0.1979139         735.75 #> 585   14.750449206         14.84214                 0.1978952         735.75 #> 586   14.750497609         14.84076                 0.1978768         735.75 #> 587   14.750545260         14.83940                 0.1978587         735.75 #> 588   14.750592169         14.83807                 0.1978409         735.75 #> 589   14.750638349         14.83675                 0.1978234         735.75 #> 590   14.750683810         14.83546                 0.1978061         735.75 #> 591   14.750728564         14.83419                 0.1977891         735.75 #> 592   14.750772622         14.83293                 0.1977724         735.75 #> 593   14.750815994         14.83170                 0.1977560         735.75 #> 594   14.750858692         14.83048                 0.1977397         735.75 #> 595   14.750900725         14.82928                 0.1977238         735.75 #> 596   14.750942104         14.82811                 0.1977081         735.75 #> 597   14.750982840         14.82695                 0.1976926         735.75 #> 598   14.751022942         14.82580                 0.1976774         735.75 #> 599   14.751062420         14.82468                 0.1976624         735.75 #> 600   14.751101284         14.82357                 0.1976477         735.75 #> 601   14.751139544         14.82248                 0.1976331         735.75 #>     resultant_force resultant_force_relative      power power_relative #> 1         1139.0318                15.187090    0.00000       0.000000 #> 2         1128.7412                15.049883   98.46673       1.312890 #> 3         1118.6833                14.915777  192.36386       2.564851 #> 4         1108.8538                14.784717  281.85858       3.758114 #> 5         1099.2486                14.656647  367.11239       4.894832 #> 6         1089.8635                14.531513  448.28130       5.977084 #> 7         1080.6946                14.409261  525.51603       7.006880 #> 8         1071.7379                14.289838  598.96217       7.986162 #> 9         1062.9893                14.173191  668.76033       8.916804 #> 10        1054.4451                14.059268  735.04637       9.800618 #> 11        1046.1014                13.948018  797.95147      10.639353 #> 12        1037.9543                13.839390  857.60237      11.434698 #> 13        1030.0001                13.733335  914.12144      12.188286 #> 14        1022.2351                13.629801  967.62688      12.901692 #> 15        1014.6557                13.528742 1018.23285      13.576438 #> 16        1007.2581                13.430108 1066.04959      14.213994 #> 17        1000.0389                13.333852 1111.18352      14.815780 #> 18         992.9945                13.239926 1153.73746      15.383166 #> 19         986.1214                13.148285 1193.81064      15.917475 #> 20         979.4162                13.058882 1231.49889      16.419985 #> 21         972.8755                12.971673 1266.89473      16.891930 #> 22         966.4959                12.886611 1300.08750      17.334500 #> 23         960.2741                12.803655 1331.16341      17.748845 #> 24         954.2069                12.722758 1360.20571      18.136076 #> 25         948.2910                12.643880 1387.29475      18.497263 #> 26         942.5233                12.566978 1412.50809      18.833441 #> 27         936.9007                12.492009 1435.92060      19.145608 #> 28         931.4200                12.418933 1457.60451      19.434727 #> 29         926.0782                12.347709 1477.62956      19.701728 #> 30         920.8723                12.278297 1496.06303      19.947507 #> 31         915.7994                12.210659 1512.96984      20.172931 #> 32         910.8565                12.144754 1528.41265      20.378835 #> 33         906.0408                12.080545 1542.45189      20.566025 #> 34         901.3495                12.017994 1555.14588      20.735278 #> 35         896.7798                11.957064 1566.55087      20.887345 #> 36         892.3289                11.897719 1576.72112      21.022948 #> 37         887.9942                11.839922 1585.70898      21.142786 #> 38         883.7730                11.783640 1593.56491      21.247532 #> 39         879.6627                11.728835 1600.33762      21.337835 #> 40         875.6607                11.675476 1606.07404      21.414320 #> 41         871.7646                11.623527 1610.81943      21.477592 #> 42         867.9718                11.572957 1614.61745      21.528233 #> 43         864.2799                11.523732 1617.51016      21.566802 #> 44         860.6866                11.475822 1619.53813      21.593842 #> 45         857.1895                11.429193 1620.74046      21.609873 #> 46         853.7862                11.383817 1621.15482      21.615398 #> 47         850.4746                11.339662 1620.81753      21.610900 #> 48         847.2524                11.296699 1619.76358      21.596848 #> 49         844.1174                11.254899 1618.02669      21.573689 #> 50         841.0675                11.214234 1615.63933      21.541858 #> 51         838.1006                11.174675 1612.63279      21.501771 #> 52         835.2147                11.136196 1609.03721      21.453830 #> 53         832.4076                11.098769 1604.88162      21.398422 #> 54         829.6776                11.062368 1600.19396      21.335919 #> 55         827.0225                11.026967 1595.00114      21.266682 #> 56         824.4406                10.992541 1589.32906      21.191054 #> 57         821.9299                10.959065 1583.20267      21.109369 #> 58         819.4887                10.926516 1576.64597      21.021946 #> 59         817.1151                10.894868 1569.68204      20.929094 #> 60         814.8075                10.864100 1562.33312      20.831108 #> 61         812.5641                10.834188 1554.62058      20.728274 #> 62         810.3833                10.805110 1546.56498      20.620866 #> 63         808.2633                10.776845 1538.18611      20.509148 #> 64         806.2028                10.749370 1529.50297      20.393373 #> 65         804.2000                10.722666 1520.53385      20.273785 #> 66         802.2534                10.696712 1511.29633      20.150618 #> 67         800.3616                10.671488 1501.80729      20.024097 #> 68         798.5231                10.646975 1492.08296      19.894439 #> 69         796.7365                10.623154 1482.13894      19.761852 #> 70         795.0004                10.600005 1471.99019      19.626536 #> 71         793.3134                10.577513 1461.65110      19.488681 #> 72         791.6743                10.555657 1451.13547      19.348473 #> 73         790.0817                10.534422 1440.45656      19.206087 #> 74         788.5343                10.513790 1429.62709      19.061695 #> 75         787.0309                10.493746 1418.65925      18.915457 #> 76         785.5704                10.474272 1407.56475      18.767530 #> 77         784.1516                10.455354 1396.35482      18.618064 #> 78         782.7732                10.436976 1385.04021      18.467203 #> 79         781.4343                10.419123 1373.63124      18.315083 #> 80         780.1336                10.401782 1362.13779      18.161837 #> 81         778.8702                10.384936 1350.56931      18.007591 #> 82         777.6431                10.368574 1338.93488      17.852465 #> 83         776.4511                10.352681 1327.24317      17.696576 #> 84         775.2934                10.337245 1315.50247      17.540033 #> 85         774.1689                10.322252 1303.72074      17.382943 #> 86         773.0768                10.307690 1291.90557      17.225408 #> 87         772.0161                10.293548 1280.06420      17.067523 #> 88         770.9860                10.279813 1268.20359      16.909381 #> 89         769.9855                10.266474 1256.33034      16.751071 #> 90         769.0139                10.253519 1244.45080      16.592677 #> 91         768.0704                10.240938 1232.57098      16.434280 #> 92         767.1541                10.228721 1220.69665      16.275955 #> 93         766.2642                10.216856 1208.83329      16.117777 #> 94         765.4001                10.205334 1196.98613      15.959815 #> 95         764.5609                10.194146 1185.16015      15.802135 #> 96         763.7461                10.183281 1173.36008      15.644801 #> 97         762.9548                10.172730 1161.59043      15.487872 #> 98         762.1864                10.162485 1149.85549      15.331407 #> 99         761.4402                10.152536 1138.15932      15.175458 #> 100        760.7157                10.142876 1126.50578      15.020077 #> 101        760.0121                10.133495 1114.89854      14.865314 #> 102        759.3290                10.124386 1103.34107      14.711214 #> 103        758.6656                10.115541 1091.83665      14.557822 #> 104        758.0214                10.106952 1080.38840      14.405179 #> 105        757.3960                10.098613 1068.99924      14.253323 #> 106        756.7886                10.090515 1057.67196      14.102293 #> 107        756.1989                10.082652 1046.40917      13.952122 #> 108        755.6262                10.075016 1035.21334      13.802844 #> 109        755.0702                10.067603 1024.08677      13.654490 #> 110        754.5303                10.060404 1013.03166      13.507089 #> 111        754.0060                10.053413 1002.05003      13.360667 #> 112        753.4969                10.046626  991.14381      13.215251 #> 113        753.0026                10.040035  980.31478      13.070864 #> 114        752.5226                10.033635  969.56460      12.927528 #> 115        752.0565                10.027420  958.89484      12.785264 #> 116        751.6040                10.021386  948.30692      12.644092 #> 117        751.1645                10.015526  937.80220      12.504029 #> 118        750.7377                10.009836  927.38190      12.365092 #> 119        750.3233                10.004311  917.04715      12.227295 #> 120        749.9209                 9.998946  906.79901      12.090653 #> 121        749.5302                 9.993736  896.63842      11.955179 #> 122        749.1507                 9.988676  886.56625      11.820883 #> 123        748.7822                 9.983763  876.58328      11.687777 #> 124        748.4244                 9.978992  866.69021      11.555870 #> 125        748.0769                 9.974359  856.88769      11.425169 #> 126        747.7395                 9.969859  847.17625      11.295683 #> 127        747.4117                 9.965490  837.55639      11.167419 #> 128        747.0935                 9.961246  828.02853      11.040380 #> 129        746.7844                 9.957125  818.59302      10.914574 #> 130        746.4842                 9.953123  809.25016      10.790002 #> 131        746.1927                 9.949236  800.00018      10.666669 #> 132        745.9096                 9.945461  790.84326      10.544577 #> 133        745.6346                 9.941795  781.77953      10.423727 #> 134        745.3675                 9.938234  772.80907      10.304121 #> 135        745.1081                 9.934775  763.93191      10.185759 #> 136        744.8562                 9.931416  755.14802      10.068640 #> 137        744.6115                 9.928153  746.45735       9.952765 #> 138        744.3738                 9.924984  737.85979       9.838131 #> 139        744.1429                 9.921906  729.35519       9.724736 #> 140        743.9187                 9.918916  720.94337       9.612578 #> 141        743.7008                 9.916011  712.62412       9.501655 #> 142        743.4892                 9.913190  704.39717       9.391962 #> 143        743.2837                 9.910449  696.26225       9.283497 #> 144        743.0840                 9.907786  688.21903       9.176254 #> 145        742.8900                 9.905200  680.26716       9.070229 #> 146        742.7015                 9.902687  672.40628       8.965417 #> 147        742.5185                 9.900246  664.63598       8.861813 #> 148        742.3406                 9.897875  656.95582       8.759411 #> 149        742.1678                 9.895570  649.36537       8.658205 #> 150        741.9999                 9.893332  641.86415       8.558189 #> 151        741.8367                 9.891157  634.45165       8.459355 #> 152        741.6782                 9.889043  627.12738       8.361698 #> 153        741.5242                 9.886990  619.89079       8.265211 #> 154        741.3746                 9.884994  612.74133       8.169884 #> 155        741.2292                 9.883056  605.67844       8.075712 #> 156        741.0879                 9.881171  598.70152       7.982687 #> 157        740.9505                 9.879341  591.81000       7.890800 #> 158        740.8171                 9.877561  585.00324       7.800043 #> 159        740.6874                 9.875832  578.28063       7.710408 #> 160        740.5614                 9.874152  571.64153       7.621887 #> 161        740.4389                 9.872518  565.08530       7.534471 #> 162        740.3198                 9.870931  558.61127       7.448150 #> 163        740.2041                 9.869388  552.21879       7.362917 #> 164        740.0916                 9.867888  545.90717       7.278762 #> 165        739.9823                 9.866431  539.67573       7.195676 #> 166        739.8760                 9.865014  533.52379       7.113650 #> 167        739.7727                 9.863636  527.45064       7.032675 #> 168        739.6723                 9.862297  521.45558       6.952741 #> 169        739.5747                 9.860996  515.53791       6.873839 #> 170        739.4798                 9.859730  509.69691       6.795959 #> 171        739.3875                 9.858500  503.93187       6.719092 #> 172        739.2978                 9.857303  498.24206       6.643227 #> 173        739.2105                 9.856140  492.62676       6.568357 #> 174        739.1257                 9.855009  487.08525       6.494470 #> 175        739.0432                 9.853910  481.61680       6.421557 #> 176        738.9630                 9.852840  476.22068       6.349609 #> 177        738.8850                 9.851801  470.89616       6.278615 #> 178        738.8092                 9.850789  465.64250       6.208567 #> 179        738.7354                 9.849806  460.45897       6.139453 #> 180        738.6637                 9.848849  455.34485       6.071265 #> 181        738.5939                 9.847919  450.29939       6.003992 #> 182        738.5261                 9.847014  445.32187       5.937625 #> 183        738.4601                 9.846134  440.41156       5.872154 #> 184        738.3959                 9.845278  435.56773       5.807570 #> 185        738.3334                 9.844445  430.78964       5.743862 #> 186        738.2726                 9.843635  426.07659       5.681021 #> 187        738.2135                 9.842847  421.42783       5.619038 #> 188        738.1560                 9.842080  416.84265       5.557902 #> 189        738.1001                 9.841334  412.32033       5.497604 #> 190        738.0456                 9.840609  407.86016       5.438135 #> 191        737.9927                 9.839902  403.46142       5.379486 #> 192        737.9411                 9.839215  399.12340       5.321645 #> 193        737.8910                 9.838546  394.84540       5.264605 #> 194        737.8422                 9.837895  390.62671       5.208356 #> 195        737.7947                 9.837262  386.46663       5.152888 #> 196        737.7484                 9.836646  382.36448       5.098193 #> 197        737.7034                 9.836046  378.31955       5.044261 #> 198        737.6596                 9.835462  374.33117       4.991082 #> 199        737.6170                 9.834893  370.39864       4.938649 #> 200        737.5755                 9.834340  366.52130       4.886951 #> 201        737.5351                 9.833801  362.69846       4.835980 #> 202        737.4958                 9.833277  358.92947       4.785726 #> 203        737.4575                 9.832766  355.21366       4.736182 #> 204        737.4202                 9.832269  351.55036       4.687338 #> 205        737.3839                 9.831785  347.93893       4.639186 #> 206        737.3486                 9.831314  344.37871       4.591716 #> 207        737.3141                 9.830855  340.86907       4.544921 #> 208        737.2806                 9.830408  337.40937       4.498792 #> 209        737.2480                 9.829973  333.99896       4.453320 #> 210        737.2162                 9.829549  330.63724       4.408496 #> 211        737.1852                 9.829136  327.32356       4.364314 #> 212        737.1551                 9.828734  324.05733       4.320764 #> 213        737.1257                 9.828343  320.83792       4.277839 #> 214        737.0971                 9.827961  317.66473       4.235530 #> 215        737.0692                 9.827589  314.53717       4.193829 #> 216        737.0420                 9.827227  311.45463       4.152728 #> 217        737.0156                 9.826874  308.41653       4.112220 #> 218        736.9898                 9.826531  305.42229       4.072297 #> 219        736.9647                 9.826196  302.47133       4.032951 #> 220        736.9402                 9.825869  299.56307       3.994174 #> 221        736.9163                 9.825551  296.69696       3.955960 #> 222        736.8931                 9.825241  293.87244       3.918299 #> 223        736.8704                 9.824939  291.08894       3.881186 #> 224        736.8483                 9.824645  288.34592       3.844612 #> 225        736.8268                 9.824358  285.64285       3.808571 #> 226        736.8058                 9.824078  282.97917       3.773056 #> 227        736.7854                 9.823805  280.35436       3.738058 #> 228        736.7654                 9.823539  277.76790       3.703572 #> 229        736.7460                 9.823280  275.21927       3.669590 #> 230        736.7270                 9.823027  272.70795       3.636106 #> 231        736.7085                 9.822781  270.23343       3.603112 #> 232        736.6905                 9.822540  267.79521       3.570603 #> 233        736.6729                 9.822306  265.39280       3.538571 #> 234        736.6558                 9.822077  263.02570       3.507009 #> 235        736.6391                 9.821854  260.69343       3.475912 #> 236        736.6228                 9.821637  258.39550       3.445273 #> 237        736.6069                 9.821425  256.13145       3.415086 #> 238        736.5914                 9.821218  253.90080       3.385344 #> 239        736.5762                 9.821016  251.70309       3.356041 #> 240        736.5615                 9.820819  249.53787       3.327172 #> 241        736.5471                 9.820627  247.40467       3.298729 #> 242        736.5330                 9.820440  245.30306       3.270707 #> 243        736.5193                 9.820257  243.23258       3.243101 #> 244        736.5059                 9.820079  241.19282       3.215904 #> 245        736.4928                 9.819905  239.18332       3.189111 #> 246        736.4801                 9.819735  237.20367       3.162716 #> 247        736.4677                 9.819569  235.25345       3.136713 #> 248        736.4555                 9.819407  233.33225       3.111097 #> 249        736.4437                 9.819249  231.43964       3.085862 #> 250        736.4321                 9.819095  229.57523       3.061003 #> 251        736.4208                 9.818944  227.73861       3.036515 #> 252        736.4098                 9.818797  225.92940       3.012392 #> 253        736.3990                 9.818653  224.14719       2.988629 #> 254        736.3885                 9.818513  222.39162       2.965222 #> 255        736.3782                 9.818376  220.66228       2.942164 #> 256        736.3682                 9.818243  218.95882       2.919451 #> 257        736.3584                 9.818112  217.28086       2.897078 #> 258        736.3489                 9.817985  215.62803       2.875040 #> 259        736.3395                 9.817860  213.99997       2.853333 #> 260        736.3304                 9.817739  212.39633       2.831951 #> 261        736.3215                 9.817620  210.81676       2.810890 #> 262        736.3128                 9.817504  209.26090       2.790145 #> 263        736.3043                 9.817390  207.72842       2.769712 #> 264        736.2960                 9.817280  206.21898       2.749586 #> 265        736.2879                 9.817172  204.73224       2.729763 #> 266        736.2799                 9.817066  203.26787       2.710238 #> 267        736.2722                 9.816962  201.82556       2.691007 #> 268        736.2646                 9.816861  200.40497       2.672066 #> 269        736.2572                 9.816763  199.00580       2.653411 #> 270        736.2500                 9.816666  197.62773       2.635036 #> 271        736.2429                 9.816572  196.27045       2.616939 #> 272        736.2360                 9.816480  194.93366       2.599115 #> 273        736.2292                 9.816390  193.61706       2.581561 #> 274        736.2226                 9.816302  192.32036       2.564271 #> 275        736.2162                 9.816216  191.04326       2.547244 #> 276        736.2099                 9.816131  189.78548       2.530473 #> 277        736.2037                 9.816049  188.54673       2.513956 #> 278        736.1976                 9.815969  187.32674       2.497690 #> 279        736.1917                 9.815890  186.12522       2.481670 #> 280        736.1860                 9.815813  184.94191       2.465892 #> 281        736.1803                 9.815738  183.77654       2.450354 #> 282        736.1748                 9.815664  182.62884       2.435051 #> 283        736.1694                 9.815592  181.49855       2.419981 #> 284        736.1641                 9.815522  180.38542       2.405139 #> 285        736.1589                 9.815453  179.28919       2.390522 #> 286        736.1539                 9.815385  178.20961       2.376128 #> 287        736.1489                 9.815319  177.14643       2.361952 #> 288        736.1441                 9.815255  176.09942       2.347992 #> 289        736.1394                 9.815192  175.06833       2.334244 #> 290        736.1347                 9.815130  174.05292       2.320706 #> 291        736.1302                 9.815069  173.05297       2.307373 #> 292        736.1258                 9.815010  172.06824       2.294243 #> 293        736.1214                 9.814952  171.09850       2.281313 #> 294        736.1172                 9.814896  170.14354       2.268581 #> 295        736.1130                 9.814840  169.20313       2.256042 #> 296        736.1089                 9.814786  168.27706       2.243694 #> 297        736.1049                 9.814733  167.36511       2.231535 #> 298        736.1010                 9.814680  166.46707       2.219561 #> 299        736.0972                 9.814629  165.58274       2.207770 #> 300        736.0935                 9.814580  164.71190       2.196159 #> 301        736.0898                 9.814531  163.85436       2.184725 #> 302        736.0862                 9.814483  163.00991       2.173465 #> 303        736.0827                 9.814436  162.17837       2.162378 #> 304        736.0793                 9.814390  161.35953       2.151460 #> 305        736.0759                 9.814345  160.55321       2.140710 #> 306        736.0726                 9.814301  159.75922       2.130123 #> 307        736.0694                 9.814258  158.97738       2.119698 #> 308        736.0662                 9.814216  158.20749       2.109433 #> 309        736.0631                 9.814175  157.44939       2.099325 #> 310        736.0601                 9.814134  156.70289       2.089372 #> 311        736.0571                 9.814094  155.96782       2.079571 #> 312        736.0542                 9.814055  155.24401       2.069920 #> 313        736.0513                 9.814017  154.53129       2.060417 #> 314        736.0485                 9.813980  153.82949       2.051060 #> 315        736.0458                 9.813943  153.13844       2.041846 #> 316        736.0431                 9.813908  152.45799       2.032773 #> 317        736.0404                 9.813872  151.78797       2.023840 #> 318        736.0378                 9.813838  151.12823       2.015043 #> 319        736.0353                 9.813804  150.47861       2.006381 #> 320        736.0328                 9.813771  149.83895       1.997853 #> 321        736.0304                 9.813739  149.20912       1.989455 #> 322        736.0280                 9.813707  148.58895       1.981186 #> 323        736.0257                 9.813676  147.97830       1.973044 #> 324        736.0234                 9.813645  147.37703       1.965027 #> 325        736.0212                 9.813615  146.78500       1.957133 #> 326        736.0189                 9.813586  146.20206       1.949361 #> 327        736.0168                 9.813557  145.62808       1.941708 #> 328        736.0147                 9.813529  145.06293       1.934172 #> 329        736.0126                 9.813501  144.50646       1.926753 #> 330        736.0106                 9.813474  143.95854       1.919447 #> 331        736.0086                 9.813448  143.41906       1.912254 #> 332        736.0066                 9.813422  142.88787       1.905172 #> 333        736.0047                 9.813396  142.36485       1.898198 #> 334        736.0028                 9.813371  141.84988       1.891332 #> 335        736.0010                 9.813346  141.34283       1.884571 #> 336        735.9992                 9.813322  140.84359       1.877915 #> 337        735.9974                 9.813298  140.35204       1.871361 #> 338        735.9956                 9.813275  139.86805       1.864907 #> 339        735.9939                 9.813252  139.39152       1.858554 #> 340        735.9922                 9.813230  138.92233       1.852298 #> 341        735.9906                 9.813208  138.46036       1.846138 #> 342        735.9890                 9.813187  138.00551       1.840074 #> 343        735.9874                 9.813165  137.55767       1.834102 #> 344        735.9859                 9.813145  137.11674       1.828223 #> 345        735.9843                 9.813124  136.68260       1.822435 #> 346        735.9828                 9.813104  136.25515       1.816735 #> 347        735.9814                 9.813085  135.83429       1.811124 #> 348        735.9799                 9.813066  135.41993       1.805599 #> 349        735.9785                 9.813047  135.01195       1.800159 #> 350        735.9771                 9.813028  134.61027       1.794804 #> 351        735.9758                 9.813010  134.21478       1.789530 #> 352        735.9744                 9.812992  133.82540       1.784339 #> 353        735.9731                 9.812975  133.44202       1.779227 #> 354        735.9718                 9.812958  133.06456       1.774194 #> 355        735.9706                 9.812941  132.69293       1.769239 #> 356        735.9693                 9.812924  132.32703       1.764360 #> 357        735.9681                 9.812908  131.96679       1.759557 #> 358        735.9669                 9.812892  131.61210       1.754828 #> 359        735.9657                 9.812876  131.26290       1.750172 #> 360        735.9646                 9.812861  130.91908       1.745588 #> 361        735.9634                 9.812846  130.58058       1.741074 #> 362        735.9623                 9.812831  130.24731       1.736631 #> 363        735.9612                 9.812817  129.91918       1.732256 #> 364        735.9602                 9.812802  129.59613       1.727948 #> 365        735.9591                 9.812788  129.27806       1.723708 #> 366        735.9581                 9.812774  128.96492       1.719532 #> 367        735.9571                 9.812761  128.65661       1.715421 #> 368        735.9561                 9.812748  128.35307       1.711374 #> 369        735.9551                 9.812735  128.05422       1.707390 #> 370        735.9541                 9.812722  127.75999       1.703467 #> 371        735.9532                 9.812709  127.47031       1.699604 #> 372        735.9523                 9.812697  127.18511       1.695802 #> 373        735.9514                 9.812685  126.90433       1.692058 #> 374        735.9505                 9.812673  126.62788       1.688372 #> 375        735.9496                 9.812661  126.35571       1.684743 #> 376        735.9487                 9.812650  126.08775       1.681170 #> 377        735.9479                 9.812638  125.82394       1.677653 #> 378        735.9470                 9.812627  125.56421       1.674189 #> 379        735.9462                 9.812616  125.30850       1.670780 #> 380        735.9454                 9.812605  125.05674       1.667423 #> 381        735.9446                 9.812595  124.80888       1.664118 #> 382        735.9438                 9.812585  124.56486       1.660865 #> 383        735.9431                 9.812574  124.32462       1.657662 #> 384        735.9423                 9.812564  124.08809       1.654508 #> 385        735.9416                 9.812555  123.85523       1.651403 #> 386        735.9409                 9.812545  123.62597       1.648346 #> 387        735.9402                 9.812536  123.40026       1.645337 #> 388        735.9395                 9.812526  123.17805       1.642374 #> 389        735.9388                 9.812517  122.95927       1.639457 #> 390        735.9381                 9.812508  122.74389       1.636585 #> 391        735.9374                 9.812499  122.53184       1.633758 #> 392        735.9368                 9.812491  122.32308       1.630974 #> 393        735.9362                 9.812482  122.11755       1.628234 #> 394        735.9355                 9.812474  121.91520       1.625536 #> 395        735.9349                 9.812465  121.71599       1.622880 #> 396        735.9343                 9.812457  121.51986       1.620265 #> 397        735.9337                 9.812449  121.32678       1.617690 #> 398        735.9331                 9.812442  121.13669       1.615156 #> 399        735.9325                 9.812434  120.94954       1.612660 #> 400        735.9320                 9.812426  120.76529       1.610204 #> 401        735.9314                 9.812419  120.58390       1.607785 #> 402        735.9309                 9.812412  120.40532       1.605404 #> 403        735.9303                 9.812404  120.22950       1.603060 #> 404        735.9298                 9.812397  120.05642       1.600752 #> 405        735.9293                 9.812390  119.88601       1.598480 #> 406        735.9288                 9.812384  119.71825       1.596243 #> 407        735.9283                 9.812377  119.55309       1.594041 #> 408        735.9278                 9.812370  119.39049       1.591873 #> 409        735.9273                 9.812364  119.23041       1.589739 #> 410        735.9268                 9.812357  119.07281       1.587638 #> 411        735.9263                 9.812351  118.91766       1.585569 #> 412        735.9259                 9.812345  118.76491       1.583532 #> 413        735.9254                 9.812339  118.61453       1.581527 #> 414        735.9250                 9.812333  118.46649       1.579553 #> 415        735.9245                 9.812327  118.32074       1.577610 #> 416        735.9241                 9.812321  118.17725       1.575697 #> 417        735.9237                 9.812316  118.03599       1.573813 #> 418        735.9233                 9.812310  117.89692       1.571959 #> 419        735.9229                 9.812305  117.76000       1.570133 #> 420        735.9225                 9.812299  117.62521       1.568336 #> 421        735.9221                 9.812294  117.49251       1.566567 #> 422        735.9217                 9.812289  117.36187       1.564825 #> 423        735.9213                 9.812284  117.23326       1.563110 #> 424        735.9209                 9.812279  117.10664       1.561422 #> 425        735.9205                 9.812274  116.98199       1.559760 #> 426        735.9202                 9.812269  116.85927       1.558124 #> 427        735.9198                 9.812264  116.73846       1.556513 #> 428        735.9195                 9.812260  116.61952       1.554927 #> 429        735.9191                 9.812255  116.50242       1.553366 #> 430        735.9188                 9.812250  116.38715       1.551829 #> 431        735.9184                 9.812246  116.27366       1.550315 #> 432        735.9181                 9.812241  116.16194       1.548826 #> 433        735.9178                 9.812237  116.05195       1.547359 #> 434        735.9175                 9.812233  115.94366       1.545915 #> 435        735.9172                 9.812229  115.83706       1.544494 #> 436        735.9168                 9.812225  115.73211       1.543095 #> 437        735.9165                 9.812221  115.62879       1.541717 #> 438        735.9162                 9.812217  115.52708       1.540361 #> 439        735.9160                 9.812213  115.42694       1.539026 #> 440        735.9157                 9.812209  115.32836       1.537711 #> 441        735.9154                 9.812205  115.23131       1.536417 #> 442        735.9151                 9.812201  115.13577       1.535144 #> 443        735.9148                 9.812198  115.04171       1.533889 #> 444        735.9146                 9.812194  114.94911       1.532655 #> 445        735.9143                 9.812191  114.85795       1.531439 #> 446        735.9140                 9.812187  114.76820       1.530243 #> 447        735.9138                 9.812184  114.67985       1.529065 #> 448        735.9135                 9.812180  114.59287       1.527905 #> 449        735.9133                 9.812177  114.50724       1.526763 #> 450        735.9130                 9.812174  114.42294       1.525639 #> 451        735.9128                 9.812170  114.33995       1.524533 #> 452        735.9125                 9.812167  114.25825       1.523443 #> 453        735.9123                 9.812164  114.17782       1.522371 #> 454        735.9121                 9.812161  114.09863       1.521315 #> 455        735.9119                 9.812158  114.02068       1.520276 #> 456        735.9116                 9.812155  113.94394       1.519253 #> 457        735.9114                 9.812152  113.86839       1.518245 #> 458        735.9112                 9.812149  113.79401       1.517254 #> 459        735.9110                 9.812147  113.72079       1.516277 #> 460        735.9108                 9.812144  113.64871       1.515316 #> 461        735.9106                 9.812141  113.57774       1.514370 #> 462        735.9104                 9.812138  113.50788       1.513438 #> 463        735.9102                 9.812136  113.43911       1.512521 #> 464        735.9100                 9.812133  113.37140       1.511619 #> 465        735.9098                 9.812131  113.30474       1.510730 #> 466        735.9096                 9.812128  113.23912       1.509855 #> 467        735.9094                 9.812126  113.17452       1.508994 #> 468        735.9092                 9.812123  113.11093       1.508146 #> 469        735.9091                 9.812121  113.04832       1.507311 #> 470        735.9089                 9.812118  112.98668       1.506489 #> 471        735.9087                 9.812116  112.92600       1.505680 #> 472        735.9085                 9.812114  112.86627       1.504884 #> 473        735.9084                 9.812112  112.80746       1.504099 #> 474        735.9082                 9.812109  112.74957       1.503328 #> 475        735.9080                 9.812107  112.69257       1.502568 #> 476        735.9079                 9.812105  112.63647       1.501820 #> 477        735.9077                 9.812103  112.58123       1.501083 #> 478        735.9076                 9.812101  112.52685       1.500358 #> 479        735.9074                 9.812099  112.47332       1.499644 #> 480        735.9073                 9.812097  112.42062       1.498942 #> 481        735.9071                 9.812095  112.36874       1.498250 #> 482        735.9070                 9.812093  112.31766       1.497569 #> 483        735.9068                 9.812091  112.26738       1.496898 #> 484        735.9067                 9.812089  112.21788       1.496238 #> 485        735.9065                 9.812087  112.16915       1.495589 #> 486        735.9064                 9.812086  112.12118       1.494949 #> 487        735.9063                 9.812084  112.07395       1.494319 #> 488        735.9061                 9.812082  112.02745       1.493699 #> 489        735.9060                 9.812080  111.98168       1.493089 #> 490        735.9059                 9.812079  111.93662       1.492488 #> 491        735.9058                 9.812077  111.89226       1.491897 #> 492        735.9056                 9.812075  111.84859       1.491315 #> 493        735.9055                 9.812074  111.80560       1.490741 #> 494        735.9054                 9.812072  111.76328       1.490177 #> 495        735.9053                 9.812070  111.72162       1.489622 #> 496        735.9052                 9.812069  111.68060       1.489075 #> 497        735.9050                 9.812067  111.64022       1.488536 #> 498        735.9049                 9.812066  111.60047       1.488006 #> 499        735.9048                 9.812064  111.56133       1.487484 #> 500        735.9047                 9.812063  111.52281       1.486971 #> 501        735.9046                 9.812061  111.48488       1.486465 #> 502        735.9045                 9.812060  111.44754       1.485967 #> 503        735.9044                 9.812059  111.41079       1.485477 #> 504        735.9043                 9.812057  111.37460       1.484995 #> 505        735.9042                 9.812056  111.33898       1.484520 #> 506        735.9041                 9.812055  111.30391       1.484052 #> 507        735.9040                 9.812053  111.26939       1.483592 #> 508        735.9039                 9.812052  111.23540       1.483139 #> 509        735.9038                 9.812051  111.20194       1.482693 #> 510        735.9037                 9.812050  111.16900       1.482253 #> 511        735.9036                 9.812048  111.13658       1.481821 #> 512        735.9035                 9.812047  111.10466       1.481395 #> 513        735.9035                 9.812046  111.07323       1.480976 #> 514        735.9034                 9.812045  111.04229       1.480564 #> 515        735.9033                 9.812044  111.01184       1.480158 #> 516        735.9032                 9.812043  110.98185       1.479758 #> 517        735.9031                 9.812041  110.95234       1.479365 #> 518        735.9030                 9.812040  110.92328       1.478977 #> 519        735.9029                 9.812039  110.89468       1.478596 #> 520        735.9029                 9.812038  110.86651       1.478220 #> 521        735.9028                 9.812037  110.83879       1.477851 #> 522        735.9027                 9.812036  110.81150       1.477487 #> 523        735.9026                 9.812035  110.78463       1.477128 #> 524        735.9026                 9.812034  110.75818       1.476776 #> 525        735.9025                 9.812033  110.73214       1.476429 #> 526        735.9024                 9.812032  110.70651       1.476087 #> 527        735.9023                 9.812031  110.68128       1.475750 #> 528        735.9023                 9.812030  110.65643       1.475419 #> 529        735.9022                 9.812029  110.63198       1.475093 #> 530        735.9021                 9.812029  110.60790       1.474772 #> 531        735.9021                 9.812028  110.58420       1.474456 #> 532        735.9020                 9.812027  110.56087       1.474145 #> 533        735.9019                 9.812026  110.53790       1.473839 #> 534        735.9019                 9.812025  110.51528       1.473537 #> 535        735.9018                 9.812024  110.49302       1.473240 #> 536        735.9018                 9.812023  110.47111       1.472948 #> 537        735.9017                 9.812023  110.44953       1.472660 #> 538        735.9016                 9.812022  110.42829       1.472377 #> 539        735.9016                 9.812021  110.40738       1.472098 #> 540        735.9015                 9.812020  110.38680       1.471824 #> 541        735.9015                 9.812020  110.36654       1.471554 #> 542        735.9014                 9.812019  110.34659       1.471288 #> 543        735.9014                 9.812018  110.32695       1.471026 #> 544        735.9013                 9.812017  110.30762       1.470768 #> 545        735.9013                 9.812017  110.28859       1.470514 #> 546        735.9012                 9.812016  110.26985       1.470265 #> 547        735.9011                 9.812015  110.25141       1.470019 #> 548        735.9011                 9.812015  110.23325       1.469777 #> 549        735.9010                 9.812014  110.21537       1.469538 #> 550        735.9010                 9.812013  110.19778       1.469304 #> 551        735.9009                 9.812013  110.18045       1.469073 #> 552        735.9009                 9.812012  110.16340       1.468845 #> 553        735.9009                 9.812011  110.14661       1.468621 #> 554        735.9008                 9.812011  110.13008       1.468401 #> 555        735.9008                 9.812010  110.11381       1.468184 #> 556        735.9007                 9.812010  110.09779       1.467971 #> 557        735.9007                 9.812009  110.08202       1.467760 #> 558        735.9006                 9.812008  110.06650       1.467553 #> 559        735.9006                 9.812008  110.05122       1.467350 #> 560        735.9005                 9.812007  110.03618       1.467149 #> 561        735.9005                 9.812007  110.02136       1.466952 #> 562        735.9005                 9.812006  110.00678       1.466757 #> 563        735.9004                 9.812006  109.99243       1.466566 #> 564        735.9004                 9.812005  109.97830       1.466377 #> 565        735.9003                 9.812005  109.96439       1.466192 #> 566        735.9003                 9.812004  109.95070       1.466009 #> 567        735.9003                 9.812004  109.93722       1.465830 #> 568        735.9002                 9.812003  109.92395       1.465653 #> 569        735.9002                 9.812003  109.91088       1.465478 #> 570        735.9002                 9.812002  109.89802       1.465307 #> 571        735.9001                 9.812002  109.88536       1.465138 #> 572        735.9001                 9.812001  109.87289       1.464972 #> 573        735.9001                 9.812001  109.86062       1.464808 #> 574        735.9000                 9.812000  109.84854       1.464647 #> 575        735.9000                 9.812000  109.83665       1.464489 #> 576        735.9000                 9.811999  109.82494       1.464333 #> 577        735.8999                 9.811999  109.81342       1.464179 #> 578        735.8999                 9.811999  109.80207       1.464028 #> 579        735.8999                 9.811998  109.79091       1.463879 #> 580        735.8998                 9.811998  109.77991       1.463732 #> 581        735.8998                 9.811997  109.76909       1.463588 #> 582        735.8998                 9.811997  109.75843       1.463446 #> 583        735.8997                 9.811997  109.74794       1.463306 #> 584        735.8997                 9.811996  109.73761       1.463168 #> 585        735.8997                 9.811996  109.72745       1.463033 #> 586        735.8997                 9.811995  109.71744       1.462899 #> 587        735.8996                 9.811995  109.70758       1.462768 #> 588        735.8996                 9.811995  109.69789       1.462638 #> 589        735.8996                 9.811994  109.68834       1.462511 #> 590        735.8996                 9.811994  109.67894       1.462386 #> 591        735.8995                 9.811994  109.66968       1.462262 #> 592        735.8995                 9.811993  109.66057       1.462141 #> 593        735.8995                 9.811993  109.65161       1.462021 #> 594        735.8995                 9.811993  109.64278       1.461904 #> 595        735.8994                 9.811992  109.63409       1.461788 #> 596        735.8994                 9.811992  109.62553       1.461674 #> 597        735.8994                 9.811992  109.61711       1.461561 #> 598        735.8994                 9.811991  109.60881       1.461451 #> 599        735.8993                 9.811991  109.60065       1.461342 #> 600        735.8993                 9.811991  109.59262       1.461235 #> 601        735.8993                 9.811991  109.58470       1.461129 #>             work average_power average_power_relative         RF force_angle #> 1      0.0000000           NaN                    NaN 0.76338534    40.23644 #> 2      0.4962128      49.62128              0.6616171 0.75836313    40.67989 #> 3      1.9541032      97.70516              1.3027355 0.75328622    41.12415 #> 4      4.3288160     144.29387              1.9239182 0.74815588    41.56911 #> 5      7.5771391     189.42848              2.5257130 0.74297346    42.01467 #> 6     11.6574481     233.14896              3.1086528 0.73774038    42.46072 #> 7     16.5296518     275.49420              3.6732560 0.73245808    42.90714 #> 8     22.1551407     316.50201              4.2200268 0.72712808    43.35383 #> 9     28.4967358     356.20920              4.7494560 0.72175194    43.80069 #> 10    35.5186408     394.65156              5.2620209 0.71633127    44.24759 #> 11    43.1863939     431.86394              5.7581859 0.71086773    44.69444 #> 12    51.4668233     467.88021              6.2384028 0.70536302    45.14112 #> 13    60.3280023     502.73335              6.7031114 0.69981889    45.58752 #> 14    69.7392071     536.45544              7.1527392 0.69423712    46.03354 #> 15    79.6708755     569.07768              7.5877024 0.68861952    46.47907 #> 16    90.0945671     600.63045              8.0084060 0.68296796    46.92399 #> 17   100.9829249     631.14328              8.4152437 0.67728431    47.36821 #> 18   112.3096380     660.64493              8.8085991 0.67157049    47.81161 #> 19   124.0494053     689.16336              9.1888448 0.66582842    48.25409 #> 20   136.1779013     716.72580              9.5563440 0.66006006    48.69555 #> 21   148.6717421     743.35871              9.9114495 0.65426740    49.13588 #> 22   161.5084527     769.08787             10.2545049 0.64845240    49.57498 #> 23   174.6664361     793.93835             10.5858446 0.64261709    50.01275 #> 24   188.1249425     817.93453             10.9057938 0.63676346    50.44910 #> 25   201.8640397     841.10017             11.2146689 0.63089353    50.88392 #> 26   215.8645854     863.45834             11.5127779 0.62500932    51.31713 #> 27   230.1081990     885.03153             11.8004205 0.61911285    51.74862 #> 28   244.5772356     905.84161             12.0778882 0.61320613    52.17831 #> 29   259.2547600     925.90986             12.3454648 0.60729116    52.60611 #> 30   274.1245219     945.25697             12.6034263 0.60136994    53.03192 #> 31   289.1709320     963.90311             12.8520414 0.59544446    53.45568 #> 32   304.3790390     981.86787             13.0915716 0.58951669    53.87728 #> 33   319.7345067     999.17033             13.3222711 0.58358859    54.29666 #> 34   335.2235929    1015.82907             13.5443876 0.57766207    54.71373 #> 35   350.8331279    1031.86214             13.7581619 0.57173906    55.12842 #> 36   366.5504946    1047.28713             13.9638284 0.56582143    55.54065 #> 37   382.3636091    1062.12114             14.1616152 0.55991104    55.95035 #> 38   398.2609013    1076.38081             14.3517442 0.55400973    56.35747 #> 39   414.2312968    1090.08236             14.5344315 0.54811928    56.76192 #> 40   430.2641996    1103.24154             14.7098872 0.54224146    57.16364 #> 41   446.3494743    1115.87369             14.8783158 0.53637799    57.56259 #> 42   462.4774304    1127.99373             15.0399164 0.53053057    57.95869 #> 43   478.6388057    1139.61620             15.1948827 0.52470084    58.35189 #> 44   494.8247513    1150.75524             15.3434031 0.51889043    58.74215 #> 45   511.0268164    1161.42458             15.4856611 0.51310089    59.12940 #> 46   527.2369341    1171.63763             15.6218351 0.50733375    59.51360 #> 47   543.4474075    1181.40741             15.7520988 0.50159051    59.89472 #> 48   559.6508960    1190.74659             15.8766212 0.49587260    60.27269 #> 49   575.8404028    1199.66751             15.9955667 0.49018142    60.64749 #> 50   592.0092617    1208.18217             16.1090956 0.48451831    61.01908 #> 51   608.1511256    1216.30225             16.2173633 0.47888459    61.38742 #> 52   624.2599542    1224.03913             16.3205217 0.47328151    61.75248 #> 53   640.3300032    1231.40385             16.4187180 0.46771027    62.11423 #> 54   656.3558131    1238.40719             16.5120959 0.46217205    62.47265 #> 55   672.3321986    1245.05963             16.6007950 0.45666795    62.82770 #> 56   688.2542384    1251.37134             16.6849512 0.45119905    63.17936 #> 57   704.1172655    1257.35226             16.7646968 0.44576637    63.52762 #> 58   719.9168576    1263.01203             16.8401604 0.44037088    63.87245 #> 59   735.6488276    1268.36005             16.9114673 0.43501351    64.21385 #> 60   751.3092152    1273.40545             16.9787393 0.42969514    64.55179 #> 61   766.8942780    1278.15713             17.0420951 0.42441660    64.88626 #> 62   782.4004833    1282.62374             17.1016499 0.41917869    65.21725 #> 63   797.8245002    1286.81371             17.1575161 0.41398214    65.54477 #> 64   813.1631914    1290.73522             17.2098030 0.40882766    65.86879 #> 65   828.4136064    1294.39626             17.2586168 0.40371590    66.18932 #> 66   843.5729738    1297.80458             17.3040610 0.39864748    66.50635 #> 67   858.6386947    1300.96772             17.3462363 0.39362296    66.81988 #> 68   873.6083354    1303.89304             17.3852405 0.38864288    67.12992 #> 69   888.4796217    1306.58768             17.4211691 0.38370772    67.43646 #> 70   903.2504318    1309.05860             17.4541146 0.37881793    67.73952 #> 71   917.9187910    1311.31256             17.4841674 0.37397392    68.03909 #> 72   932.4828653    1313.35615             17.5114153 0.36917606    68.33519 #> 73   946.9409562    1315.19577             17.5359436 0.36442469    68.62782 #> 74   961.2914948    1316.83766             17.5578355 0.35972010    68.91699 #> 75   975.5330368    1318.28789             17.5771718 0.35506257    69.20272 #> 76   989.6642576    1319.55234             17.5940312 0.35045230    69.48502 #> 77  1003.6839472    1320.63677             17.6084903 0.34588951    69.76390 #> 78  1017.5910052    1321.54676             17.6206235 0.34137436    70.03937 #> 79  1031.3844369    1322.28774             17.6305032 0.33690698    70.31146 #> 80  1045.0633485    1322.86500             17.6382000 0.33248748    70.58018 #> 81  1058.6269426    1323.28368             17.6437824 0.32811592    70.84554 #> 82  1072.0745149    1323.54878             17.6473171 0.32379236    71.10757 #> 83  1085.4054493    1323.66518             17.6488691 0.31951681    71.36629 #> 84  1098.6192150    1323.63761             17.6485014 0.31528927    71.62172 #> 85  1111.7153620    1323.47067             17.6462756 0.31110970    71.87388 #> 86  1124.6935184    1323.16885             17.6422513 0.30697806    72.12279 #> 87  1137.5533861    1322.73650             17.6364866 0.30289426    72.36848 #> 88  1150.2947383    1322.17786             17.6290381 0.29885821    72.61096 #> 89  1162.9174158    1321.49706             17.6199608 0.29486978    72.85027 #> 90  1175.4213242    1320.69812             17.6093082 0.29092883    73.08643 #> 91  1187.8064309    1319.78492             17.5971323 0.28703520    73.31946 #> 92  1200.0727621    1318.76128             17.5834837 0.28318871    73.54939 #> 93  1212.2204004    1317.63087             17.5684116 0.27938916    73.77625 #> 94  1224.2494819    1316.39729             17.5519639 0.27563636    74.00006 #> 95  1236.1601936    1315.06404             17.5341871 0.27193005    74.22085 #> 96  1247.9527712    1313.63450             17.5151266 0.26827001    74.43865 #> 97  1259.6274966    1312.11198             17.4948263 0.26465597    74.65349 #> 98  1271.1846956    1310.49969             17.4733291 0.26108767    74.86539 #> 99  1282.6247357    1308.80075             17.4506767 0.25756482    75.07438 #> 100 1293.9480241    1307.01821             17.4269094 0.25408712    75.28050 #> 101 1305.1550056    1305.15501             17.4020667 0.25065428    75.48377 #> 102 1316.2461608    1303.21402             17.3761869 0.24726596    75.68422 #> 103 1327.2220039    1301.19804             17.3493072 0.24392186    75.88187 #> 104 1338.0830811    1299.10979             17.3214638 0.24062162    76.07677 #> 105 1348.8299689    1296.95189             17.2926919 0.23736491    76.26893 #> 106 1359.4632722    1294.72693             17.2630257 0.23415138    76.45840 #> 107 1369.9836231    1292.43738             17.2324984 0.23098066    76.64519 #> 108 1380.3916789    1290.08568             17.2011424 0.22785239    76.82933 #> 109 1390.6881208    1287.67419             17.1689891 0.22476620    77.01087 #> 110 1400.8736525    1285.20519             17.1360691 0.22172171    77.18982 #> 111 1410.9489988    1282.68091             17.1024121 0.21871854    77.36622 #> 112 1420.9149044    1280.10352             17.0680469 0.21575629    77.54010 #> 113 1430.7721323    1277.47512             17.0330016 0.21283458    77.71148 #> 114 1440.5214628    1274.79775             16.9973034 0.20995301    77.88040 #> 115 1450.1636924    1272.07341             16.9609789 0.20711119    78.04689 #> 116 1459.6996324    1269.30403             16.9240537 0.20430870    78.21097 #> 117 1469.1301082    1266.49147             16.8865530 0.20154515    78.37267 #> 118 1478.4559578    1263.63757             16.8485009 0.19882012    78.53203 #> 119 1487.6780313    1260.74409             16.8099213 0.19613322    78.68907 #> 120 1496.7971895    1257.81276             16.7708369 0.19348402    78.84382 #> 121 1505.8143033    1254.84525             16.7312700 0.19087212    78.99632 #> 122 1514.7302526    1251.84318             16.6912425 0.18829710    79.14658 #> 123 1523.5459256    1248.80814             16.6507751 0.18575856    79.29464 #> 124 1532.2622179    1245.74164             16.6098885 0.18325607    79.44053 #> 125 1540.8800317    1242.64519             16.5686025 0.18078923    79.58427 #> 126 1549.4002752    1239.52022             16.5269363 0.17835762    79.72589 #> 127 1557.8238620    1236.36814             16.4849086 0.17596084    79.86542 #> 128 1566.1517097    1233.19032             16.4425376 0.17359845    80.00289 #> 129 1574.3847404    1229.98808             16.3998410 0.17127007    80.13833 #> 130 1582.5238790    1226.76270             16.3568360 0.16897528    80.27176 #> 131 1590.5700532    1223.51543             16.3135390 0.16671366    80.40320 #> 132 1598.5241927    1220.24748             16.2699663 0.16448481    80.53269 #> 133 1606.3872290    1216.96002             16.2261336 0.16228834    80.66026 #> 134 1614.1600943    1213.65421             16.1820561 0.16012382    80.78592 #> 135 1621.8437215    1210.33114             16.1377485 0.15799087    80.90970 #> 136 1629.4390434    1206.99188             16.0932251 0.15588908    81.03164 #> 137 1636.9469926    1203.63749             16.0484999 0.15381806    81.15175 #> 138 1644.3685008    1200.26898             16.0035864 0.15177740    81.27006 #> 139 1651.7044983    1196.88732             15.9584976 0.14976673    81.38659 #> 140 1658.9559139    1193.49346             15.9132462 0.14778565    81.50138 #> 141 1666.1236743    1190.08834             15.8678445 0.14583377    81.61444 #> 142 1673.2087039    1186.67284             15.8223045 0.14391071    81.72579 #> 143 1680.2119244    1183.24783             15.7766378 0.14201609    81.83547 #> 144 1687.1342545    1179.81416             15.7308555 0.14014953    81.94350 #> 145 1693.9766095    1176.37265             15.6849686 0.13831066    82.04990 #> 146 1700.7399011    1172.92407             15.6389876 0.13649910    82.15469 #> 147 1707.4250370    1169.46920             15.5929227 0.13471449    82.25789 #> 148 1714.0329211    1166.00879             15.5467839 0.13295646    82.35953 #> 149 1720.5644525    1162.54355             15.5005807 0.13122465    82.45963 #> 150 1727.0205259    1159.07418             15.4543224 0.12951870    82.55822 #> 151 1733.4020312    1155.60135             15.4080181 0.12783826    82.65531 #> 152 1739.7098531    1152.12573             15.3616764 0.12618297    82.75092 #> 153 1745.9448711    1148.64794             15.3153059 0.12455249    82.84509 #> 154 1752.1079593    1145.16860             15.2689147 0.12294647    82.93782 #> 155 1758.1999862    1141.68830             15.2225107 0.12136457    83.02914 #> 156 1764.2218146    1138.20762             15.1761016 0.11980645    83.11907 #> 157 1770.1743013    1134.72712             15.1296949 0.11827179    83.20763 #> 158 1776.0582971    1131.24732             15.0832976 0.11676024    83.29484 #> 159 1781.8746466    1127.76876             15.0369168 0.11527149    83.38072 #> 160 1787.6241881    1124.29194             14.9905592 0.11380521    83.46528 #> 161 1793.3077535    1120.81735             14.9442313 0.11236108    83.54856 #> 162 1798.9261681    1117.34545             14.8979393 0.11093879    83.63056 #> 163 1804.4802507    1113.87670             14.8516893 0.10953801    83.71132 #> 164 1809.9708134    1110.41154             14.8054872 0.10815846    83.79083 #> 165 1815.3986614    1106.95040             14.7593387 0.10679981    83.86913 #> 166 1820.7645930    1103.49369             14.7132492 0.10546178    83.94623 #> 167 1826.0693997    1100.04181             14.6672241 0.10414405    84.02215 #> 168 1831.3138660    1096.59513             14.6212684 0.10284635    84.09690 #> 169 1836.4987693    1093.15403             14.5753871 0.10156837    84.17051 #> 170 1841.6248798    1089.71886             14.5295849 0.10030983    84.24299 #> 171 1846.6929607    1086.28998             14.4838664 0.09907045    84.31435 #> 172 1851.7037679    1082.86770             14.4382360 0.09784995    84.38463 #> 173 1856.6580502    1079.45235             14.3926981 0.09664805    84.45382 #> 174 1861.5565491    1076.04425             14.3472566 0.09546448    84.52195 #> 175 1866.3999988    1072.64368             14.3019157 0.09429897    84.58903 #> 176 1871.1891263    1069.25093             14.2566791 0.09315126    84.65508 #> 177 1875.9246511    1065.86628             14.2115504 0.09202108    84.72011 #> 178 1880.6072856    1062.48999             14.1665332 0.09090817    84.78414 #> 179 1885.2377348    1059.12232             14.1216310 0.08981228    84.84719 #> 180 1889.8166964    1055.76352             14.0768469 0.08873317    84.90927 #> 181 1894.3448606    1052.41381             14.0321842 0.08767057    84.97039 #> 182 1898.8229106    1049.07343             13.9876458 0.08662424    85.03057 #> 183 1903.2515221    1045.74259             13.9432346 0.08559395    85.08982 #> 184 1907.6313634    1042.42151             13.8989535 0.08457944    85.14816 #> 185 1911.9630958    1039.11038             13.8548050 0.08358050    85.20560 #> 186 1916.2473731    1035.80939             13.8107919 0.08259688    85.26215 #> 187 1920.4848418    1032.51873             13.7669164 0.08162836    85.31783 #> 188 1924.6761416    1029.23858             13.7231810 0.08067471    85.37265 #> 189 1928.8219044    1025.96910             13.6795880 0.07973571    85.42663 #> 190 1932.9227554    1022.71045             13.6361394 0.07881113    85.47977 #> 191 1936.9793124    1019.46280             13.5928373 0.07790077    85.53209 #> 192 1940.9921862    1016.22628             13.5496837 0.07700440    85.58360 #> 193 1944.9619804    1013.00103             13.5066804 0.07612183    85.63432 #> 194 1948.8892918    1009.78720             13.4638293 0.07525283    85.68425 #> 195 1952.7747100    1006.58490             13.4211320 0.07439721    85.73341 #> 196 1956.6188176    1003.39427             13.3785902 0.07355476    85.78181 #> 197 1960.4221903    1000.21540             13.3362054 0.07272528    85.82947 #> 198 1964.1853971     997.04842             13.2939790 0.07190859    85.87638 #> 199 1967.9089998     993.89343             13.2519125 0.07110448    85.92257 #> 200 1971.5935538     990.75053             13.2100071 0.07031276    85.96805 #> 201 1975.2396075     987.61980             13.1682640 0.06953325    86.01282 #> 202 1978.8477026     984.50134             13.1266846 0.06876576    86.05690 #> 203 1982.4183741     981.39523             13.0852698 0.06801011    86.10030 #> 204 1985.9521507     978.30155             13.0440207 0.06726612    86.14302 #> 205 1989.4495542     975.22037             13.0029383 0.06653361    86.18509 #> 206 1992.9111000     972.15176             12.9620234 0.06581241    86.22650 #> 207 1996.3372970     969.09578             12.9212770 0.06510234    86.26727 #> 208 1999.7286479     966.05249             12.8806998 0.06440325    86.30741 #> 209 2003.0856487     963.02195             12.8402926 0.06371494    86.34693 #> 210 2006.4087894     960.00421             12.8000561 0.06303728    86.38583 #> 211 2009.6985536     956.99931             12.7599908 0.06237008    86.42414 #> 212 2012.9554187     954.00731             12.7200974 0.06171320    86.46185 #> 213 2016.1798562     951.02823             12.6803765 0.06106647    86.49897 #> 214 2019.3723312     948.06213             12.6408284 0.06042974    86.53552 #> 215 2022.5333029     945.10902             12.6014536 0.05980286    86.57150 #> 216 2025.6632246     942.16894             12.5622526 0.05918567    86.60693 #> 217 2028.7625435     939.24192             12.5232256 0.05857803    86.64180 #> 218 2031.8317013     936.32797             12.4843730 0.05797979    86.67614 #> 219 2034.8711336     933.42713             12.4456950 0.05739081    86.70994 #> 220 2037.8812702     930.53939             12.4071919 0.05681094    86.74322 #> 221 2040.8625355     927.66479             12.3688639 0.05624005    86.77598 #> 222 2043.8153481     924.80332             12.3307110 0.05567800    86.80824 #> 223 2046.7401210     921.95501             12.2927335 0.05512465    86.83999 #> 224 2049.6372618     919.11985             12.2549313 0.05457986    86.87125 #> 225 2052.5071726     916.29784             12.2173046 0.05404352    86.90203 #> 226 2055.3502500     913.48900             12.1798533 0.05351548    86.93232 #> 227 2058.1668855     910.69331             12.1425775 0.05299562    86.96215 #> 228 2060.9574652     907.91078             12.1054770 0.05248382    86.99152 #> 229 2063.7223697     905.14139             12.0685519 0.05197995    87.02043 #> 230 2066.4619749     902.38514             12.0318019 0.05148388    87.04889 #> 231 2069.1766514     899.64202             11.9952270 0.05099550    87.07691 #> 232 2071.8667646     896.91202             11.9588269 0.05051469    87.10449 #> 233 2074.5326750     894.19512             11.9226016 0.05004134    87.13164 #> 234 2077.1747383     891.49130             11.8865507 0.04957532    87.15838 #> 235 2079.7933051     888.80056             11.8506741 0.04911653    87.18470 #> 236 2082.3887213     886.12286             11.8149715 0.04866485    87.21061 #> 237 2084.9613280     883.45819             11.7794425 0.04822018    87.23612 #> 238 2087.5114616     880.80652             11.7440870 0.04778240    87.26123 #> 239 2090.0394538     878.16784             11.7089045 0.04735141    87.28595 #> 240 2092.5456317     875.54211             11.6738947 0.04692711    87.31029 #> 241 2095.0303179     872.92930             11.6390573 0.04650939    87.33425 #> 242 2097.4938304     870.32939             11.6043919 0.04609815    87.35783 #> 243 2099.9364828     867.74235             11.5698980 0.04569329    87.38106 #> 244 2102.3585844     865.16814             11.5355752 0.04529471    87.40392 #> 245 2104.7604401     862.60674             11.5014232 0.04490232    87.42642 #> 246 2107.1423503     860.05810             11.4674414 0.04451601    87.44858 #> 247 2109.5046116     857.52220             11.4336293 0.04413570    87.47039 #> 248 2111.8475161     854.99899             11.3999866 0.04376130    87.49186 #> 249 2114.1713519     852.48845             11.3665126 0.04339270    87.51300 #> 250 2116.4764029     849.99052             11.3332070 0.04302983    87.53381 #> 251 2118.7629491     847.50518             11.3000691 0.04267258    87.55430 #> 252 2121.0312664     845.03238             11.2670984 0.04232089    87.57447 #> 253 2123.2816270     842.57207             11.2342943 0.04197465    87.59432 #> 254 2125.5142991     840.12423             11.2016564 0.04163379    87.61387 #> 255 2127.7295468     837.68880             11.1691840 0.04129823    87.63311 #> 256 2129.9276310     835.26574             11.1368765 0.04096787    87.65206 #> 257 2132.1088082     832.85500             11.1047334 0.04064264    87.67071 #> 258 2134.2733319     830.45655             11.0727540 0.04032246    87.68907 #> 259 2136.4214514     828.07033             11.0409377 0.04000726    87.70714 #> 260 2138.5534128     825.69630             11.0092840 0.03969695    87.72493 #> 261 2140.6694583     823.33441             10.9777921 0.03939146    87.74245 #> 262 2142.7698270     820.98461             10.9464614 0.03909072    87.75970 #> 263 2144.8547543     818.64685             10.9152914 0.03879464    87.77667 #> 264 2146.9244723     816.32109             10.8842812 0.03850317    87.79339 #> 265 2148.9792096     814.00728             10.8534304 0.03821622    87.80984 #> 266 2151.0191916     811.70536             10.8227381 0.03793373    87.82604 #> 267 2153.0446405     809.41528             10.7922037 0.03765563    87.84198 #> 268 2155.0557752     807.13699             10.7618266 0.03738185    87.85768 #> 269 2157.0528113     804.87045             10.7316060 0.03711232    87.87313 #> 270 2159.0359615     802.61560             10.7015413 0.03684698    87.88835 #> 271 2161.0054351     800.37238             10.6716318 0.03658577    87.90332 #> 272 2162.9614387     798.14075             10.6418767 0.03632861    87.91807 #> 273 2164.9041756     795.92065             10.6122754 0.03607545    87.93258 #> 274 2166.8338463     793.71203             10.5828271 0.03582622    87.94687 #> 275 2168.7506482     791.51484             10.5535311 0.03558086    87.96094 #> 276 2170.6547759     789.32901             10.5243868 0.03533932    87.97478 #> 277 2172.5464213     787.15450             10.4953933 0.03510153    87.98842 #> 278 2174.4257731     784.99125             10.4665501 0.03486744    88.00184 #> 279 2176.2930176     782.83921             10.4378562 0.03463698    88.01505 #> 280 2178.1483382     780.69833             10.4093111 0.03441011    88.02806 #> 281 2179.9919157     778.56854             10.3809139 0.03418676    88.04086 #> 282 2181.8239279     776.44980             10.3526640 0.03396688    88.05347 #> 283 2183.6445504     774.34204             10.3245605 0.03375042    88.06588 #> 284 2185.4539561     772.24521             10.2966029 0.03353733    88.07809 #> 285 2187.2523151     770.15927             10.2687902 0.03332755    88.09012 #> 286 2189.0397953     768.08414             10.2411218 0.03312102    88.10196 #> 287 2190.8165619     766.01978             10.2135970 0.03291771    88.11361 #> 288 2192.5827778     763.96612             10.1862150 0.03271756    88.12509 #> 289 2194.3386033     761.92313             10.1589750 0.03252052    88.13638 #> 290 2196.0841966     759.89073             10.1318763 0.03232654    88.14750 #> 291 2197.8197133     757.86887             10.1049182 0.03213558    88.15845 #> 292 2199.5453067     755.85749             10.0780999 0.03194759    88.16923 #> 293 2201.2611280     753.85655             10.0514207 0.03176252    88.17984 #> 294 2202.9673260     751.86598             10.0248798 0.03158033    88.19028 #> 295 2204.6640474     749.88573              9.9984764 0.03140097    88.20056 #> 296 2206.3514365     747.91574              9.9722099 0.03122439    88.21068 #> 297 2208.0296357     745.95596              9.9460794 0.03105057    88.22065 #> 298 2209.6987851     744.00632              9.9200843 0.03087944    88.23046 #> 299 2211.3590228     742.06679              9.8942238 0.03071098    88.24011 #> 300 2213.0104848     740.13729              9.8684971 0.03054513    88.24962 #> 301 2214.6533050     738.21777              9.8429036 0.03038187    88.25898 #> 302 2216.2876156     736.30818              9.8174424 0.03022114    88.26819 #> 303 2217.9135463     734.40846              9.7921128 0.03006291    88.27726 #> 304 2219.5312253     732.51856              9.7669141 0.02990714    88.28619 #> 305 2221.1407786     730.63841              9.7418455 0.02975380    88.29498 #> 306 2222.7423306     728.76798              9.7169064 0.02960284    88.30363 #> 307 2224.3360036     726.90719              9.6920959 0.02945422    88.31215 #> 308 2225.9219181     725.05600              9.6674133 0.02930792    88.32054 #> 309 2227.5001927     723.21435              9.6428580 0.02916389    88.32880 #> 310 2229.0709445     721.38218              9.6184291 0.02902210    88.33692 #> 311 2230.6342887     719.55945              9.5941260 0.02888252    88.34492 #> 312 2232.1903385     717.74609              9.5699479 0.02874510    88.35280 #> 313 2233.7392059     715.94205              9.5458940 0.02860983    88.36055 #> 314 2235.2810007     714.14728              9.5219638 0.02847666    88.36819 #> 315 2236.8158315     712.36173              9.4981564 0.02834555    88.37570 #> 316 2238.3438049     710.58533              9.4744711 0.02821649    88.38310 #> 317 2239.8650260     708.81805              9.4509073 0.02808943    88.39038 #> 318 2241.3795985     707.05981              9.4274641 0.02796435    88.39755 #> 319 2242.8876243     705.31057              9.4041410 0.02784122    88.40461 #> 320 2244.3892039     703.57028              9.3809371 0.02772000    88.41156 #> 321 2245.8844361     701.83889              9.3578518 0.02760066    88.41840 #> 322 2247.3734184     700.11633              9.3348844 0.02748319    88.42513 #> 323 2248.8562468     698.40256              9.3120341 0.02736753    88.43176 #> 324 2250.3330157     696.69753              9.2893004 0.02725368    88.43829 #> 325 2251.8038182     695.00118              9.2666824 0.02714160    88.44471 #> 326 2253.2687460     693.31346              9.2441795 0.02703126    88.45103 #> 327 2254.7278893     691.63432              9.2217910 0.02692263    88.45726 #> 328 2256.1813371     689.96371              9.1995162 0.02681570    88.46339 #> 329 2257.6291768     688.30158              9.1773544 0.02671043    88.46942 #> 330 2259.0714947     686.64787              9.1553049 0.02660680    88.47536 #> 331 2260.5083758     685.00254              9.1333672 0.02650477    88.48121 #> 332 2261.9399035     683.36553              9.1115404 0.02640434    88.48697 #> 333 2263.3661604     681.73680              9.0898239 0.02630547    88.49263 #> 334 2264.7872273     680.11628              9.0682171 0.02620813    88.49821 #> 335 2266.2031844     678.50395              9.0467193 0.02611231    88.50370 #> 336 2267.6141101     676.89973              9.0253298 0.02601798    88.50911 #> 337 2269.0200819     675.30360              9.0040479 0.02592512    88.51443 #> 338 2270.4211761     673.71548              8.9828731 0.02583370    88.51967 #> 339 2271.8174678     672.13535              8.9618046 0.02574370    88.52483 #> 340 2273.2090309     670.56314              8.9408418 0.02565510    88.52991 #> 341 2274.5959384     668.99881              8.9199841 0.02556788    88.53491 #> 342 2275.9782619     667.44231              8.8992307 0.02548202    88.53983 #> 343 2277.3560720     665.89359              8.8785812 0.02539749    88.54467 #> 344 2278.7294384     664.35261              8.8580347 0.02531428    88.54944 #> 345 2280.0984294     662.81931              8.8375908 0.02523236    88.55414 #> 346 2281.4631126     661.29366              8.8172487 0.02515172    88.55876 #> 347 2282.8235544     659.77559              8.7970079 0.02507233    88.56331 #> 348 2284.1798201     658.26508              8.7768677 0.02499417    88.56779 #> 349 2285.5319742     656.76206              8.7568275 0.02491723    88.57220 #> 350 2286.8800801     655.26650              8.7368866 0.02484149    88.57654 #> 351 2288.2242002     653.77834              8.7170446 0.02476693    88.58081 #> 352 2289.5643960     652.29755              8.6973006 0.02469352    88.58502 #> 353 2290.9007281     650.82407              8.6776543 0.02462126    88.58916 #> 354 2292.2332561     649.35786              8.6581048 0.02455012    88.59324 #> 355 2293.5620388     647.89888              8.6386517 0.02448009    88.59725 #> 356 2294.8871339     646.44708              8.6192944 0.02441115    88.60121 #> 357 2296.2085983     645.00242              8.6000322 0.02434328    88.60510 #> 358 2297.5264881     643.56484              8.5808646 0.02427646    88.60892 #> 359 2298.8408586     642.13432              8.5617909 0.02421069    88.61269 #> 360 2300.1517640     640.71080              8.5428106 0.02414593    88.61641 #> 361 2301.4592579     639.29424              8.5239232 0.02408219    88.62006 #> 362 2302.7633930     637.88460              8.5051280 0.02401944    88.62366 #> 363 2304.0642212     636.48183              8.4864244 0.02395766    88.62720 #> 364 2305.3617935     635.08589              8.4678119 0.02389684    88.63068 #> 365 2306.6561603     633.69675              8.4492900 0.02383697    88.63411 #> 366 2307.9473712     632.31435              8.4308580 0.02377803    88.63749 #> 367 2309.2354748     630.93865              8.4125154 0.02372001    88.64082 #> 368 2310.5205192     629.56962              8.3942617 0.02366289    88.64409 #> 369 2311.8025518     628.20722              8.3760962 0.02360666    88.64731 #> 370 2313.0816190     626.85139              8.3580185 0.02355130    88.65048 #> 371 2314.3577668     625.50210              8.3400280 0.02349681    88.65361 #> 372 2315.6310402     624.15931              8.3221241 0.02344316    88.65668 #> 373 2316.9014838     622.82298              8.3043064 0.02339035    88.65971 #> 374 2318.1691412     621.49307              8.2865742 0.02333836    88.66269 #> 375 2319.4340557     620.16953              8.2689271 0.02328718    88.66562 #> 376 2320.6962695     618.85234              8.2513645 0.02323679    88.66851 #> 377 2321.9558246     617.54144              8.2338859 0.02318719    88.67135 #> 378 2323.2127619     616.23681              8.2164908 0.02313836    88.67415 #> 379 2324.4671222     614.93839              8.1991786 0.02309028    88.67691 #> 380 2325.7189451     613.64616              8.1819488 0.02304296    88.67962 #> 381 2326.9682700     612.36007              8.1648009 0.02299637    88.68229 #> 382 2328.2151356     611.08009              8.1477345 0.02295051    88.68492 #> 383 2329.4595799     609.80617              8.1307490 0.02290536    88.68750 #> 384 2330.7016403     608.53829              8.1138438 0.02286092    88.69005 #> 385 2331.9413539     607.27639              8.0970186 0.02281716    88.69256 #> 386 2333.1787569     606.02046              8.0802728 0.02277409    88.69503 #> 387 2334.4138851     604.77044              8.0636058 0.02273168    88.69746 #> 388 2335.6467737     603.52630              8.0470173 0.02268994    88.69985 #> 389 2336.8774575     602.28800              8.0305067 0.02264884    88.70221 #> 390 2338.1059705     601.05552              8.0140736 0.02260839    88.70452 #> 391 2339.3323464     599.82881              7.9977174 0.02256856    88.70681 #> 392 2340.5566183     598.60783              7.9814377 0.02252935    88.70905 #> 393 2341.7788187     597.39256              7.9652341 0.02249075    88.71127 #> 394 2342.9989798     596.18295              7.9491060 0.02245276    88.71344 #> 395 2344.2171332     594.97897              7.9330529 0.02241535    88.71559 #> 396 2345.4333099     593.78058              7.9170745 0.02237853    88.71770 #> 397 2346.6475406     592.58776              7.9011702 0.02234228    88.71978 #> 398 2347.8598555     591.40047              7.8853396 0.02230659    88.72182 #> 399 2349.0702841     590.21866              7.8695822 0.02227146    88.72383 #> 400 2350.2788559     589.04232              7.8538976 0.02223687    88.72582 #> 401 2351.4855994     587.87140              7.8382853 0.02220282    88.72777 #> 402 2352.6905432     586.70587              7.8227449 0.02216931    88.72969 #> 403 2353.8937150     585.54570              7.8072760 0.02213631    88.73158 #> 404 2355.0951424     584.39085              7.7918781 0.02210383    88.73344 #> 405 2356.2948523     583.24130              7.7765507 0.02207185    88.73527 #> 406 2357.4928714     582.09701              7.7612934 0.02204037    88.73708 #> 407 2358.6892260     580.95794              7.7461058 0.02200938    88.73885 #> 408 2359.8839417     579.82406              7.7309875 0.02197887    88.74060 #> 409 2361.0770442     578.69535              7.7159381 0.02194884    88.74232 #> 410 2362.2685582     577.57177              7.7009570 0.02191927    88.74402 #> 411 2363.4585086     576.45329              7.6860439 0.02189017    88.74569 #> 412 2364.6469194     575.33988              7.6711984 0.02186151    88.74733 #> 413 2365.8338147     574.23151              7.6564201 0.02183330    88.74894 #> 414 2367.0192179     573.12814              7.6417085 0.02180553    88.75054 #> 415 2368.2031521     572.02975              7.6270633 0.02177820    88.75210 #> 416 2369.3856402     570.93630              7.6124840 0.02175129    88.75364 #> 417 2370.5667046     569.84777              7.5979702 0.02172479    88.75516 #> 418 2371.7463673     568.76412              7.5835216 0.02169871    88.75666 #> 419 2372.9246501     567.68532              7.5691376 0.02167304    88.75813 #> 420 2374.1015744     566.61135              7.5548181 0.02164776    88.75958 #> 421 2375.2771613     565.54218              7.5405624 0.02162288    88.76100 #> 422 2376.4514315     564.47777              7.5263703 0.02159838    88.76241 #> 423 2377.6244055     563.41811              7.5122414 0.02157427    88.76379 #> 424 2378.7961033     562.36314              7.4981753 0.02155053    88.76515 #> 425 2379.9665448     561.31286              7.4841715 0.02152716    88.76649 #> 426 2381.1357495     560.26724              7.4702298 0.02150415    88.76781 #> 427 2382.3037366     559.22623              7.4563497 0.02148151    88.76911 #> 428 2383.4705249     558.18982              7.4425309 0.02145921    88.77038 #> 429 2384.6361331     557.15798              7.4287730 0.02143726    88.77164 #> 430 2385.8005794     556.13067              7.4150756 0.02141565    88.77288 #> 431 2386.9638820     555.10788              7.4014384 0.02139438    88.77410 #> 432 2388.1260585     554.08957              7.3878610 0.02137344    88.77530 #> 433 2389.2871265     553.07572              7.3743430 0.02135283    88.77648 #> 434 2390.4471031     552.06631              7.3608841 0.02133253    88.77764 #> 435 2391.6060053     551.06129              7.3474839 0.02131255    88.77879 #> 436 2392.7638498     550.06066              7.3341421 0.02129289    88.77992 #> 437 2393.9206530     549.06437              7.3208583 0.02127352    88.78102 #> 438 2395.0764310     548.07241              7.3076321 0.02125446    88.78212 #> 439 2396.2311998     547.08475              7.2944633 0.02123570    88.78319 #> 440 2397.3849750     546.10136              7.2813515 0.02121723    88.78425 #> 441 2398.5377721     545.12222              7.2682963 0.02119904    88.78529 #> 442 2399.6896063     544.14730              7.2552974 0.02118114    88.78632 #> 443 2400.8404924     543.17658              7.2423544 0.02116352    88.78733 #> 444 2401.9904453     542.21003              7.2294671 0.02114617    88.78832 #> 445 2403.1394794     541.24763              7.2166351 0.02112909    88.78930 #> 446 2404.2876090     540.28935              7.2038580 0.02111228    88.79027 #> 447 2405.4348481     539.33517              7.1911356 0.02109572    88.79121 #> 448 2406.5812105     538.38506              7.1784674 0.02107943    88.79215 #> 449 2407.7267100     537.43900              7.1658533 0.02106339    88.79307 #> 450 2408.8713598     536.49696              7.1532928 0.02104760    88.79397 #> 451 2410.0151731     535.55893              7.1407857 0.02103205    88.79486 #> 452 2411.1581631     534.62487              7.1283316 0.02101675    88.79574 #> 453 2412.3003424     533.69477              7.1159302 0.02100168    88.79660 #> 454 2413.4417236     532.76859              7.1035812 0.02098685    88.79745 #> 455 2414.5823192     531.84633              7.0912843 0.02097225    88.79829 #> 456 2415.7221413     530.92794              7.0790392 0.02095788    88.79911 #> 457 2416.8612019     530.01342              7.0668456 0.02094373    88.79993 #> 458 2417.9995130     529.10274              7.0547032 0.02092980    88.80072 #> 459 2419.1370860     528.19587              7.0426116 0.02091609    88.80151 #> 460 2420.2739326     527.29280              7.0305706 0.02090259    88.80228 #> 461 2421.4100639     526.39349              7.0185799 0.02088930    88.80304 #> 462 2422.5454911     525.49794              7.0066392 0.02087621    88.80379 #> 463 2423.6802252     524.60611              6.9947481 0.02086333    88.80453 #> 464 2424.8142768     523.71799              6.9829065 0.02085066    88.80526 #> 465 2425.9476567     522.83355              6.9711140 0.02083817    88.80597 #> 466 2427.0803752     521.95277              6.9593703 0.02082589    88.80668 #> 467 2428.2124425     521.07563              6.9476751 0.02081379    88.80737 #> 468 2429.3438690     520.20211              6.9360282 0.02080188    88.80805 #> 469 2430.4746644     519.33219              6.9244292 0.02079016    88.80873 #> 470 2431.6048385     518.46585              6.9128780 0.02077862    88.80939 #> 471 2432.7344012     517.60306              6.9013742 0.02076726    88.81004 #> 472 2433.8633617     516.74381              6.8899175 0.02075607    88.81068 #> 473 2434.9917296     515.88808              6.8785077 0.02074506    88.81131 #> 474 2436.1195140     515.03584              6.8671445 0.02073422    88.81193 #> 475 2437.2467240     514.18707              6.8558276 0.02072355    88.81254 #> 476 2438.3733684     513.34176              6.8445568 0.02071305    88.81314 #> 477 2439.4994562     512.49989              6.8333318 0.02070271    88.81374 #> 478 2440.6249959     511.66142              6.8221523 0.02069253    88.81432 #> 479 2441.7499960     510.82636              6.8110181 0.02068251    88.81490 #> 480 2442.8744650     509.99467              6.7999289 0.02067264    88.81546 #> 481 2443.9984111     509.16634              6.7888845 0.02066293    88.81602 #> 482 2445.1218424     508.34134              6.7778845 0.02065337    88.81656 #> 483 2446.2447670     507.51966              6.7669288 0.02064396    88.81710 #> 484 2447.3671926     506.70128              6.7560171 0.02063469    88.81764 #> 485 2448.4891272     505.88618              6.7451491 0.02062557    88.81816 #> 486 2449.6105781     505.07435              6.7343246 0.02061659    88.81867 #> 487 2450.7315531     504.26575              6.7235434 0.02060775    88.81918 #> 488 2451.8520595     503.46038              6.7128051 0.02059905    88.81968 #> 489 2452.9721046     502.65822              6.7021096 0.02059048    88.82017 #> 490 2454.0916956     501.85924              6.6914566 0.02058205    88.82065 #> 491 2455.2108394     501.06344              6.6808458 0.02057374    88.82113 #> 492 2456.3295432     500.27078              6.6702771 0.02056557    88.82160 #> 493 2457.4478136     499.48126              6.6597502 0.02055752    88.82206 #> 494 2458.5656574     498.69486              6.6492648 0.02054960    88.82251 #> 495 2459.6830814     497.91155              6.6388207 0.02054180    88.82296 #> 496 2460.8000919     497.13133              6.6284178 0.02053413    88.82340 #> 497 2461.9166955     496.35417              6.6180556 0.02052657    88.82383 #> 498 2463.0328984     495.58006              6.6077341 0.02051913    88.82426 #> 499 2464.1487069     494.80898              6.5974530 0.02051181    88.82468 #> 500 2465.2641271     494.04091              6.5872121 0.02050460    88.82509 #> 501 2466.3791651     493.27583              6.5770111 0.02049750    88.82550 #> 502 2467.4938267     492.51374              6.5668498 0.02049051    88.82590 #> 503 2468.6081179     491.75461              6.5567281 0.02048363    88.82629 #> 504 2469.7220444     490.99842              6.5466456 0.02047686    88.82668 #> 505 2470.8356118     490.24516              6.5366021 0.02047019    88.82706 #> 506 2471.9488258     489.49482              6.5265976 0.02046363    88.82744 #> 507 2473.0616919     488.74737              6.5166316 0.02045717    88.82781 #> 508 2474.1742154     488.00280              6.5067041 0.02045081    88.82817 #> 509 2475.2864016     487.26110              6.4968147 0.02044455    88.82853 #> 510 2476.3982559     486.52225              6.4869633 0.02043839    88.82889 #> 511 2477.5097834     485.78623              6.4771498 0.02043232    88.82923 #> 512 2478.6209892     485.05303              6.4673737 0.02042635    88.82958 #> 513 2479.7318782     484.32263              6.4576351 0.02042047    88.82991 #> 514 2480.8424554     483.59502              6.4479336 0.02041468    88.83024 #> 515 2481.9527257     482.87018              6.4382691 0.02040898    88.83057 #> 516 2483.0626937     482.14810              6.4286413 0.02040337    88.83089 #> 517 2484.1723643     481.42875              6.4190500 0.02039785    88.83121 #> 518 2485.2817420     480.71214              6.4094951 0.02039241    88.83152 #> 519 2486.3908315     479.99823              6.3999764 0.02038706    88.83183 #> 520 2487.4996370     479.28702              6.3904936 0.02038179    88.83213 #> 521 2488.6081632     478.57849              6.3810466 0.02037660    88.83243 #> 522 2489.7164143     477.87263              6.3716351 0.02037149    88.83272 #> 523 2490.8243946     477.16942              6.3622590 0.02036647    88.83301 #> 524 2491.9321083     476.46885              6.3529181 0.02036152    88.83329 #> 525 2493.0395596     475.77091              6.3436121 0.02035665    88.83357 #> 526 2494.1467526     475.07557              6.3343410 0.02035185    88.83384 #> 527 2495.2536912     474.38283              6.3251044 0.02034713    88.83411 #> 528 2496.3603794     473.69267              6.3159023 0.02034248    88.83438 #> 529 2497.4668211     473.00508              6.3067344 0.02033790    88.83464 #> 530 2498.5730202     472.32004              6.2976006 0.02033340    88.83490 #> 531 2499.6789804     471.63754              6.2885006 0.02032897    88.83516 #> 532 2500.7847054     470.95757              6.2794343 0.02032460    88.83541 #> 533 2501.8901989     470.28011              6.2704015 0.02032030    88.83565 #> 534 2502.9954645     469.60515              6.2614020 0.02031607    88.83589 #> 535 2504.1005057     468.93268              6.2524357 0.02031191    88.83613 #> 536 2505.2053261     468.26268              6.2435024 0.02030781    88.83637 #> 537 2506.3099290     467.59514              6.2346018 0.02030377    88.83660 #> 538 2507.4143178     466.93004              6.2257339 0.02029980    88.83683 #> 539 2508.5184959     466.26738              6.2168984 0.02029589    88.83705 #> 540 2509.6224666     465.60714              6.2080952 0.02029204    88.83727 #> 541 2510.7262330     464.94930              6.1993240 0.02028825    88.83749 #> 542 2511.8297984     464.29386              6.1905848 0.02028451    88.83770 #> 543 2512.9331658     463.64081              6.1818774 0.02028084    88.83791 #> 544 2514.0363384     462.99012              6.1732016 0.02027722    88.83812 #> 545 2515.1393192     462.34179              6.1645572 0.02027366    88.83833 #> 546 2516.2421112     461.69580              6.1559440 0.02027016    88.83853 #> 547 2517.3447172     461.05215              6.1473619 0.02026671    88.83872 #> 548 2518.4471403     460.41081              6.1388108 0.02026331    88.83892 #> 549 2519.5493831     459.77179              6.1302905 0.02025997    88.83911 #> 550 2520.6514487     459.13505              6.1218007 0.02025668    88.83930 #> 551 2521.7533396     458.50061              6.1133414 0.02025343    88.83948 #> 552 2522.8550586     457.86843              6.1049124 0.02025024    88.83967 #> 553 2523.9566084     457.23852              6.0965135 0.02024710    88.83985 #> 554 2525.0579917     456.61085              6.0881446 0.02024401    88.84002 #> 555 2526.1592109     455.98542              6.0798056 0.02024097    88.84020 #> 556 2527.2602687     455.36221              6.0714961 0.02023797    88.84037 #> 557 2528.3611676     454.74122              6.0632162 0.02023502    88.84054 #> 558 2529.4619100     454.12243              6.0549657 0.02023212    88.84071 #> 559 2530.5624984     453.50582              6.0467443 0.02022926    88.84087 #> 560 2531.6629352     452.89140              6.0385520 0.02022645    88.84103 #> 561 2532.7632227     452.27915              6.0303886 0.02022368    88.84119 #> 562 2533.8633633     451.66905              6.0222540 0.02022095    88.84135 #> 563 2534.9633592     451.06110              6.0141479 0.02021826    88.84150 #> 564 2536.0632127     450.45528              6.0060704 0.02021562    88.84165 #> 565 2537.1629260     449.85158              5.9980211 0.02021302    88.84180 #> 566 2538.2625012     449.25000              5.9900000 0.02021046    88.84195 #> 567 2539.3619406     448.65052              5.9820069 0.02020794    88.84209 #> 568 2540.4612463     448.05313              5.9740417 0.02020545    88.84223 #> 569 2541.5604202     447.45782              5.9661043 0.02020301    88.84237 #> 570 2542.6594646     446.86458              5.9581944 0.02020060    88.84251 #> 571 2543.7583813     446.27340              5.9503120 0.02019824    88.84265 #> 572 2544.8571724     445.68427              5.9424569 0.02019590    88.84278 #> 573 2545.9558398     445.09717              5.9346290 0.02019361    88.84291 #> 574 2547.0543855     444.51211              5.9268281 0.02019135    88.84304 #> 575 2548.1528113     443.92906              5.9190541 0.02018912    88.84317 #> 576 2549.2511191     443.34802              5.9113069 0.02018694    88.84330 #> 577 2550.3493108     442.76898              5.9035864 0.02018478    88.84342 #> 578 2551.4473881     442.19192              5.8958923 0.02018266    88.84354 #> 579 2552.5453529     441.61684              5.8882246 0.02018057    88.84366 #> 580 2553.6432068     441.04373              5.8805831 0.02017851    88.84378 #> 581 2554.7409517     440.47258              5.8729677 0.02017649    88.84389 #> 582 2555.8385891     439.90337              5.8653783 0.02017449    88.84401 #> 583 2556.9361208     439.33610              5.8578147 0.02017253    88.84412 #> 584 2558.0335484     438.77076              5.8502768 0.02017060    88.84423 #> 585 2559.1308736     438.20734              5.8427646 0.02016870    88.84434 #> 586 2560.2280979     437.64583              5.8352777 0.02016683    88.84445 #> 587 2561.3252228     437.08622              5.8278162 0.02016498    88.84455 #> 588 2562.4222501     436.52849              5.8203799 0.02016317    88.84466 #> 589 2563.5191811     435.97265              5.8129687 0.02016138    88.84476 #> 590 2564.6160173     435.41868              5.8055824 0.02015963    88.84486 #> 591 2565.7127603     434.86657              5.7982209 0.02015790    88.84496 #> 592 2566.8094114     434.31631              5.7908842 0.02015619    88.84506 #> 593 2567.9059722     433.76790              5.7835720 0.02015451    88.84515 #> 594 2569.0024440     433.22132              5.7762843 0.02015286    88.84525 #> 595 2570.0988282     432.67657              5.7690209 0.02015124    88.84534 #> 596 2571.1951262     432.13363              5.7617818 0.02014964    88.84543 #> 597 2572.2913392     431.59251              5.7545668 0.02014806    88.84552 #> 598 2573.3874687     431.05318              5.7473757 0.02014651    88.84561 #> 599 2574.4835160     430.51564              5.7402085 0.02014498    88.84570 #> 600 2575.5794822     429.97988              5.7330651 0.02014348    88.84579 #> 601 2576.6753687     429.44589              5.7259453 0.02014200    88.84587"},{"path":"https://mladenjovanovic.github.io/shorts/reference/print.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for printing shorts_model object — print.shorts_model","title":"S3 method for printing shorts_model object — print.shorts_model","text":"S3 method printing shorts_model object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/print.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for printing shorts_model object — print.shorts_model","text":"","code":"# S3 method for shorts_model print(x, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/print.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for printing shorts_model object — print.shorts_model","text":"x shorts_model object ... used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/print.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for printing shorts_model object — print.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) simple_model #> Estimated model parameters #> -------------------------- #>        MSS        TAU        MAC       PMAX  #>  9.7809914  0.7879759 12.4128052 30.3523852  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   0.9999058360  -0.0009531204  -0.1414657044  -0.0233463774  -1.3746162965  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   0.0150464489   0.3893767498   0.0233463774   1.3746162965   0.0145706166  #>      RMSE_perc            MAE       MAE_perc  #>   0.6697267921   0.0132557518   0.4911064946"},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Probe profile functions — probe_functions","title":"Probe profile functions — probe_functions","text":"Family functions serve purpose probing sprint force-velocity profile. done     increasing individual sprint parameter percentage calculating parameter     improvement yield biggest deduction sprint tim probe_FV \"probes\" F0 V0 calculates one     improves sprint time defined distance probe_MSS_MAC \"probes\" MSS MAC calculates one     improves sprint time defined distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probe profile functions — probe_functions","text":"","code":"probe_FV(   distance,   F0,   V0,   bodymass = 75,   inertia = 0,   resistance = 0,   perc = 2.5,   ... )  probe_MSS_MAC(distance, MSS, MAC, perc = 2.5)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probe profile functions — probe_functions","text":"distance Numeric vector F0, V0 Numeric vectors. FV profile parameters bodymass Body mass kg inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) perc Numeric vector. Probing percentage. Default 2.5 percent ... Forwarded predict_power_at_distance purpose calculation air resistance MSS, MAC Numeric vectors. Model parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probe profile functions — probe_functions","text":"probe_FV returns data frame following columns  F0 Original F0 V0 Original F0 bodymass Bodymass inertia Inertia resistance Resistance Pmax Maximal power estimated using F0 * V0 / 4 Pmax_rel Relative maximal power slope FV profile slope distance Distance time Time cover distance probe_perc Probe percentage F0_probe Probing F0 F0_probe_time Predicted time distance F0 probed F0_probe_time_gain Difference time cover distance time_optimal time V0_probe Probing V0 V0_probe_time Predicted time distance V0 probed V0_probe_time_gain Difference time cover distance time_optimal time profile_imb Percent ratio V0_probe_time_gain F0_probe_time_gain probe_MSS_MAC returns data frame following columns  MSS Original MSS MAC Original MAC Pmax_rel Relative maximal power estimated using MSS * MAC / 4 slope Sprint profile slope distance Distance time Time cover distance probe_perc Probe percentage MSS_probe Probing MSS MSS_probe_time Predicted time distance MSS probed MSS_probe_time_gain Difference time cover distance probe time time MAC_probe Probing MAC MAC_probe_time Predicted time distance MAC probed MAC_probe_time_gain Difference time cover distance probing time time profile_imb Percent ratio MSS_probe_time_gain MAC_probe_time_gain","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probe profile functions — probe_functions","text":"","code":"MSS <- 10 MAC <- 8 bodymass <- 75  fv <- create_FVP(MSS, MAC, bodymass)  dist <- seq(5, 40, by = 5)  probe_MSS_MAC_profile <- probe_MSS_MAC(   distance = dist,   MSS,   MAC )[[\"profile_imb\"]]  probe_FV_profile <- probe_FV(   distance = dist,   fv$F0,   fv$V0,   fv$bodymass )[[\"profile_imb\"]]  plot(x = dist, y = probe_MSS_MAC_profile, type = \"l\", ylab = \"Profile imbalance\") lines(x = dist, y = probe_FV_profile, type = \"l\", col = \"blue\") abline(h = 100, col = \"gray\", lty = 2)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/radar_gun_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Radar Gun Data — radar_gun_data","title":"Radar Gun Data — radar_gun_data","text":"Data generated known MSS TAU measurement error N=5 athletes using radar gun     sampling frequency 100Hz 6 seconds.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/radar_gun_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radar Gun Data — radar_gun_data","text":"","code":"data(radar_gun_data)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/radar_gun_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Radar Gun Data — radar_gun_data","text":"Data frame 4 variables 3000 observations: athlete Character string bodyweight Bodyweight kilograms time Time reported radar gun seconds velocity Velocity reported radar gun m/s","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/residuals.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for returning residuals of shorts_model — residuals.shorts_model","title":"S3 method for returning residuals of shorts_model — residuals.shorts_model","text":"S3 method returning residuals shorts_model","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/residuals.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for returning residuals of shorts_model — residuals.shorts_model","text":"","code":"# S3 method for shorts_model residuals(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/residuals.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for returning residuals of shorts_model — residuals.shorts_model","text":"object shorts_model object ... Extra arguments. used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/residuals.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for returning residuals of shorts_model — residuals.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) residuals(simple_model) #> [1] -0.023346377  0.010889131  0.015046449  0.004820999 -0.012175803"},{"path":"https://mladenjovanovic.github.io/shorts/reference/split_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Testing Data — split_times","title":"Split Testing Data — split_times","text":"Data generated known MSS TAU measurement error N=5 athletes using 6 timing gates:     5m, 10m, 15m, 20m, 30m, 40m","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/split_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Testing Data — split_times","text":"","code":"data(split_times)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/split_times.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Split Testing Data — split_times","text":"Data frame 4 variables 30 observations: athlete Character string bodyweight Bodyweight kilograms distance Distance timing gates sprint start meters time Time reported timing gate","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/summary.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for providing summary for the shorts_model object — summary.shorts_model","title":"S3 method for providing summary for the shorts_model object — summary.shorts_model","text":"S3 method providing summary shorts_model object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/summary.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for providing summary for the shorts_model object — summary.shorts_model","text":"","code":"# S3 method for shorts_model summary(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/summary.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for providing summary for the shorts_model object — summary.shorts_model","text":"object shorts_model object ... used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/summary.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for providing summary for the shorts_model object — summary.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) summary(simple_model) #>  #> Formula: time ~ TAU * I(LambertW::W(-exp(1)^(-distance/(MSS * TAU) - 1))) +  #>     distance/MSS + TAU #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|)     #> MSS  9.78099    0.07441  131.44 9.71e-07 *** #> TAU  0.78798    0.02827   27.87 0.000101 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01881 on 3 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08 #>"},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":null,"dir":"Reference","previous_headings":"","what":"Vescovi Timing Gates Sprint Times — vescovi","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"Timing gates sprint times involving 52 female athletes. Timing gates located     5m, 10m, 20m, 30m, 35m. See Details information.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"","code":"data(vescovi)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"Data frame 17 variables 52 observations: Team Team sport. Contains following levels: 'W Soccer' (Women Soccer),    'FH Sr' (Field Hockey Seniors), 'FH U21' (Field Hockey 21), 'FH U17' (Field Hockey 17) Surface Type testing surface. Contains following levels: 'Hard Cours' 'Natural Grass' Athlete Athlete ID Age Athlete age years Height Body height cm Bodyweight Body weight kg BMI Body Mass Index BSA Body Surface Area. Calculated using Mosteller equation sqrt((height/weight)/3600) 5m Time seconds 5m gate 10m Time seconds 10m gate 20m Time seconds 20m gate 30m Time seconds 30m gate 35m Time seconds 35m gate 10m-5m split Split time seconds 10m 5m gate 20m-10m split Split time seconds 20m 10m gate 30m-20m split Split time seconds 30m 20m gate 35m-30m split Split time seconds 35m 30m gate","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"data-set represents sub-set data total 220 high-level female athletes    (151 soccer players 69 field hockey players).  Using random number generator,    total 52 players (35 soccer 17 field hockey) selected data-set.    Soccer players older (24.6±3.6 vs. 18.9±2.7 yr, p < 0.001), however    differences height (167.3±5.9 vs. 167.0±5.7 cm, p = 0.886),    body mass (62.5±5.9 vs. 64.0±9.4 kg, p = 0.500) sprint interval time (p > 0.650). protocol assessing linear sprint speed described previously (Vescovi 2014,    2016, 2012) identical cohort.  Briefly, athletes performed standardized    warm-included general exercises jogging, shuffling, multi-directional movements,    dynamic stretching exercises. Infrared timing gates (Brower Timing, Utah) positioned    start line 5, 10, 20, 35 meters height approximately 1.0 meter.    Participants stood lead foot positioned approximately 5 cm behind initial infrared beam    (.e., start line). forward movement permitted (leaning rocking backwards) timing    started laser starting gate triggered. best 35 m time, associated split    times kept analysis.  assessment linear sprints using infrared timing gates    require familiarization (Moir, Button, Glaister, Stone 2004).","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"Moir G, Button C, Glaister M, Stone MH (2004). \"Influence Familiarization Reliability     Vertical Jump Acceleration Sprinting Performance Physically Active Men.\"     Journal Strength Conditioning Research, 18(2), 276. ISSN 1064-8011, 1533-4287.     doi:10.1519/R-13093.1. Vescovi JD (2012). \"Sprint Speed Characteristics High-Level American Female Soccer     Players: Female Athletes Motion (FAiM) Study.\" Journal Science Medicine     Sport, 15(5), 474-478. ISSN 14402440. doi:10.1016/j.jsams.2012.03.006. Vescovi JD (2014). \"Impact Maximum Speed Sprint Performance High-Level     Youth Female Field Hockey Matches: Female Athletes Motion (FAiM) Study.\" International     Journal Sports Physiology Performance, 9(4), 621-626. ISSN 1555-0265,    1555-0273. doi:10.1123/ijspp.2013-0263. Vescovi JD (2016). \"Locomotor, Heart-Rate, Metabolic Power Characteristics Youth    Women's Field Hockey: Female Athletes Motion (FAiM) Study.\" Research Quarterly    Exercise Sport, 87(1), 68-77. ISSN 0270-1367, 2168-3824.    doi:10.1080/02701367.2015.1124972.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"Jason D. Vescovi     University Toronto     Faculty Kinesiology Physical Education     Graduate School Exercise Science     Toronto, Canadavescovij@gmail.com","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-2509000","dir":"Changelog","previous_headings":"","what":"shorts 2.5.0.9000","title":"shorts 2.5.0.9000","text":"Fixed sign error get_air_resistance() function head wind tail wind returned resistance. Fixed error make_FV_profile() function estimating force-velocity profile wind conditions. Renamed function create_FVP() Fixed error convert_FV() function converting force-velocity profile back acceleration-velocity profile wind conditions. Renamed function convert_FVP() Renamed output predict_kinematics() function relative_power power_relative alignment variables Added predict_work_till_time() predict_work_till_distance() calculate horizontal work performance. Added work, average_power, average_power_relative output predict_kinematics() function, removed net_horizontal_force output avoid confusion whether inertia included . Updated internal shorts_model_fit() function return model fit metrics absolute percentage forms Added internal model_sprint() wrapper function updated internal new_shorts_model() constructor provide changes model output format (\"shorts_model\" class). create BREAK CHANGE previous versions shorts package Rewritten model_radar_gun() added alias model_laser_gun() function Rewritten model_timing_gates(), model_timing_gates_TC(), model_timing_gates_FD(), model_timing_gaes_FD_TC(), functions. Now TC parameter positive sign Rewritten model_tether() model_tether_DC() functions Added LPS_session dataset. dataset represents sample data provided Local Positioning System (LPS) single individual performing single basketball practice session (aprox. 90min). Sampling frequency 20Hz. Added model_in_situ() function performs embedded (.e., -situ) analysis session monitoring data using GPS LPS systems provide instantaneous acceleration velocity. Added dynaspeed dataset Updated S3 print plot methods \"shorts_model\" class. plot method now plots four different types plots, depending type argument: “model” (default), “kinematics-time”, “kinematics-distance”, “residuals” Updated README cover changes","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-250","dir":"Changelog","previous_headings":"","what":"shorts 2.5.0","title":"shorts 2.5.0","text":"CRAN release: 2023-11-21 Added inertia (mass; kg) resistance (force; Newtons) predict_force_, predict_power_, predict_relative_power_, well predict_kinematics() functions. increases ability {shorts} package deal external resistance, like weight vest, sled, tether devices. Modified predict_kinematics() function include inertia (mass; kg) resistance (force; Newtons) parameters, well allow user either provide shorts_model object, provide MSS MAC parameters. Additional parameter add_inertia_to_vertical allow user decided whether inertia added bodymass calculating vertical force. Added predict_force_at_velocity() function Modified find_max_power_ find_power_critial_ function add support inertia (mass; kg) resistance (force; Newtons) parameters Simplified make_FV_profile() function added support inertia (mass; kg) resistance (force; Newtons) parameters. Removed S3 print plot methods, well class type involving function Made internal convert_FV() function available users added support inertia (mass; kg) resistance (force; Newtons) parameters Updated predict_time_at_distance_FV() function use simpler convert_FV() function Renamed find_max_power functions find_peak_power avoid confusion Pmax Ppeak Implemented inertia (mass; kg) resistance (force; Newtons) optimal_FV() function Implemented inertia (mass; kg) resistance (force; Newtons) probe_FV() function added model_tether_DC() function additional distance correction (DC) parameter estimate. DC parameter serves intercept distance doesn’t start zero","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-240","dir":"Changelog","previous_headings":"","what":"shorts 2.4.0","title":"shorts 2.4.0","text":"CRAN release: 2023-03-13 Removed “Suggest” package DESCRIPTION file Added use_observed_MSS parameter model_radar_gun() model_tether() functions. allows user estimate MSS parameter observed data Add FD parameter model_timing_gates_FD() model_timing_gates_FD_TC() functions, allow user provide fixed FD parameter value. Updated README.Rmd file example use feature. Also added reference published article previously available pre-print. Changed generic predict() function return fitted values, use generic predict method object. allows user use newdata parameter. Added fitted() method return fitted values instead","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-230","dir":"Changelog","previous_headings":"","what":"shorts 2.3.0","title":"shorts 2.3.0","text":"CRAN release: 2022-10-29 Moved optimal profile functions “optional-functions.R” file, accompanying documentation name Renamed FV_slope_perc profile_imb output optimal_ functions functions find_optimal_FV() find_optimal_FV_peak() now wrapped inside optimal_FV, method selected using method parameter (“max” find_optimal_FV() “peak” find_optimal_FV_peak()). Please refer examples Probing analysis now removed optimal_ functions moved probe_FV() probe_MSS_MAC() functions. Please refer examples Finding distance profile optimal now done using find_optimal_distance() function can take optimal probe functions parameter. Please refer examples Removed bug find_optimal_FV_peak() (now implemented find_optimal_FV() function using method=\"peak\" parameter) information needed calculate air resistance forwarded","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-220","dir":"Changelog","previous_headings":"","what":"shorts 2.2.0","title":"shorts 2.2.0","text":"Expanded results output find_optimal_MSS_MAC() find_optimal_FV() functions. columns renamed better clarity Added internal function convert_FV() convert FV profile sprint profile. used calculate Peak Power (Ppeak) metric location Added min_func parameter find_optimal_MSS_MAC_distance() find_optimal_FV_distance(). allows optimize using metric Added find_optimal_FV_peak() function, optimize profile keeping Peak Power . Accompanying find_optimal_FV_peak_distance() also added Added extra reference DESCRIPTION","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-210","dir":"Changelog","previous_headings":"","what":"shorts 2.1.0","title":"shorts 2.1.0","text":"CRAN release: 2022-09-26 Added mean acceleration distance format_splits() Added model_tether() function modeling data output tether devices, involve velocity distance Change Pmax_relative Pmax_rel output make_FV_profile() function Added analytically/polynomially estimated F0_poly, F0_poly_rel, V0_poly, Pmax_poly, Pmax_poly_rel, FV_slope_poly output make_FV_profile() function using method outlined Pierre Samozino Nicolas Peyror, et al (2021) <doi: 10.1111/sms.14097> Added predict_time_at_distance_FV() uses FV profile’s F0 V0 predict time distance. info see Pierre Samozino Nicolas Peyror, et al (2021) <doi: 10.1111/sms.14097> Added optimization functions: find_optimal_MSS_MAC(), find_optimal_MSS_MAC_distance(), find_optimal_FV(), find_optimal_FV_distance(). info FV optimization see Pierre Samozino Nicolas Peyror, et al (2021) <doi: 10.1111/sms.14097> Removed DOI citation info","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-200","dir":"Changelog","previous_headings":"","what":"shorts 2.0.0","title":"shorts 2.0.0","text":"CRAN release: 2022-07-07 NEW version {shorts} package INCOMPATIBLE previous due drastic changes functions. changes utilized: Removed mixed-effects function due small usage practice. predict_ functions, time_correction distance_correction longer used, since due novel models estimation, hard neatly implement functions. Now predict_ functions predict scale sprint starts t=0 d=0, rather original (data) scale. also remove confusion user. predict_ functions, user now uses MSS MAC parameters Changed non-linear regression estimation function stats::nls() minpack.lm::nlsLM() model_ functions. done avoid “singular gradient” error inability stats::nls() estimate zero residuals. Please make note now use ... model_ function, forwarded minpack.lm::nlsLM(). using control = stats::nls.control(warnOnly = TRUE) avoid stats::nls() throw error fitting zero residuals, now can remove . needed use control = minpack.lm::nls.lm.control() instead. Added create_timing_gates_splits() function generate timing gates splits modeling timing gates, following functions now available: model_timing_gates(), model_timing_gates_TC(), model_timing_gates_FD(), model_timing_gates_FD_TC(). functions removed modeling radar gun data, now one function model_radar_gun() also estimates time correction (TC) parameter. Function model_radar_gun() feature n-folds cross-validation, opposed model_timing_gates() family functions, features leave-one-cross-validation (LOOCV) due small number observations. Using CV parameter, set n-fold cross-validations model_radar_gun() function. Renamed element LOOCV shorts_model object CV reflect changes model_radar_gun() function Removed vignettes. working better pre-print well one peer-reviewed simulation paper reference instead","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-116","dir":"Changelog","previous_headings":"","what":"shorts 1.1.6","title":"shorts 1.1.6","text":"CRAN release: 2021-07-19 Updated documentation regarding mentioned potential issues IMPORTANT: model_using_splits_with_distance_correction() function predict_XXX_at_distance() family functions doesn’t work correctly distance_correction used parameter (.e., different zero). model definition completely different, predicting distance scale possible. Please refer Jovanović, M., Vescovi, J.D. (2020) information. Jovanović, M., Vescovi, J.D. (2020). shorts: R Package Modeling Short Sprints. Preprint available SportRxiv. https://doi.org/10.31236/osf.io/4jw62","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-115","dir":"Changelog","previous_headings":"","what":"shorts 1.1.5","title":"shorts 1.1.5","text":"CRAN release: 2021-07-02 Fixed wrong error message plot.shorts_fv_profile() function Minor model print aesthetic changes Fixed calculation residuals, now correctly calculated using observed - predicted. calculation implemented residuals() S3 method, well internal function shorts_model_fit() provides model fit estimates (.e. RMSE, MAE, MAPE) Fixed calculation residuals vignette Added model_using_splits_with_distance_correction() function implements novel model definition estimate flying start distance Added mixed_model_using_splits_with_distance_correction() function implements novel model definition estimate flying start distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-114","dir":"Changelog","previous_headings":"","what":"shorts 1.1.4","title":"shorts 1.1.4","text":"CRAN release: 2020-11-29 Added ggplot2 tidyr package dependency implemented S3 plotting functions get_FV_profile now return object class shorts_fv_profile Added S3 print plot methods shorts_fv_profile object Renamed column force relative_force horizontal_force relative_horizontal_force shorts_fv_profile object data frame returned predict_kinematics Added acceleration, bodymass, net_horizontal_force, air_resistance, vertical_force, resultant_force_relative, power, force_angle shorts_fv_profile object data frame returned predict_kinematics Improved examples README.Rmd Added S3 plot method shorts_model shorts_mixed_model objects","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-113","dir":"Changelog","previous_headings":"","what":"shorts 1.1.3","title":"shorts 1.1.3","text":"CRAN release: 2020-10-29 Added sample radar gun data Jean-Benoît Morin Microsoft Excel spreadsheet, freely available website (accessed October 27, 2020)). information ?jb_morin Added get_FV_profile generating Force-Velocity profile summary using Pierre Samozino Jean-Benoît Morin method (DOI:10.1111/sms.12490)","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-112","dir":"Changelog","previous_headings":"","what":"shorts 1.1.2","title":"shorts 1.1.2","text":"CRAN release: 2020-10-13 Added get_air_resistance function estimate air resistance newtons Added predict_air_resistance_at_time predict_air_resistance_at_time functions Added predict_force_at_time predict_force_at_distance functions Added predict_power_at_time predict_power_at_distance functions Now power calculations predict_relative_power_at_distance predict_relative_power_at_time use air resistance calculations. default bodymass 75kg. replicate earlier function behavior, use predict_velocity_at_ multiplied predict_acceleration_at_ get relative power without air resistance Function predict_kinematics now uses aforementioned changes predict_relative_power_ functions, added force air resistance output Functions find_max_power_distance find_power_critical_distance now uses aforementioned changes returns absolute power, rather relative, air resistance used power calculations Added find_max_power_time, find_velocity_critical_time, find_acceleration_critical_time, find_power_critical_time functions Added model_using_radar_with_time_correction time_correction parameter estimated Added mixed_model_using_radar_with_time_correction time_correction parameter estimated","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-111","dir":"Changelog","previous_headings":"","what":"shorts 1.1.1","title":"shorts 1.1.1","text":"CRAN release: 2020-09-11 Added James Vescovi contributed dataset (data(\"vescovi\")). info see ?vescovi","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-110","dir":"Changelog","previous_headings":"","what":"shorts 1.1.0","title":"shorts 1.1.0","text":"CRAN release: 2020-07-28 Used constructor functions modeling functions Added modular short_model_fit function three extra estimators: MAE, MAPE, MaxAbsErr. function hidden user, allows easier extension modularity well avoidance code repetition Added time_correction distance_correction model parameters output align Added S3 predict_kinematics function predicts 0-6s distance (100Hz), velocity, acceleration, relative power Added S3 print, coef, summary, predict, residuals methods Added LOOCV option modeling functions provided cross-validated predictions estimated model parameters Added random parameter mixed_ family functions allow higher flexibility model definitions, removed corrections_as_random_effects parameter. default behavious use parameters random effects. Added ... model_using_radar mixed_model_using_radar forwarded nlme::nlme Expanded Readme.md file Expanded sprint-corrections vignette adding short simulation study","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-101","dir":"Changelog","previous_headings":"","what":"shorts 1.0.1","title":"shorts 1.0.1","text":"CRAN release: 2020-05-08 Corrected error vignette showed Solaris system. Increased random noise allow nls fit","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-100","dir":"Changelog","previous_headings":"","what":"shorts 1.0.0","title":"shorts 1.0.0","text":"CRAN release: 2020-05-05 Renamed time_delay time_correction shorts::model_using_instant_velocity shorts::mixed_model_using_instant_velocity functions consistent across functions. Also, correction added time, use negative numbers instead time_correction shorts::mixed_model_using_instant_velocity shorts::mixed_model_using_split_times now numeric vector, column name Implemented time_correction shorts::model_using_split_times shorts::mixed_model_using_split_times Implemented time_correction shorts:predict_ family functions Implemented distance_correction shorts:predict_ family functions Implemented estimation time_correction shorts::model_using_split_times_with_time_correction shorts::mixed_model_using_split_times_with_time_correction Implemented estimation distance_correction shorts::model_using_split_times_with_corrections shorts::mixed_model_using_split_times_with_corrections Fixed error calculating PMAX shorts::mixed_model_ functions Removed maxAbsErr model_fit element Wrote “sprint-corrections” vignette explaining idea behind sprint time distance corrections Implemented find_ family functions finding max power critical distance velocity acceleration reaches certain threshold Implemented ... modeling functions extra parameters can forwarded optimization engine Data split_times recreated using distance shift behind first timing gate. Needed demo mixed models corrections Renamed _model_using_instant_velocity _model_using_radar Renamed _model_using_split_times_ _model_using_splits_","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-001","dir":"Changelog","previous_headings":"","what":"shorts 0.0.1","title":"shorts 0.0.1","text":"CRAN release: 2020-04-23 Initial version core functionalities package submitted CRAN 2020-04-17. (commit b59402c9c5)","code":""}]

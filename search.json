[{"path":"https://mladenjovanovic.github.io/shorts/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Mladen Jovanović Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mladen Jovanović. Author, maintainer, copyright holder.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jovanović M (2024). shorts: Short Sprints. R package version 3.3.0, https://CRAN.R-project.org/package=shorts.","code":"@Manual{shorts-package,   title = {{shorts}: Short Sprints},   author = {Mladen Jovanović},   year = {2024},   note = {R package version 3.3.0},   url = {https://CRAN.R-project.org/package=shorts}, }"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"shorts-","dir":"","previous_headings":"","what":"Short Sprints","title":"Short Sprints","text":"{shorts} R package aimed analysis un-resisted resisted short sprints (<6sec; without deceleration), creation acceleration-velocity profiles (AVP), force-velocity profiles (FVP), optimization profiles using variety sprint traces (e.g., time-velocity laser/radar gun, distance-time timing gates/photocells). represents simple use tool researcher practitioners interested modeling short sprints performance.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Short Sprints","text":"","code":"# Install from CRAN install.packages(\"shorts\")  # Or the development version from GitHub # install.packages(\"remotes\") remotes::install_github(\"mladenjovanovic/shorts\")"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Short Sprints","text":"{shorts} comes multiple sample data sets. Let’s load split_times radar_gun_data N=5 athletes:","code":"library(shorts) library(tidyverse) library(knitr)  data(\"split_times\", \"radar_gun_data\")"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"profiling-using-split-times","dir":"","previous_headings":"Examples","what":"Profiling using split times","title":"Short Sprints","text":"{shorts} package utilizes modified mono-exponential functions model short sprint performance. model sprint performance using split times, distance used predictor time target. Since split_times dataset contains data multiple athletes, let’s extract one athlete model using shorts::model_timing_gates() function. Parameters estimated using mono-exponential equation maximal sprinting speed (MSSMSS), maximal acceleration (MAC). Additional parameters computed MSSMSS MACMAC relative acceleration (TAUTAU) maximal relative power (PMAXPMAX) (calculated MAC⋅MSS÷4MAC \\cdot MSS\\div4). return predicted/fitted values (case time variable), use predict() function: create simple plot use S3 plot() method. four type options: \"model\" (default), \"kinematics-time\", \"kinematics-distance\", \"residuals\":     interested calculating average split velocity, use shorts::format_splits() plot predicted velocity, acceleration, air resistance, force, power distance, use shorts:predict_XXX(). Please note calculate force, air resistance, power, need Kimberley’s bodymass height (well characteristics air pressure, temperature wind - see get_air_resistance() function).  prediction simpler, use shorts::predict_kinematics() function. provide kinetics kinematics 0-6 ss sprint using 100 HzHz. get model residuals, use residuals() function: Package {shorts} comes find_XXX() family functions allow finding peak power ’s location, well critical distance velocity, acceleration, power drops certain threshold:","code":"kimberley_data <- filter(split_times, athlete == \"Kimberley\")  kable(kimberley_data) kimberley_profile <- shorts::model_timing_gates(   distance = kimberley_data$distance,   time = kimberley_data$time )  kimberley_profile #> Estimated model parameters #> -------------------------- #>    MSS    MAC    TAU   PMAX  #>  8.591 10.589  0.811 22.743  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr  #>        0.99966       -0.00309       -0.53860       -0.05293  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>       -4.57121        0.02699        0.85715        0.05293  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>        4.57121        0.02779        1.93922        0.02333  #>       MAE_perc  #>        1.19263  summary(kimberley_profile) #>  #> Formula: time ~ predict_time_at_distance(distance, MSS, MAC) #>  #> Parameters: #>     Estimate Std. Error t value   Pr(>|t|)     #> MSS    8.591      0.123    70.1 0.00000025 *** #> MAC   10.589      0.460    23.0 0.00002108 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.034 on 4 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 0.0000000149  coef(kimberley_profile) #>   MSS   MAC  #>  8.59 10.59  confint(kimberley_profile, level = 0.95) #>     2.5% 97.5% #> MSS 8.27  8.96 #> MAC 9.42 12.02 predict(kimberley_profile) #> [1] 1.21 1.90 2.52 3.12 4.30 5.47 plot(kimberley_profile) plot(kimberley_profile, \"kinematics-time\") plot(kimberley_profile, \"kinematics-distance\") plot(kimberley_profile, \"residuals\") kable(shorts::format_splits(   distance = kimberley_data$distance,   time = kimberley_data$time )) kimberley_bodymass <- 60 # in kilograms kimberley_bodyheight <- 1.7 # in meters  kimberley_pred <- tibble(   distance = seq(0, 40, length.out = 1000),    # Velocity   pred_velocity = shorts::predict_velocity_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU   ),    # Acceleration   pred_acceleration = shorts::predict_acceleration_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU   ),    # Air resistance   pred_air_resistance = shorts::predict_air_resistance_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU,     bodymass = kimberley_bodymass,     bodyheight = kimberley_bodyheight   ),    # Force   pred_force = shorts::predict_force_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU,     bodymass = kimberley_bodymass,     bodyheight = kimberley_bodyheight   ),    # Power   pred_power = shorts::predict_power_at_distance(     distance,     kimberley_profile$parameters$MSS,     kimberley_profile$parameters$TAU,     bodymass = kimberley_bodymass,     bodyheight = kimberley_bodyheight   ), )  # Convert to long kimberley_pred <- gather(kimberley_pred, \"metric\", \"value\", -distance)  ggplot(kimberley_pred, aes(x = distance, y = value)) +   geom_line() +   facet_wrap(~metric, scales = \"free_y\") +   xlab(\"Distance (m)\") +   ylab(NULL) predicted_kinematics <- predict_kinematics(   kimberley_profile,   bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight )  kable(head(predicted_kinematics)) residuals(kimberley_profile) #> [1] -0.05293 -0.00402  0.01997  0.02699  0.01376 -0.02232 # Peak power and location shorts::find_peak_power_distance(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,    bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight ) #> $peak_power #> [1] 1384 #>  #> $distance #> [1] 1.42  # Distance over which power is over 80% shorts::find_power_critical_distance(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,    bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight,   percent = 0.8 ) #> $lower #> [1] 0.342 #>  #> $upper #> [1] 4.27  # Distance over which acceleration is under 50% shorts::find_acceleration_critical_distance(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,   percent = 0.5 ) #> [1] 1.35  # Distance over which velocity is over 95% shorts::find_velocity_critical_distance(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,   percent = 0.95 ) #> [1] 14.3"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"profiling-using-radar-gun-data","dir":"","previous_headings":"Examples","what":"Profiling using radar gun data","title":"Short Sprints","text":"radar gun data modeled using measured velocity target variable time predictor. Individual analysis performed using shorts::model_radar_gun() function shorts::model_laser_gun() (aliases). Let’s analysis Jim:  addition MSSMSS MACMAC parameters, shorts::model_radar_gun() function also estimated time-correction (TCTC) parameter. Rather estimating MSSMSS, shorts::model_radar_gun() function allows utilize peak velocity observed data MSSMSS. done setting use_observed_MSS parameter TRUE:","code":"jim_data <- filter(radar_gun_data, athlete == \"Jim\")  jim_profile <- shorts::model_radar_gun(   time = jim_data$time,   velocity = jim_data$velocity )  jim_profile #> Estimated model parameters #> -------------------------- #>    MSS    MAC    TAU   PMAX  #>  7.998  8.999  0.889 17.993  #>  #> Estimated model corrections #> -------------------------- #>       TC  #> -0.00011  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr  #>   0.9992440860  -0.0000000248           -Inf  -0.1640450506  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>           -Inf   0.1511233656   2.3325106593   0.1640450506  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>            Inf   0.0505025383            Inf   0.0392723633  #>       MAE_perc  #>            Inf  summary(jim_profile) #>  #> Formula: velocity ~ predict_velocity_at_time(time - TC, MSS, MAC) #>  #> Parameters: #>     Estimate Std. Error t value            Pr(>|t|)     #> MSS  7.99801    0.00319 2504.55 <0.0000000000000002 *** #> MAC  8.99871    0.01997  450.61 <0.0000000000000002 *** #> TC  -0.00011    0.00123   -0.09                0.93     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.0506 on 597 degrees of freedom #>  #> Number of iterations to convergence: 4  #> Achieved convergence tolerance: 0.0000000149  confint(jim_profile) #>         2.5%   97.5% #> MSS  7.99175 8.00429 #> MAC  8.95959 9.03797 #> TC  -0.00253 0.00229  plot(jim_profile) jim_profile <- shorts::model_radar_gun(   time = jim_data$time,   velocity = jim_data$velocity,   use_observed_MSS = TRUE )  jim_profile #> Estimated model parameters #> -------------------------- #>    MSS    MAC    TAU   PMAX  #>  8.095  8.678  0.933 17.563  #>  #> Estimated model corrections #> -------------------------- #>      TC  #> -0.0112  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr  #>         0.9988        -0.0388           -Inf        -0.2287  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>           -Inf         0.1825         2.8174         0.2287  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>            Inf         0.0798            Inf         0.0643  #>       MAE_perc  #>            Inf  summary(jim_profile) #>  #> Formula: velocity ~ predict_velocity_at_time(time - TC, MSS, MAC) #>  #> Parameters: #>     Estimate Std. Error t value             Pr(>|t|)     #> MSS  8.09500    0.00521 1554.10 < 0.0000000000000002 *** #> MAC  8.67822    0.03017  287.60 < 0.0000000000000002 *** #> TC  -0.01118    0.00203   -5.52          0.000000051 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.08 on 597 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 0.0000000149"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"profiling-using-tether-devices","dir":"","previous_headings":"Examples","what":"Profiling using tether devices","title":"Short Sprints","text":"tether devices provide data velocity--distance format. case, velocity outcome variable distance predictor. estimate sprint profiles tether data, use shorts::model_tether() function.  Setting use_observed_MSS parameter TRUE shorts::model_tether() function also allows use observed peak velocity MSSMSS. case distance centered zero, use shorts::model_tether_DC() also estimated distance correction (DCDC) parameter, serving model intercept (info see Using corrections section):","code":"# This creates sprint trace tether_df <- shorts::create_sprint_trace(   MSS = 7, MAC = 6,   time = seq(0.01, 6, by = 0.01))  m1 <- model_tether(   distance = tether_df$distance,   velocity = tether_df$velocity)  m1 #> Estimated model parameters #> -------------------------- #>   MSS   MAC   TAU  PMAX  #>  7.00  6.00  1.17 10.50  #>  #> Model fit estimators #> -------------------- #>                    R2               meanErr  #>  0.999999999999999778  0.000000000000000464  #>          meanErr_perc                minErr  #>  0.000000000000849181 -0.000000000000038081  #>           minErr_perc                maxErr  #> -0.000000000032006657  0.000000000000298428  #>           maxErr_perc             maxAbsErr  #>  0.000000000499514588  0.000000000000298428  #>        maxAbsErr_perc                  RMSE  #>  0.000000000499514588  0.000000000000012599  #>             RMSE_perc                   MAE  #>  0.000000000020448893  0.000000000000001438  #>              MAE_perc  #>  0.000000000000981334  plot(m1) # This creates sprint trace tether_df <- shorts::create_sprint_trace(   MSS = 7, MAC = 6,   time = seq(0.001, 6, by = 0.01),    # Add distance shift   DC = 5)  m1 <- model_tether_DC(   distance = tether_df$distance,   velocity = tether_df$velocity)  m1 #> Estimated model parameters #> -------------------------- #>   MSS   MAC   TAU  PMAX  #>  7.00  6.00  1.17 10.50  #>  #> Estimated model corrections #> -------------------------- #> DC  #>  5  #>  #> Model fit estimators #> -------------------- #>               R2          meanErr     meanErr_perc  #>  1.0000000000000  0.0000000000648  0.0000008098034  #>           minErr      minErr_perc           maxErr  #> -0.0000000000152 -0.0000000002897  0.0000000287380  #>      maxErr_perc        maxAbsErr   maxAbsErr_perc  #>  0.0004791725496  0.0000000287380  0.0004791725496  #>             RMSE        RMSE_perc              MAE  #>  0.0000000011812  0.0000195628726  0.0000000000741  #>         MAE_perc  #>  0.0000008099718  plot(m1)"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"embedded-ie-in-situ-profiling","dir":"","previous_headings":"Examples","what":"Embedded (i.e., in-situ) Profiling","title":"Short Sprints","text":"modern technologies like GPS LPS, session acceleration velocity can tracked continuously. provides opportunity estimate short sprint profiles -situ, without need explicit testing (assuming maximal effort performed). analysis based theoretical model acceleration velocity linear relationship (.e., mono-exponential model applied thus far). time frame analysis can vary single drills (e.g., sprint drills), session, week, multiple weeks. example data collected one basketball session single person. Duration approx. 90 min 20 HzHz sampling rate. positional data:  next figure plots instant acceleration velocity:  estimate embedded short sprint profile, need filter positive acceleration velocities 3 ms−1ms{-1} (default), filter top acceleration observations per velocity bracket (information please see Clavel et al. (2023)). graphical representation:","code":"data(\"LPS_session\")  LPS_session %>%   ggplot(aes(x = x, y = y)) +   geom_point(alpha = 0.1) LPS_session %>%   ggplot(aes(x = velocity, y = acceleration)) +   geom_point(alpha = 0.1) embedded_model <- model_in_situ(   LPS_session$velocity,   LPS_session$acceleration,   velocity_threshold = 4)                                  LPS_session %>%   filter(acceleration > 0) %>%   ggplot(aes(x = velocity, y = acceleration)) +   geom_point(alpha = 0.1) +   geom_point(     data = embedded_model$data,      color = \"red\"   ) +   geom_abline(     intercept = embedded_model$parameters$MAC,     slope = -embedded_model$parameters$MAC / embedded_model$parameters$MSS,     linetype = \"dotted\", color = \"red\") +   scale_x_continuous(expand = c(0, 0), limits = c(0, embedded_model$parameters$MSS)) +   scale_y_continuous(expand = c(0, 0), limits = c(0, embedded_model$parameters$MAC))"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"force-velocity-profiling","dir":"","previous_headings":"Examples","what":"Force-Velocity Profiling","title":"Short Sprints","text":"estimate Force-Velocity Profile (FVP) using approach Samozino et al. (2016, 2022) use shorts::create_FVP(): convert back Acceleration-Velocity Profile (AVP), use:","code":"kimberley_fv <- shorts::create_FVP(   MSS = kimberley_profile$parameters$MSS,   MAC = kimberley_profile$parameters$MAC,   # These are needed to estimate air resistance   bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight )  kimberley_fv #> $bodymass #> [1] 60 #>  #> $F0 #> [1] 635 #>  #> $F0_rel #> [1] 10.6 #>  #> $V0 #> [1] 8.85 #>  #> $Pmax #> [1] 1405 #>  #> $Pmax_rel #> [1] 23.4 #>  #> $FV_slope #> [1] -1.2 kimberley_avp <- shorts::convert_FVP(   F0 = kimberley_fv$F0,   V0 = kimberley_fv$V0,   bodymass = kimberley_bodymass,   bodyheight = kimberley_bodyheight )  kimberley_avp #> $MSS #> [1] 8.59 #>  #> $MAC #> [1] 10.6"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"using-external-load","dir":"","previous_headings":"Examples > Force-Velocity Profiling","what":"Using external load","title":"Short Sprints","text":"{shorts} package also allows utilizing external load estimating FVP, well using FVP parameters predict kinematic kinetic variables. External load represented either additional inertia (.e., weight vest), horizontal resistance (.e., tether device create additional resistance help, hill sprinting), (.e., sled, inertia resistance due friction forces). One might also consider head tail wind form resistance (assistance). Let’s see theoretical model, assuming FVP determinant performance (agree , BTW), predicts changes sprint characteristics (.e., MSSMSS MACMAC) different external load conditions magnitudes using Kimberley’s estimated FVP:  Following figure depicts effect split times different load types magnitudes, assuming FVP determinant performance (.e., causal mechanism):  One can use external resistance predicting force power: External resistances can also utilized Optimization functions, covered later.","code":"loads_df <- rbind(   tibble(type = \"Weight vest\", magnitude = seq(0, 20, length.out = 100), inertia = magnitude, resistance = 0),   tibble(type = \"Tether\", magnitude = seq(-50, 200, length.out = 100), inertia = 0, resistance = magnitude),   tibble(type = \"Sled\", magnitude = seq(0, 40, length.out = 100), inertia = magnitude, resistance = magnitude * 9.81 * 0.4) ) %>%   mutate(     data.frame(shorts::convert_FVP(       F0 = kimberley_fv$F0,       V0 = kimberley_fv$V0,       bodymass = kimberley_bodymass,       bodyheight = kimberley_bodyheight,       inertia = inertia,       resistance = resistance     ))   )   loads_df %>%   pivot_longer(cols = c(MSS, MAC), names_to = \"parameter\") %>%   ggplot(aes(x = magnitude, y = value, color = parameter)) +   geom_vline(xintercept = 0, linetype = \"dotted\") +   geom_line() +   facet_wrap(~type, scales = \"free_x\") +   ylab(NULL) dist_df <- expand_grid(   loads_df,   distance = c(5, 10, 20, 30, 40) ) %>%   mutate(     time = predict_time_at_distance(distance, MSS, MAC),     distance = factor(       paste0(distance, \"m\"), levels = c(\"5m\", \"10m\", \"20m\", \"30m\", \"40m\"))   )   dist_df %>%   ggplot(aes(x = magnitude, y = time, color = distance)) +   geom_vline(xintercept = 0, linetype = \"dotted\") +   geom_line() +   facet_wrap(~type, scales = \"free_x\") +   ylab(\"Time (s)\") shorts::predict_force_at_time(   time = 0.5,   MSS = 9,   MAC = 7,   bodymass = 75,   inertia = 20,   resistance = 50) #> [1] 503  shorts::predict_power_at_time(   time = 0.5,   MSS = 9,   MAC = 7,   bodymass = 75,   inertia = 20,   resistance = 50) #> [1] 1459  shorts::predict_time_at_distance_FV(   distance = 10,   F0 = 750,   V0 = 8,   bodymass = 75,   inertia = 20,   resistance = 50) #> [1] 2.26"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"using-corrections","dir":"","previous_headings":"Examples","what":"Using corrections","title":"Short Sprints","text":"probably noticed estimated MSSMSS TAUTAU bit high splits data. Biased estimates due differences starting positions timing triggering methods certain measurement approaches (e.g. starting behind first timing gate, allowing body rocking). provide quick summary (see Jovanović M., 2023). Often, bias estimates dealt using heuristic rule thumb adding time correction (time_correction) split times (e.g. 0.3-0.5 secsec; see Haugen et al., 2012). , just add time correction time split: Instead providing TC, parameter can estimated using shorts::model_timing_gates_TC(). Instead estimating TC, {shorts} package features method estimating flying start distance (FD): want use fixed FD parameter (e.g., know flying distance), use shorts::model_timing_gates_FD_fixed() function: corrections involving time correction (TC), distance correction (DC), flying distance correction (FD), time distance corrections (TC+DC). implemented model_timing_gates_ model_time_distance_ functions. difference model_timing_gates_ model_time_distance_ reversing predictor outcome variables.","code":"kimberley_profile_fixed_TC <- shorts::model_timing_gates(   distance = kimberley_data$distance,   time = kimberley_data$time + 0.3 )  kimberley_profile_fixed_TC #> Estimated model parameters #> -------------------------- #>   MSS   MAC   TAU  PMAX  #>  9.13  6.63  1.38 15.12  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr  #>        0.99997        0.00101        0.12559       -0.00769  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>       -0.22296        0.01640        1.12474        0.01640  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>        1.12474        0.00814        0.47704        0.00639  #>       MAE_perc  #>        0.28570  summary(kimberley_profile_fixed_TC) #>  #> Formula: time ~ predict_time_at_distance(distance, MSS, MAC) #>  #> Parameters: #>     Estimate Std. Error t value     Pr(>|t|)     #> MSS   9.1278     0.0536     170 0.0000000071 *** #> MAC   6.6257     0.0657     101 0.0000000579 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.00997 on 4 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 0.0000000149  coef(kimberley_profile_fixed_TC) #>  MSS  MAC  #> 9.13 6.63 kimberley_profile_TC <- shorts::model_timing_gates_TC(   distance = kimberley_data$distance,   time = kimberley_data$time )  kimberley_profile_TC #> Estimated model parameters #> -------------------------- #>   MSS   MAC   TAU  PMAX  #>  8.97  7.27  1.23 16.31  #>  #> Estimated model corrections #> -------------------------- #>     TC  #> -0.235  #>  #> Model fit estimators #> -------------------- #>               R2          meanErr     meanErr_perc  #>  0.9999996942338  0.0000000000185  0.0018162748771  #>           minErr      minErr_perc           maxErr  #> -0.0011807344888 -0.0623737183716  0.0012094657303  #>      maxErr_perc        maxAbsErr   maxAbsErr_perc  #>  0.0597477188383  0.0012094657303  0.0623737183716  #>             RMSE        RMSE_perc              MAE  #>  0.0007983564900  0.0374822377932  0.0006586033619  #>         MAE_perc  #>  0.0282353234295 kimberley_profile_FD <- shorts::model_timing_gates_FD(   distance = kimberley_data$distance,   time = kimberley_data$time )  kimberley_profile_FD #> Estimated model parameters #> -------------------------- #>   MSS   MAC   TAU  PMAX  #>  9.00  6.99  1.29 15.74  #>  #> Estimated model corrections #> -------------------------- #>    FD  #> 0.302  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr  #>    0.999999963    0.000000645    0.000318263   -0.000403616  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>   -0.012817270    0.000455703    0.010565804    0.000455703  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>    0.012817270    0.000275866    0.008402638    0.000236754  #>       MAE_perc  #>    0.007829105 kimberley_profile_fixed_FD <- shorts::model_timing_gates_FD_fixed(   distance = kimberley_data$distance,   time = kimberley_data$time,   FD = 0.5 )  kimberley_profile_fixed_FD #> Estimated model parameters #> -------------------------- #>   MSS   MAC   TAU  PMAX  #>  9.18  6.23  1.47 14.30  #>  #> Estimated model corrections #> -------------------------- #>  FD  #> 0.5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr  #>        0.99997        0.00125        0.17740       -0.00790  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>       -0.25099        0.01546        1.33523        0.01546  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>        1.33523        0.00794        0.56493        0.00672  #>       MAE_perc  #>        0.34991"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"cross-validation-cv","dir":"","previous_headings":"Examples","what":"Cross-Validation (CV)","title":"Short Sprints","text":"model_ family functions come CV feature performed setting function parameter CV desired number folds. feature useful checking model parameters robustness model predictions unseen data. Let’s use Kimberley , time perform special kind CV, leave-one--cross-validation (LOOCV): Radar gun data often comes much observations, thus can set smaller CV parameter:","code":"kimberley_profile_CV <- shorts::model_timing_gates(   distance = kimberley_data$distance,   time = kimberley_data$time,   # To perform LOOCV number of folds is equal to    # number of observations   CV = nrow(kimberley_data) )  kimberley_profile_CV #> Estimated model parameters #> -------------------------- #>    MSS    MAC    TAU   PMAX  #>  8.591 10.589  0.811 22.743  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr  #>        0.99966       -0.00309       -0.53860       -0.05293  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>       -4.57121        0.02699        0.85715        0.05293  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>        4.57121        0.02779        1.93922        0.02333  #>       MAE_perc  #>        1.19263  #>  #>  #> Cross-Validation #> ------------------------------ #> Parameters: #>   .fold  MSS  MAC   TAU PMAX #> 1     1 8.69 10.2 0.856 22.1 #> 2     2 8.56 10.8 0.795 23.0 #> 3     3 8.39 11.1 0.760 23.2 #> 4     4 8.57 10.8 0.797 23.0 #> 5     5 8.61 10.6 0.813 22.8 #> 6     6 8.60 10.5 0.815 22.7 #>  #> Testing model fit estimators (overall): #>             R2        meanErr   meanErr_perc         minErr  #>         0.9990        -0.0124        -0.8548        -0.0801  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>        -5.9601         0.0344         1.0940         0.0801  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>         5.9601         0.0474         2.5920         0.0392  #>       MAE_perc  #>         1.7227 jim_profile_CV <- shorts::model_radar_gun(   time = jim_data$time,   velocity = jim_data$velocity,   CV = 10 )  jim_profile_CV #> Estimated model parameters #> -------------------------- #>    MSS    MAC    TAU   PMAX  #>  7.998  8.999  0.889 17.993  #>  #> Estimated model corrections #> -------------------------- #>       TC  #> -0.00011  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr  #>   0.9992440860  -0.0000000248           -Inf  -0.1640450506  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>           -Inf   0.1511233656   2.3325106593   0.1640450506  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>            Inf   0.0505025383            Inf   0.0392723633  #>       MAE_perc  #>            Inf  #>  #>  #> Cross-Validation #> ------------------------------ #> Parameters: #>    .fold MSS  MAC   TAU PMAX #> 1      1   8 8.99 0.889   18 #> 2      2   8 9.00 0.888   18 #> 3      3   8 9.00 0.889   18 #> 4      4   8 9.00 0.889   18 #> 5      5   8 9.00 0.889   18 #> 6      6   8 9.00 0.888   18 #> 7      7   8 9.00 0.889   18 #> 8      8   8 9.00 0.889   18 #> 9      9   8 9.01 0.888   18 #> 10    10   8 8.99 0.890   18 #>  #> Testing model fit estimators (overall): #>             R2        meanErr   meanErr_perc         minErr  #>      0.9992387     -0.0000138           -Inf     -0.1616499  #>    minErr_perc         maxErr    maxErr_perc      maxAbsErr  #>           -Inf      0.1507892      2.3273526      0.1616499  #> maxAbsErr_perc           RMSE      RMSE_perc            MAE  #>            Inf      0.0506812            Inf      0.0394415  #>       MAE_perc  #>            Inf"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"optimization","dir":"","previous_headings":"Examples","what":"Optimization","title":"Short Sprints","text":"Using method outlined Samozino et al (2022), one can find optimal profiles, well profile imbalance (compared optimal), sprint profiles (.e., MSSMSS MACMAC) Force-Velocity (FV). addition , one can probe profiles (.e., increase V0V0 / F0F0 MSSMSS / MACMAC say 2.5% check improvement yield improvement sprint time). following graph depicts estimate profile imbalances. Note >100% velocity deficit (.e., increasing velocity; MSSMSS V0V0; yield improvement sprint times), <100% force deficit.","code":"MSS <- 10 MAC <- 8 bodymass <- 75  fv <- create_FVP(MSS, MAC, bodymass)  opt_df <- tibble(   dist = seq(5, 50, by = 5) ) %>%   mutate(     `Sprint Profile` = optimal_MSS_MAC(       distance = dist,       MSS,       MAC     )[[\"profile_imb\"]],     `FV Profile` = optimal_FV(       distance = dist,       fv$F0,       fv$V0,       bodymass     )[[\"profile_imb\"]],     `FV Profile (PeakPower)` = optimal_FV(       distance = dist,       fv$F0,       fv$V0,       bodymass,       method = \"peak\"     )[[\"profile_imb\"]],     `Probe FV` = probe_FV(       distance = dist,       fv$F0,       fv$V0,       bodymass     )[[\"profile_imb\"]],     `Probe MSS/MAC` = probe_MSS_MAC(       distance = dist,       MSS,       MAC     )[[\"profile_imb\"]]   ) %>%   pivot_longer(-dist, names_to = \"profile\")  opt_dist <- tibble(   `Sprint Profile` = find_optimal_distance(     MSS,     MAC,     optimal_func = optimal_MSS_MAC   ),   `FV Profile` = find_optimal_distance(     fv$F0,     fv$V0,     bodymass,     optimal_func = optimal_FV   ),   `FV Profile (PeakPower)` = find_optimal_distance(     fv$F0,     fv$V0,     bodymass,     optimal_func = optimal_FV,     method = \"peak\"   ),   `Probe FV` = find_optimal_distance(     fv$F0,     fv$V0,     bodymass,     optimal_func = probe_FV   ),   `Probe MSS/MAC` = find_optimal_distance(     MSS,     MAC,     optimal_func = probe_MSS_MAC   ) ) %>%   pivot_longer(cols = 1:5, names_to = \"profile\")  ggplot(opt_df, aes(x = dist, y = value, color = profile)) +   geom_hline(yintercept = 100, linetype = \"dashed\", alpha = 0.6) +   geom_line() +   geom_point(data = opt_dist, aes(x = value, y = 100), size = 2) +   xlab(\"Distance (m)\") +   ylab(\"Profile imbalance\")"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"creating-your-own-data","dir":"","previous_headings":"Examples","what":"Creating your own data","title":"Short Sprints","text":"One can use {shorts}} package simulating data using two functions: create_sprint_trace() create_timing_gates_splits(): Using predict_ family functions, one can predict kinematics kinetics using known MSSMSS MACMAC parameters.","code":"create_sprint_trace(   MSS = 7, MAC = 6,   distance = c(5, 10, 20, 30, 40),   # Add flying distance   FD = 0.5) #>   time distance velocity acceleration sprint_time #> 1 1.24        5     5.33       1.4280        1.67 #> 2 2.10       10     6.20       0.6839        2.53 #> 3 3.63       20     6.78       0.1850        4.06 #> 4 5.08       30     6.94       0.0532        5.51 #> 5 6.52       40     6.98       0.0155        6.95 #>   sprint_distance #> 1             5.5 #> 2            10.5 #> 3            20.5 #> 4            30.5 #> 5            40.5  create_timing_gates_splits(   MSS = 7, MAC = 6,   gates = c(5, 10, 20, 30, 40),   # Add time-shift (i.e., rection time of 200ms)   TC = 0.2) #> [1] 1.78 2.65 4.19 5.64 7.08"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"publications","dir":"","previous_headings":"","what":"Publications","title":"Short Sprints","text":"Jovanović, M., Vescovi, J.D. (2022). {shorts}: R Package Modeling Short Sprints. International Journal Strength Conditioning, 2(1). https://doi.org/10.47206/ijsc.v2i1.74 Jovanović M. (2023). Bias estimated short sprint profiles using timing gates due flying start: simulation study proposed solutions. Computer Methods Biomechanics Biomedical Engineering:1–11. https://doi.org/10.1080/10255842.2023.2170713 Jovanović M., et al. (2024). Effects Flying Start Estimated Short Sprint Profiles Using Timing Gates. Sensors 2024, 24(9), 2894. https://doi.org/10.3390/s24092894 Jovanović M., et al. (2024). Agreement Sensitivity Acceleration–Velocity Profile Derived via Local Positioning System. Sensors 2024, 24(19), 6192. https://doi.org/10.3390/s24196192 Vescovi, JD Jovanović, M. (2021). Sprint Mechanical Characteristics Female Soccer Players: Retrospective Pilot Study Examine Novel Approach Correction Timing Gate Starts. Front Sports Act Living 3: 629694, 2021. https://doi.org/10.3389/fspor.2021.629694","code":""},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Short Sprints","text":"cite {shorts}, please use following command get BibTex entry:","code":"citation(\"shorts\")"},{"path":"https://mladenjovanovic.github.io/shorts/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Short Sprints","text":"Please refer publications information short sprints modeling using mono-exponential equation: Chelly SM, Denis C. 2001. Leg power hopping stiffness: relationship sprint running performance: Medicine Science Sports Exercise:326–333. DOI: 10.1097/00005768-200102000-00024. Clark KP, Rieger RH, Bruno RF, Stearne DJ. 2017. NFL Combine 40-Yard Dash: Important Maximum Velocity? Journal Strength Conditioning Research:1. DOI: 10.1519/JSC.0000000000002081. Clavel, P., Leduc, C., Morin, J.-B., Buchheit, M., & Lacome, M. (2023). Reliability individual acceleration-speed profile -situ elite youth soccer players. Journal Biomechanics, 153, 111602. https://doi.org/10.1016/j.jbiomech.2023.111602 Furusawa K, Hill AV, Parkinson JL. dynamics ” sprint” running. Proceedings Royal Society London. Series B, Containing Papers Biological Character 102 (713): 29-42, 1927 Greene PR. 1986. Predicting sprint dynamics maximum-velocity measurements. Mathematical Biosciences 80:1–18. DOI: 10.1016/0025-5564(86)90063-5. Haugen TA, Tønnessen E, Seiler SK. 2012. Difference Start: Impact Timing Start Procedure Sprint Running Performance: Journal Strength Conditioning Research 26:473–479. DOI: 10.1519/JSC.0b013e318226030b. Samozino P, Rabita G, Dorel S, Slawinski J, Peyrot N, Saez de Villarreal E, Morin J-B. 2016. simple method measuring power, force, velocity properties, mechanical effectiveness sprint running: Simple method compute sprint mechanics. Scandinavian Journal Medicine & Science Sports 26:648–658. DOI: 10.1111/sms.12490. Samozino P. 2018. Simple Method Measuring Force, Velocity Power Capabilities Mechanical Effectiveness Sprint Running. : Morin J-B, Samozino P eds. Biomechanics Training Testing. Cham: Springer International Publishing, 237–267. DOI: 10.1007/978-3-319-05633-3_11. Samozino P, Peyrot N, Edouard P, Nagahara R, Jimenez‐Reyes P, Vanwanseele B, Morin J. 2022. Optimal mechanical force‐velocity profile sprint acceleration performance.Scandinavian Journal Medicine & Science Sports 32:559–575. DOI: 10.1111/sms.14097.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/LPS_session.html","id":null,"dir":"Reference","previous_headings":"","what":"LPS Basketball Session Dataset — LPS_session","title":"LPS Basketball Session Dataset — LPS_session","text":"LPS Basketball Session Dataset","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/LPS_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LPS Basketball Session Dataset — LPS_session","text":"","code":"data(LPS_session)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/LPS_session.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"LPS Basketball Session Dataset — LPS_session","text":"Data frame 5 variables 91,099 observations: time Time seconds start session x x-coordinate meters provided LPS y y-coordinate meters provided LPS velocity Velocity provided LPS m/s acceleration Acceleration provided LPS m/s","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/LPS_session.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LPS Basketball Session Dataset — LPS_session","text":"dataset represents sample data provided Local Positioning System (LPS) single individual     performing single basketball practice session (aprox. 90min). Sampling frequency 20Hz.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/coef.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","title":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","text":"S3 method extracting model parameters shorts_model object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/coef.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","text":"","code":"# S3 method for class 'shorts_model' coef(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/coef.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","text":"object shorts_model object ... Extra arguments. used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/coef.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for extracting model parameters from shorts_model object — coef.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) coef(simple_model) #>       MSS       MAC  #>  9.780991 12.412805"},{"path":"https://mladenjovanovic.github.io/shorts/reference/confint.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for providing confidence intervals for the shorts_model — confint.shorts_model","title":"S3 method for providing confidence intervals for the shorts_model — confint.shorts_model","text":"S3 method providing confidence intervals shorts_model","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/confint.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for providing confidence intervals for the shorts_model — confint.shorts_model","text":"","code":"# S3 method for class 'shorts_model' confint(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/confint.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for providing confidence intervals for the shorts_model — confint.shorts_model","text":"object shorts_model object ... Forwarded generic confint() function","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/confint.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for providing confidence intervals for the shorts_model — confint.shorts_model","text":"","code":"if (FALSE) { # \\dontrun{ split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0,   TC = 0,   noise = 0.01 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) confint(simple_model) } # }"},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"function converts back Force-Velocity profile (FVP; F0 V0 parameters)     Acceleration-Velocity profile (AVP; MSS MAC parameters)","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"","code":"convert_FVP(   F0,   V0,   bodymass = 75,   inertia = 0,   resistance = 0,   wind_velocity = 0,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"F0, V0 Numeric vectors. FV profile parameters bodymass Body mass kg. Used calculate relative power forwarded get_air_resistance inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind. Default 0m/s (wind) ... Forwarded predict_power_at_distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"list calculated MSS MAC parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/convert_FVP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Force-Velocity profile back to Acceleration-Velocity profile — convert_FVP","text":"","code":"FVP <- create_FVP(7, 8.3, inertia = 10, resistance = 50)  convert_FVP(FVP$F0, FVP$V0, inertia = 10, resistance = 50) #> $MSS #> [1] 7 #>  #> $MAC #> [1] 8.3 #>"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Force-Velocity Profile — create_FVP","title":"Create Force-Velocity Profile — create_FVP","text":"Creates Force-Velocity Profile (FVP) modified using ideas Pierre Samozino JB-Morin, et al. (2016)    Pierre Samozino Nicolas Peyror, et al (2021).","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Force-Velocity Profile — create_FVP","text":"","code":"create_FVP(   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   wind_velocity = 0,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Force-Velocity Profile — create_FVP","text":"MSS, MAC Numeric vectors. Model parameters bodymass Body mass kg. Used calculate relative power forwarded get_air_resistance inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind. Default 0m/s (wind) ... Forwarded predict_power_at_distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Force-Velocity Profile — create_FVP","text":"List containing following elements: bodymass Returned bodymass used FV profiling F0 Horizontal force velocity=0 F0_rel F0 divided bodymass V0 Velocity horizontal force=0 Pmax Maximal horizontal power Pmax_rel Pmax divided bodymass FV_slope Slope FV profile. See References info","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create Force-Velocity Profile — create_FVP","text":"Samozino P, Rabita G, Dorel S, Slawinski J, Peyrot N, Saez de Villarreal E, Morin J-B. 2016.     simple method measuring power, force, velocity properties, mechanical effectiveness     sprint running: Simple method compute sprint mechanics. Scandinavian Journal Medicine & Science     Sports 26:648–658. DOI: 10.1111/sms.12490. Samozino P, Peyrot N, Edouard P, Nagahara R, Jimenez‐Reyes P, Vanwanseele B, Morin J. 2022.      Optimal mechanical force‐velocity profile sprint acceleration performance.       Scandinavian Journal Medicine & Science Sports 32:559–575. DOI: 10.1111/sms.14097.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_FVP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Force-Velocity Profile — create_FVP","text":"","code":"data(\"jb_morin\")  m1 <- model_radar_gun(time = jb_morin$time, velocity = jb_morin$velocity)  fv_profile <- create_FVP(   MSS = m1$parameters$MSS,   MAC = m1$parameters$MAC,   bodyheight = 1.72,   bodymass = 120, )  fv_profile #> $bodymass #> [1] 120 #>  #> $F0 #> [1] 829.9911 #>  #> $F0_rel #> [1] 6.916592 #>  #> $V0 #> [1] 9.534875 #>  #> $Pmax #> [1] 1978.465 #>  #> $Pmax_rel #> [1] 16.48721 #>  #> $FV_slope #> [1] -0.7253994 #>"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_sprint_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Sprint Trace — create_sprint_trace","title":"Create Sprint Trace — create_sprint_trace","text":"function creates sprint trace either using time distance vectors","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_sprint_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Sprint Trace — create_sprint_trace","text":"","code":"create_sprint_trace(   MSS,   MAC,   time = NULL,   distance = NULL,   TC = 0,   DC = 0,   FD = 0,   remove_leading = FALSE )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_sprint_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Sprint Trace — create_sprint_trace","text":"MSS, MAC Numeric vector. Model parameters time Numeric vector. distance Numeric vector. TC Numeric vector. Time-shift added sprint times. Default 0 DC Numeric vector. Distance-shift added sprint distance. Default 0 FD Numeric vector. Flying start distance. Default 0 remove_leading trace leading sprint removed? Default FALSE","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_sprint_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Sprint Trace — create_sprint_trace","text":"Data-frame following 6 columns time Measurement-scale time vector seconds. Equal parameter time distance Measurement-scale distance vector meters. Equal parameter distance velocity Velocity vector m/s acceleration Acceleration vector m/s/s sprint_time Sprint scale time vector seconds. Sprint always start t=0s sprint_distance Sprint scale distance vector meters. Sprint always start d=0m","code":""},{"path":[]},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_sprint_trace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Sprint Trace — create_sprint_trace","text":"","code":"df <- create_sprint_trace(8, 7, time = seq(0, 6, by = 0.01)) df <- create_sprint_trace(8, 7, distance = seq(0, 40, by = 1))"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_timing_gates_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Timing Gates Splits — create_timing_gates_splits","title":"Create Timing Gates Splits — create_timing_gates_splits","text":"function used generate timing gates splits predetermined parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_timing_gates_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Timing Gates Splits — create_timing_gates_splits","text":"","code":"create_timing_gates_splits(   MSS,   MAC,   gates = c(5, 10, 20, 30, 40),   FD = 0,   TC = 0,   noise = 0 )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_timing_gates_splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Timing Gates Splits — create_timing_gates_splits","text":"MSS, MAC Numeric vectors. Model parameters gates Numeric vectors. Distances timing gates FD Numeric vector. Flying start distance. Default 0 TC Numeric vector. Time-correction added split times (e.g., reaction time). Default 0 noise Numeric vector. SD Gaussian noise added split times. Default 0","code":""},{"path":[]},{"path":"https://mladenjovanovic.github.io/shorts/reference/create_timing_gates_splits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Timing Gates Splits — create_timing_gates_splits","text":"","code":"create_timing_gates_splits(   gates = c(10, 20, 30, 40, 50),   MSS = 10,   MAC = 9,   FD = 0.5,   TC = 0 ) #> [1] 1.622046 2.741529 3.783338 4.799463 5.805886"},{"path":"https://mladenjovanovic.github.io/shorts/reference/dynaspeed.html","id":null,"dir":"Reference","previous_headings":"","what":"DynaSpeed Single Sprint Data — dynaspeed","title":"DynaSpeed Single Sprint Data — dynaspeed","text":"DynaSpeed(TM) data collected single athlete (female, 177cm, 64kg) single sprint 40m.     Sampling frequency 1,000Hz. Additional time distance shift added dataset     provide sandbox potential issues analysis","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/dynaspeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DynaSpeed Single Sprint Data — dynaspeed","text":"","code":"data(dynaspeed)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/dynaspeed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DynaSpeed Single Sprint Data — dynaspeed","text":"Data frame 4 variables 7,251 observations: time time seconds distance Distance meters velocity Smoothed velocity meters per second raw_velocity Velocity meters per second","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/dynaspeed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DynaSpeed Single Sprint Data — dynaspeed","text":"Håkan Andersson     High-Performance Center     Växjö, Swedenhakan.andersson@hpcsweden.com","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Find functions — find_functions","title":"Find functions — find_functions","text":"Family functions serve purpose finding maximal value critical distances times     power, acceleration velocity drops certain threshold. find_peak_power_distance finds peak power distance    peak power occurs find_peak_power_time finds peak power time     peak power occurs find_velocity_critical_distance finds critical distance percent     MSS achieved find_velocity_critical_time finds critical time percent MSS     achieved find_acceleration_critical_distance finds critical distance percent     MAC reached find_acceleration_critical_time finds critical time percent     MAC reached find_power_critical_distance finds critical distances peak power     percent achieved find_power_critical_time finds critical times peak power     percent achieved","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find functions — find_functions","text":"","code":"find_peak_power_distance(MSS, MAC, inertia = 0, resistance = 0, ...)  find_peak_power_time(MSS, MAC, inertia = 0, resistance = 0, ...)  find_velocity_critical_distance(MSS, MAC, percent = 0.9)  find_velocity_critical_time(MSS, MAC, percent = 0.9)  find_acceleration_critical_distance(MSS, MAC, percent = 0.9)  find_acceleration_critical_time(MSS, MAC, percent = 0.9)  find_power_critical_distance(   MSS,   MAC,   inertia = 0,   resistance = 0,   percent = 0.9,   ... )  find_power_critical_time(   MSS,   MAC,   inertia = 0,   resistance = 0,   percent = 0.9,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find functions — find_functions","text":"MSS, MAC Numeric vectors. Model parameters inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) ... Arguments passed get_air_resistance velocity Instantaneous running velocity meters per second (m/s) bodymass kilograms (kg). Default 75kg bodyheight meters (m). Default 1.75m barometric_pressure Torrs. Default 760Torrs air_temperature Celzius (C). Default 25C wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind. Default 0m/s (wind) percent Numeric vector. Used calculate critical distance. Default 0.9","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find functions — find_functions","text":"find_peak_power_distance returns list two elements: peak_power    distance peak power occurs find_peak_power_time returns list two elements: peak_power     time peak power occurs","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find functions — find_functions","text":"Haugen TA, Tønnessen E, Seiler SK. 2012. Difference Start: Impact Timing Start         Procedure Sprint Running Performance: Journal Strength Conditioning Research 26:473–479.         DOI: 10.1519/JSC.0b013e318226030b. Samozino P. 2018. Simple Method Measuring Force, Velocity Power Capabilities Mechanical         Effectiveness Sprint Running. : Morin J-B, Samozino P eds. Biomechanics Training Testing.        Cham: Springer International Publishing, 237–267. DOI: 10.1007/978-3-319-05633-3_11.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find functions — find_functions","text":"","code":"dist <- seq(0, 40, length.out = 1000)  velocity <- predict_velocity_at_distance(   distance = dist,   MSS = 10,   MAC = 9 )  acceleration <- predict_acceleration_at_distance(   distance = dist,   MSS = 10,   MAC = 9 )  # Use ... to forward parameters to the shorts::get_air_resistance pwr <- predict_power_at_distance(   distance = dist,   MSS = 10,   MAC = 9   # bodyweight = 100,   # bodyheight = 1.9,   # barometric_pressure = 760,   # air_temperature = 25,   # wind_velocity = 0 )  # Find critical distance when 90% of MSS is reached plot(x = dist, y = velocity, type = \"l\") abline(h = 10 * 0.9, col = \"gray\") abline(v = find_velocity_critical_distance(MSS = 10, MAC = 9), col = \"red\")   # Find critical distance when 20% of MAC is reached plot(x = dist, y = acceleration, type = \"l\") abline(h = 9 * 0.2, col = \"gray\") abline(v = find_acceleration_critical_distance(MSS = 10, MAC = 9, percent = 0.2), col = \"red\")   # Find peak power and location of peak power plot(x = dist, y = pwr, type = \"l\")  peak_pwr <- find_peak_power_distance(   MSS = 10,   MAC = 9   # Use ... to forward parameters to the shorts::get_air_resistance ) abline(h = peak_pwr$peak_power, col = \"gray\") abline(v = peak_pwr$distance, col = \"red\")   # Find distance in which relative power stays over 75% of PMAX' plot(x = dist, y = pwr, type = \"l\") abline(h = peak_pwr$peak_power * 0.75, col = \"gray\") pwr_zone <- find_power_critical_distance(MSS = 10, MAC = 9, percent = 0.75) abline(v = pwr_zone$lower, col = \"blue\") abline(v = pwr_zone$upper, col = \"blue\")"},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that finds the distance at which the sprint, probe, or FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","title":"Function that finds the distance at which the sprint, probe, or FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"Function finds distance sprint, probe,     FV profile optimal (.e., equal 100 perc)","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that finds the distance at which the sprint, probe, or FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"","code":"find_optimal_distance(..., optimal_func = optimal_FV, min = 1, max = 60)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that finds the distance at which the sprint, probe, or FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"... Forwarded selected optimal_func optimal_func Selected profile optimization function. Default optimal_FV min, max Distance find optimal profile distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that finds the distance at which the sprint, probe, or FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"Distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/find_optimal_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function that finds the distance at which the sprint, probe, or FV profile is optimal (i.e., equal to 100 perc) — find_optimal_distance","text":"","code":"MSS <- 10 MAC <- 8 bodymass <- 75  fv <- create_FVP(MSS, MAC, bodymass)  find_optimal_distance(   F0 = fv$F0,   V0 = fv$V0,   bodymass = fv$bodymass,   optimal_func = optimal_FV,   method = \"max\" ) #> [1] 18.80181  find_optimal_distance(   MSS = MSS,   MAC = MAC,   optimal_func = optimal_MSS_MAC ) #> [1] 15.8214  find_optimal_distance(   MSS = MSS,   MAC = MAC,   optimal_func = probe_MSS_MAC ) #> [1] 16.01597"},{"path":"https://mladenjovanovic.github.io/shorts/reference/fitted.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for returning predictions of shorts_model — fitted.shorts_model","title":"S3 method for returning predictions of shorts_model — fitted.shorts_model","text":"S3 method returning predictions shorts_model","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/fitted.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for returning predictions of shorts_model — fitted.shorts_model","text":"","code":"# S3 method for class 'shorts_model' fitted(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/fitted.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for returning predictions of shorts_model — fitted.shorts_model","text":"object shorts_model object ... Extra arguments. used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/fitted.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for returning predictions of shorts_model — fitted.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) fitted(simple_model) #> [1] 1.721739 2.810500 3.849193 4.875922 5.899491"},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Split Data — format_splits","title":"Format Split Data — format_splits","text":"Function formats split data calculates split distances, split times average split velocity","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Split Data — format_splits","text":"","code":"format_splits(distance, time)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Split Data — format_splits","text":"distance Numeric vector time Numeric vector","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Split Data — format_splits","text":"Data frame following columns: split Split number split_distance_start Distance split starts split_distance_stop Distance split ends split_distance Split distance split_time_start Time distance starts split_time_stop Time distance ends split_time Split time split_mean_velocity Mean velocity split distance split_mean_acceleration Mean acceleration split distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/format_splits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Split Data — format_splits","text":"","code":"data(\"split_times\")  john_data <- split_times[split_times$athlete == \"John\", ]  format_splits(john_data$distance, john_data$time) #>   split split_distance_start split_distance_stop split_distance #> 1     1                    0                   5              5 #> 2     2                    5                  10              5 #> 3     3                   10                  15              5 #> 4     4                   15                  20              5 #> 5     5                   20                  30             10 #> 6     6                   30                  40             10 #>   split_time_start split_time_stop split_time split_mean_velocity #> 1            0.000           1.201      1.201            4.163197 #> 2            1.201           1.967      0.766            6.527415 #> 3            1.967           2.656      0.689            7.256894 #> 4            2.656           3.314      0.658            7.598784 #> 5            3.314           4.591      1.277            7.830854 #> 6            4.591           5.849      1.258            7.949126 #>   split_mean_acceleration #> 1              3.46644241 #> 2              3.08644622 #> 3              1.05875023 #> 4              0.51958989 #> 5              0.18173012 #> 6              0.09401592"},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Air Resistance — get_air_resistance","title":"Get Air Resistance — get_air_resistance","text":"get_air_resistance estimates air resistance Newtons","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Air Resistance — get_air_resistance","text":"","code":"get_air_resistance(   velocity,   bodymass = 75,   bodyheight = 1.75,   barometric_pressure = 760,   air_temperature = 25,   wind_velocity = 0 )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Air Resistance — get_air_resistance","text":"velocity Instantaneous running velocity meters per second (m/s) bodymass kilograms (kg). Default 75kg bodyheight meters (m). Default 1.75m barometric_pressure Torrs. Default 760Torrs air_temperature Celzius (C). Default 25C wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind. Default 0m/s (wind)","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Air Resistance — get_air_resistance","text":"Air resistance Newtons (N)","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Air Resistance — get_air_resistance","text":"Arsac LM, Locatelli E. 2002. Modeling energetics 100-m running using speed curves         world champions. Journal Applied Physiology 92:1781–1788.         DOI: 10.1152/japplphysiol.00754.2001. Samozino P, Rabita G, Dorel S, Slawinski J, Peyrot N, Saez de Villarreal E, Morin J-B. 2016.         simple method measuring power, force, velocity properties, mechanical         effectiveness sprint running: Simple method compute sprint mechanics.         Scandinavian Journal Medicine & Science Sports 26:648–658. DOI: 10.1111/sms.12490. van Ingen Schenau GJ, Jacobs R, de Koning JJ. 1991. Can cycle power predict sprint running        performance? European Journal Applied Physiology Occupational Physiology 63:255–260.        DOI: 10.1007/BF00233857.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/get_air_resistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Air Resistance — get_air_resistance","text":"","code":"get_air_resistance(   velocity = 5,   bodymass = 80,   bodyheight = 1.90,   barometric_pressure = 760,   air_temperature = 16,   wind_velocity = -0.5 ) #> [1] 9.183696"},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":null,"dir":"Reference","previous_headings":"","what":"JB Morin Sample Dataset — jb_morin","title":"JB Morin Sample Dataset — jb_morin","text":"Sample radar gun data provided Jean-Benoît Morin website. See   https://jbmorin.net/2017/12/13/-spreadsheet--sprint-acceleration-force-velocity-power-profiling/    details.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JB Morin Sample Dataset — jb_morin","text":"","code":"data(jb_morin)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"JB Morin Sample Dataset — jb_morin","text":"Data frame 2 variables 232 observations: time Time seconds velocity Velocity m/s","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"JB Morin Sample Dataset — jb_morin","text":"dataset represents sample data provided Jean-Benoît Morin single individual running     approximately 35m stand still position measured radar gun. Individual's body     mass 75kg, height 1.72m. Conditions run following: air temperature 25C,     barometric pressure 760mmHg, wind velocity 0m/s. purpose including dataset package check agreement model estimates     Jean-Benoît Morin Microsoft Excel spreadsheet.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"JB Morin Sample Dataset — jb_morin","text":"Morin JB. 2017.spreadsheet Sprint acceleration Force-Velocity-Power profiling.     Available https://jbmorin.net/2017/12/13/-spreadsheet--sprint-acceleration-force-velocity-power-profiling/     (accessed October 27, 2020).","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/jb_morin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"JB Morin Sample Dataset — jb_morin","text":"Jean-Benoît Morin      Inter-university Laboratory Human Movement Biology      Saint-Étienne, France      https://jbmorin.net/","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/laser_gun_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Laser Gun Data — laser_gun_data","title":"Laser Gun Data — laser_gun_data","text":"Performance 35m sprint youth basketball player done using standing start. Sample      collected laser gun (CMP3 Distance Sensor, Noptel Oy, Oulu, Finland)      sampled rate 2.56 KHz. polynomial function modeling relationship      distance time employed subsequently resampled frequency      1,000 Hz using Musclelab™ v10.232.107.5298, software developed Ergotest      Technology located Langesund, Norway. Data modified calculating      raw acceleration using dv/dt (using smoothed velocity provided system),      smoothed using 4th-order Butterworth filter cutoff frequency 1 Hz.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/laser_gun_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laser Gun Data — laser_gun_data","text":"","code":"data(laser_gun_data)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/laser_gun_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Laser Gun Data — laser_gun_data","text":"Data frame 6 variables 4805 observations: time Time vector seconds distance Distance vector meters velocity Smoothed velocity vector m/s; represent step-averaged velocity raw_velocity Raw velocity vector m/s raw_acceleration Raw acceleration vector m/s/s; calculated using difference     smoothed velocity divided time difference (.e., dv/dt method derivation) butter_acceleration Smoothed acceleration vector m/s/s; smoothed using    4th-order Butterworth filter cutoff frequency 1 Hz","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Model functions — model_functions","title":"Model functions — model_functions","text":"Family functions serve purpose estimating short sprint parameters model_in_situ estimates short sprint parameters using velocity-acceleration trace,     provided monitoring systems like GPS LPS. See references information model_radar_gun estimates short sprint parameters using time-velocity trace,     additional parameter TC serving intercept model_laser_gun alias model_radar_gun model_tether estimates short sprint parameters using distance-velocity trace     (e.g., tether devices). model_tether_DC estimates short sprint parameters using distance-velocity trace     (e.g., tether devices) additional distance correction DC parameter model_time_distance estimates short sprint parameters using time distance trace model_time_distance_FD estimates short sprint parameters using time-distance trace      additional estimated flying distance correction parameter FD model_time_distance_FD_fixed estimates short sprint parameters using time-distance trace      additional flying distance correction parameter FD      fixed user model_time_distance estimates short sprint parameters using time distance trace     additional time correction parameter TC model_time_distance estimates short sprint parameters using time distance trace     additional distance correction parameter DC model_time_distance estimates short sprint parameters using time distance trace     additional time correction TC distance correction TC parameters model_timing_gates estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells) model_timing_gates_TC estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells), additional time correction parameter TC model_timing_gates_FD estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells), additional estimated flying distance correction      parameter FD model_timing_gates_FD_fixed estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells), additional flying distance correction parameter FD      fixed user model_timing_gates_DC estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells), additional distance correction parameter DC model_timing_gates_TC_DC estimates short sprint parameters using distance-time trace      (e.g., timing gates/photo cells), additional time correction TC      distance correction DC parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model functions — model_functions","text":"","code":"model_in_situ(   velocity,   acceleration,   weights = 1,   acceleration_threshold = 0,   velocity_threshold = NULL,   velocity_step = 0.2,   n_observations = 2,   filter_func = function(x) {      x  },   CV = NULL,   na.rm = FALSE,   ... )  model_radar_gun(   time,   velocity,   weights = 1,   CV = NULL,   use_observed_MSS = FALSE,   na.rm = FALSE,   ... )  model_laser_gun(   time,   velocity,   weights = 1,   CV = NULL,   use_observed_MSS = FALSE,   na.rm = FALSE,   ... )  model_tether(   distance,   velocity,   weights = 1,   CV = NULL,   use_observed_MSS = FALSE,   na.rm = FALSE,   ... )  model_tether_DC(   distance,   velocity,   weights = 1,   CV = NULL,   use_observed_MSS = FALSE,   na.rm = FALSE,   ... )  model_time_distance(time, distance, weights = 1, CV = NULL, na.rm = FALSE, ...)  model_time_distance_FD(   time,   distance,   weights = 1,   CV = NULL,   na.rm = FALSE,   ... )  model_time_distance_FD_fixed(   time,   distance,   weights = 1,   FD = 0,   CV = NULL,   na.rm = FALSE,   ... )  model_time_distance_TC(   time,   distance,   weights = 1,   CV = NULL,   na.rm = FALSE,   ... )  model_time_distance_DC(   time,   distance,   weights = 1,   CV = NULL,   na.rm = FALSE,   ... )  model_time_distance_TC_DC(   time,   distance,   weights = 1,   CV = NULL,   na.rm = FALSE,   ... )  model_timing_gates(distance, time, weights = 1, CV = NULL, na.rm = FALSE, ...)  model_timing_gates_TC(   distance,   time,   weights = 1,   CV = NULL,   na.rm = FALSE,   ... )  model_timing_gates_FD(   distance,   time,   weights = 1,   CV = NULL,   na.rm = FALSE,   ... )  model_timing_gates_FD_fixed(   distance,   time,   weights = 1,   FD = 0,   CV = NULL,   na.rm = FALSE,   ... )  model_timing_gates_DC(   distance,   time,   weights = 1,   CV = NULL,   na.rm = FALSE,   ... )  model_timing_gates_TC_DC(   distance,   time,   weights = 1,   CV = NULL,   na.rm = FALSE,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model functions — model_functions","text":"weights Numeric vector. Default 1 acceleration_threshold Acceleration cuttof. Default 0 velocity_threshold Velocity cutoff. NULL (default), velocity observation fastest acceleration taken cutoff value velocity_step Velocity increment size finding max acceleration. Default 0.2 m/s n_observations Number top acceleration observations keep velocity bracket. Default 2 filter_func Function filter outliers within velocity bracket. used remove noise data. Default function(x){x} involve filtering. CV cross-validation used estimate model fit? Default NULL. Otherwise use integer indicating number folds na.rm Logical. Default FALSE ... Forwarded nlsLM function time, velocity, distance, acceleration Numeric vector use_observed_MSS observed peak velocity used MSS parameter? Default FALSE FD Flying distance parameter. Default 0","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model functions — model_functions","text":"List object following elements: data Data frame used estimate sprint parameters model_info Extra information regarding model used model Model returned nlsLM function parameters List following estimated parameters:             MSS, MAC, TAU, PMAX correction List additional model correcitons predictions Data frame .predictor, .observed,             .predicted, .residual columns model_fit List multiple model fit estimators CV cross-validation performed, included data ,              fold","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model functions — model_functions","text":"Samozino P. 2018. Simple Method Measuring Force, Velocity Power Capabilities Mechanical         Effectiveness Sprint Running. : Morin J-B, Samozino P eds. Biomechanics Training Testing.        Cham: Springer International Publishing, 237–267. DOI: 10.1007/978-3-319-05633-3_11. Clavel, P., Leduc, C., Morin, J.-B., Buchheit, M., & Lacome, M. (2023).     Reliability individual acceleration-speed profile -situ elite youth     soccer players. Journal Biomechanics, 153, 111602.     https://doi.org/10.1016/j.jbiomech.2023.111602 Morin, J.-B. (2021). “-situ” acceleration-speed profile team     sports: testing players without testing . JB Morin, PhD – Sport Science website.     Accessed 31. Dec. 2023.     https://jbmorin.net/2021/07/29/--situ-sprint-profile--team-sports-testing-players-without-testing-/","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/model_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model functions — model_functions","text":"","code":"# Model In-Situ (Embedded profiling) data(\"LPS_session\") m1 <- model_in_situ(   velocity = LPS_session$velocity,   acceleration = LPS_session$acceleration,   # Use specific cutoff value   velocity_threshold = 4) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.175298  7.892268  1.035862 16.130411  #>  #> Estimated model corrections #> -------------------------- #> velocity_threshold      velocity_step     n_observations  #>                4.0                0.2                2.0  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.621382e-01   4.333708e-11  -2.172739e+00  -2.850020e-01  -3.774861e+01  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   2.876032e-01   9.416731e+00   2.876032e-01   3.774861e+01   1.732541e-01  #>      RMSE_perc            MAE       MAE_perc  #>   1.192616e+01   1.507568e-01   8.054781e+00  plot(m1)    # Model Radar Gun (includes Time Correction) df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0, 6, 0.1))  # Add some noise df$velocity <- df$velocity + rnorm(n = nrow(df), 0, 10^-2)  m1 <- model_radar_gun(time = df$time, velocity = df$velocity) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.001248  6.001633  1.333178 12.005138  #>  #> Estimated model corrections #> -------------------------- #>          TC  #> 0.001152242  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.999738e-01  -4.845986e-09   8.423650e-01  -2.392493e-02  -1.716745e+00  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   2.647852e-02   5.058495e+01   2.647852e-02   5.058495e+01   1.063029e-02  #>      RMSE_perc            MAE       MAE_perc  #>   6.486331e+00   7.840910e-03   1.012165e+00  plot(m1)    # Model Laser Gun (includes Time Correction) df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0, 6, 0.1))  # Add some noise df$velocity <- df$velocity + rnorm(n = nrow(df), 0, 10^-2)  m1 <- model_laser_gun(time = df$time, velocity = df$velocity) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  7.999801  6.008450  1.331425 12.016601  #>  #> Estimated model corrections #> -------------------------- #>           TC  #> 0.0007096585  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   9.999774e-01  -2.784258e-09   6.134959e-01  -2.859492e-02  -6.493664e-01  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   2.073111e-02   3.587191e+01   2.859492e-02   3.587191e+01   9.869609e-03  #>      RMSE_perc            MAE       MAE_perc  #>   4.607405e+00   7.827059e-03   7.619518e-01  plot(m1)    # Model Tether df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0, 6, 0.5)) m1 <- model_tether(distance = df$distance, velocity = df$velocity) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   2.732857e-16            NaN  -8.881784e-16            NaN  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   8.881784e-16            NaN   8.881784e-16            NaN   6.033984e-16  #>      RMSE_perc            MAE       MAE_perc  #>            NaN   4.099285e-16            NaN  plot(m1)    # Model Tether with Distance Correction (DC) df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0.001, 6, 0.5), DC = 5) m1 <- model_tether_DC(distance = df$distance, velocity = df$velocity) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Estimated model corrections #> -------------------------- #> DC  #>  5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   6.524606e-09   1.087130e-04  -2.443290e-11  -3.930459e-10  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   7.824384e-08   1.304553e-03   7.824384e-08   1.304553e-03   2.258707e-08  #>      RMSE_perc            MAE       MAE_perc  #>   3.765920e-04   6.539070e-09   1.087132e-04  plot(m1)    # Model Time-Distance trace (simple, without corrections) df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0, 5, by = 0.5)) m1 <- model_time_distance(time = df$time, distance = df$distance) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   2.906766e-15            NaN   0.000000e+00            NaN  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   7.105427e-15            NaN   7.105427e-15            NaN   3.787206e-15  #>      RMSE_perc            MAE       MAE_perc  #>            NaN   2.906766e-15            NaN  plot(m1)    # Model Time-Distance trace (with Flying Distance Correction) df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0, 5, by = 0.5), FD = 0.5) m1 <- model_time_distance_FD(time = df$time, distance = df$distance) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Estimated model corrections #> -------------------------- #>  FD  #> 0.5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   4.339963e-16           -Inf  -3.108624e-15           -Inf  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   7.105427e-15   4.157878e-14   7.105427e-15            Inf   2.639395e-15  #>      RMSE_perc            MAE       MAE_perc  #>            Inf   1.503848e-15            Inf  plot(m1)    # Model Time-Distance trace (with Flying Distance Correction fixed) df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0, 5, by = 0.5), FD = 0.5) m1 <- model_time_distance_FD_fixed(time = df$time, distance = df$distance, FD = 0.5) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Estimated model corrections #> -------------------------- #>  FD  #> 0.5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   1.453383e-15            NaN  -1.776357e-15            NaN  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   3.552714e-15            NaN   3.552714e-15            NaN   2.454390e-15  #>      RMSE_perc            MAE       MAE_perc  #>            NaN   2.099331e-15            NaN  plot(m1)    # Model Time-Distance trace (with Time Correction) df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0, 5, by = 0.5), TC = 1.5) m1 <- model_time_distance_TC(time = df$time, distance = df$distance) m1 #> Estimated model parameters #> -------------------------- #>         MSS         MAC         TAU        PMAX  #> 1895.253146    2.147529  882.527350 1017.527810  #>  #> Estimated model corrections #> -------------------------- #>        TC  #> 0.8584909  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>      0.9972266     -0.2001508           -Inf     -0.7916282           -Inf  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>      0.3846147      3.5063408      0.7916282            Inf      0.4266725  #>      RMSE_perc            MAE       MAE_perc  #>            Inf      0.3549891            Inf  plot(m1)    # Model Time-Distance trace (with Distance Correction) df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0, 5, by = 0.5), DC = -5) m1 <- model_time_distance_DC(time = df$time, distance = df$distance) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Estimated model corrections #> -------------------------- #> DC  #> -5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00  -6.459479e-16  -1.956718e-14  -7.105427e-15  -1.351823e-13  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   3.552714e-15   6.546637e-14   7.105427e-15   1.351823e-13   2.834085e-15  #>      RMSE_perc            MAE       MAE_perc  #>   4.958677e-14   1.937844e-15   3.147015e-14  plot(m1)    # Model Time-Distance trace (with Time and Distance Corrections) df <- create_sprint_trace(MSS = 8, MAC = 6, time = seq(0, 5, by = 0.5), TC = -1.3, DC = 5) m1 <- model_time_distance_TC_DC(time = df$time, distance = df$distance) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Estimated model corrections #> -------------------------- #>   TC   DC  #> -1.3  5.0  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   2.099331e-15   9.163848e-15   0.000000e+00   0.000000e+00  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   7.105427e-15   2.028565e-14   7.105427e-15   2.028565e-14   3.344769e-15  #>      RMSE_perc            MAE       MAE_perc  #>   1.257285e-14   2.099331e-15   9.163848e-15  plot(m1)    # Model Timing Gates (simple, without corrections) df <- create_sprint_trace(MSS = 8, MAC = 6, distance = c(5, 10, 20, 30, 40)) m1 <- model_timing_gates(distance = df$distance, time = df$time) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   4.884981e-16   1.298446e-14   0.000000e+00   0.000000e+00  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   8.881784e-16   1.885372e-14   8.881784e-16   1.885372e-14   6.040266e-16  #>      RMSE_perc            MAE       MAE_perc  #>   1.463129e-14   4.884981e-16   1.298446e-14  plot(m1)    # Model Timing Gates (with Time Correction) df <- create_sprint_trace(MSS = 8, MAC = 6, distance = c(5, 10, 20, 30, 40), TC = 0.2) m1 <- model_timing_gates_TC(distance = df$distance, time = df$time) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Estimated model corrections #> -------------------------- #>  TC  #> 0.2  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00  -3.108624e-16  -5.185586e-15  -8.881784e-16  -1.690737e-14  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   4.440892e-16   1.737815e-14   8.881784e-16   1.737815e-14   6.040266e-16  #>      RMSE_perc            MAE       MAE_perc  #>   1.368691e-14   4.884981e-16   1.213685e-14  plot(m1)    # Model Timing Gates (with Flying Distance Correction) df <- create_sprint_trace(MSS = 8, MAC = 6, distance = c(5, 10, 20, 30, 40), FD = 0.5) m1 <- model_timing_gates_FD(distance = df$distance, time = df$time) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Estimated model corrections #> -------------------------- #>  FD  #> 0.5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00  -6.217249e-16  -2.125254e-14  -8.881784e-16  -3.709322e-14  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>  -4.440892e-16  -1.310130e-14   8.881784e-16   3.709322e-14   6.586907e-16  #>      RMSE_perc            MAE       MAE_perc  #>   2.290012e-14   6.217249e-16   2.125254e-14  plot(m1)    # Model Timing Gates (with Flying Distance Correction fixed) df <- create_sprint_trace(MSS = 8, MAC = 6, distance = c(5, 10, 20, 30, 40), FD = 0.5) m1 <- model_timing_gates_FD_fixed(distance = df$distance, time = df$time) m1 #> Estimated model parameters #> -------------------------- #>        MSS        MAC        TAU       PMAX  #>  7.6084315 10.4790776  0.7260593 19.9323362  #>  #> Estimated model corrections #> -------------------------- #> FD  #>  0  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>    0.999604814   -0.003592961   -0.653207665   -0.056941052   -4.756087605  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>    0.042158194    1.243729935    0.056941052    4.756087605    0.035338917  #>      RMSE_perc            MAE       MAE_perc  #>    2.221121704    0.030642700    1.441672645  plot(m1)    # Model Timing Gates (with Distance Correction) df <- create_sprint_trace(MSS = 8, MAC = 6, distance = c(5, 10, 20, 30, 40), DC = 1.5) m1 <- model_timing_gates_DC(distance = df$distance, time = df$time) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Estimated model corrections #> -------------------------- #>  DC  #> 1.5  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   1.332268e-16  -6.621710e-16  -2.220446e-16  -1.779418e-14  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   8.881784e-16   1.448332e-14   8.881784e-16   1.779418e-14   4.094300e-16  #>      RMSE_perc            MAE       MAE_perc  #>   1.026060e-14   2.220446e-16   6.455500e-15  plot(m1)    # Model Timing Gates (with Time and Distance Corrections) df <- create_sprint_trace(MSS = 8, MAC = 6, distance = c(5, 10, 20, 30, 40), TC = 0.25, DC = 1.5) m1 <- model_timing_gates_TC_DC(distance = df$distance, time = df$time) m1 #> Estimated model parameters #> -------------------------- #>       MSS       MAC       TAU      PMAX  #>  8.000000  6.000000  1.333333 12.000000  #>  #> Estimated model corrections #> -------------------------- #>   TC   DC  #> 0.25 1.50  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>   1.000000e+00   2.220446e-16   7.152383e-15  -4.440892e-16  -1.167730e-14  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>   8.881784e-16   1.869898e-14   8.881784e-16   1.869898e-14   4.965068e-16  #>      RMSE_perc            MAE       MAE_perc  #>   1.341212e-14   3.996803e-16   1.182330e-14  plot(m1)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal profile functions — optimal_functions","title":"Optimal profile functions — optimal_functions","text":"Family functions serve purpose finding optimal sprint force-velocity profile optimal_FV finds \"optimal\" F0 V0 time distance     minimized, keeping power optimal_MSS_MAC finds \"optimal\" MSS MAS time distance     minimized, keeping Pmax ","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal profile functions — optimal_functions","text":"","code":"optimal_FV(   distance,   F0,   V0,   bodymass = 75,   inertia = 0,   resistance = 0,   method = \"max\",   ... )  optimal_MSS_MAC(distance, MSS, MAC)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal profile functions — optimal_functions","text":"distance Numeric vector F0, V0 Numeric vectors. FV profile parameters bodymass Body mass kg inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) method Method utilized. Options \"peak\" \"max\" (default) ... Arguments passed get_air_resistance velocity Instantaneous running velocity meters per second (m/s) bodyheight meters (m). Default 1.75m barometric_pressure Torrs. Default 760Torrs air_temperature Celzius (C). Default 25C wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind. Default 0m/s (wind) MSS, MAC Numeric vectors. Model parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal profile functions — optimal_functions","text":"optimal_FV returns s data frame following columns F0 Original F0 V0 Original F0 bodymass Bodymass inertia Inertia resistance Resistance Pmax Maximal power estimated using F0 * V0 / 4 Pmax_rel Relative maximal power slope FV profile slope distance Distance time Time cover distance Ppeak Peak power estimated quantitatively Ppeak_rel Relative peak power Ppeak_dist Distance peak power manifested Ppeak_time Time peak power manifested F0_optim Optimal F0 F0_coef Ratio F0_optim F0 V0_optim Optimal V0 V0_coef Ratio V0_optim V0 Pmax_optim Optimal maximal power estimated F0_optim * V0_optim / 4 Pmax_rel_optim Optimal relative maximal power slope_optim Optimal FV profile slope profile_imb Percent ratio slope optimal slope time_optim Time cover distance profile optimal time_gain Difference time cover distance time_optimal time Ppeak_optim Optimal peak power estimated quantitatively Ppeak_rel_optim Optimal relative peak power Ppeak_dist_optim Distance optimal peak power manifested Ppeak_time_optim Time optimal peak power manifested optimal_MSS_MAC returns data frame following columns MSS Original MSS MAC Original MAC Pmax_rel Relative maximal power estimated using MSS * MAC / 4 slope Sprint profile slope distance Distance time Time cover distance MSS_optim Optimal MSS MSS_coef Ratio MSS_optim MSS MAC_optim Optimal MAC MAC_coef Ratio MAC_optim MAC Pmax_rel_optim Optimal relative maximal power estimated using MSS_optim * MAC_optim / 4 slope_optim Optimal sprint profile slope profile_imb Percent ratio slope optimal slope time_optim Time cover distance profile optimal time_gain Difference time cover distance time_optimal time","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal profile functions — optimal_functions","text":"Samozino P, Peyrot N, Edouard P, Nagahara R, Jimenez‐Reyes P, Vanwanseele B, Morin J. 2022.      Optimal mechanical force-velocity profile sprint acceleration performance.       Scandinavian Journal Medicine & Science Sports 32:559–575. DOI: 10.1111/sms.14097.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/optimal_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal profile functions — optimal_functions","text":"","code":"MSS <- 10 MAC <- 8 bodymass <- 75  fv <- create_FVP(MSS, MAC, bodymass)  dist <- seq(5, 40, by = 5)  opt_MSS_MAC_profile <- optimal_MSS_MAC(   distance = dist,   MSS,   MAC )[[\"profile_imb\"]]  opt_FV_profile <- optimal_FV(   distance = dist,   fv$F0,   fv$V0,   fv$bodymass )[[\"profile_imb\"]]  opt_FV_profile_peak <- optimal_FV(   distance = dist,   fv$F0,   fv$V0,   fv$bodymass,   method = \"peak\" )[[\"profile_imb\"]]  plot(x = dist, y = opt_MSS_MAC_profile, type = \"l\", ylab = \"Profile imbalance\") lines(x = dist, y = opt_FV_profile, type = \"l\", col = \"blue\") lines(x = dist, y = opt_FV_profile_peak, type = \"l\", col = \"red\") abline(h = 100, col = \"gray\", lty = 2)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for plotting shorts_model object — plot.shorts_model","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"S3 method plotting shorts_model object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"","code":"# S3 method for class 'shorts_model' plot(x, type = \"model\", ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"x shorts_model object type Type plot. Can \"model\" (default), \"kinematics-time\", \"kinematics-distance\", \"residuals\" ... used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"ggplot object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/plot.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for plotting shorts_model object — plot.shorts_model","text":"","code":"# Simple model with radar gun data instant_velocity <- data.frame(   time = c(0, 1, 2, 3, 4, 5, 6),   velocity = c(0.00, 4.99, 6.43, 6.84, 6.95, 6.99, 7.00) )  radar_model <- with(   instant_velocity,   model_radar_gun(time, velocity) )  plot(radar_model)  plot(radar_model, \"kinematics-time\")  plot(radar_model, \"kinematics-distance\")  plot(radar_model, \"residuals\")"},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for making predictions using shorts_model — predict.shorts_model","title":"S3 method for making predictions using shorts_model — predict.shorts_model","text":"S3 method making predictions using shorts_model","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for making predictions using shorts_model — predict.shorts_model","text":"","code":"# S3 method for class 'shorts_model' predict(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for making predictions using shorts_model — predict.shorts_model","text":"object shorts_model object ... Forwarded generic predict() function","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for making predictions using shorts_model — predict.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) predict(simple_model) #> [1] 1.721739 2.810500 3.849193 4.875922 5.899491"},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":null,"dir":"Reference","previous_headings":"","what":"Kinematics prediction functions — predict_kinematics","title":"Kinematics prediction functions — predict_kinematics","text":"Predicts kinematic known MSS MAC parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kinematics prediction functions — predict_kinematics","text":"","code":"predict_velocity_at_time(time, MSS, MAC)  predict_distance_at_time(time, MSS, MAC)  predict_acceleration_at_time(time, MSS, MAC)  predict_time_at_distance(distance, MSS, MAC)  predict_time_at_distance_FV(   distance,   F0,   V0,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_velocity_at_distance(distance, MSS, MAC)  predict_acceleration_at_distance(distance, MSS, MAC)  predict_acceleration_at_velocity(velocity, MSS, MAC)  predict_air_resistance_at_time(time, MSS, MAC, ...)  predict_air_resistance_at_distance(distance, MSS, MAC, ...)  predict_force_at_velocity(   velocity,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_force_at_time(   time,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_force_at_distance(   distance,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_power_at_distance(   distance,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_power_at_time(   time,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_relative_power_at_distance(   distance,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_relative_power_at_time(   time,   MSS,   MAC,   bodymass = 75,   inertia = 0,   resistance = 0,   ... )  predict_work_till_time(time, ...)  predict_work_till_distance(distance, ...)  predict_kinematics(   object = NULL,   MSS,   MAC,   max_time = 6,   frequency = 100,   bodymass = 75,   inertia = 0,   resistance = 0,   add_inertia_to_vertical = TRUE,   ... )"},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kinematics prediction functions — predict_kinematics","text":"time, distance, velocity Numeric vectors MSS, MAC Numeric vectors. Model parameters F0, V0 Numeric vectors. FV profile parameters bodymass Body mass kg. Used calculate relative power forwarded get_air_resistance inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) ... Arguments passed get_air_resistance bodyheight meters (m). Default 1.75m barometric_pressure Torrs. Default 760Torrs air_temperature Celzius (C). Default 25C wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind. Default 0m/s (wind) object shorts_model object provided, estimated parameters used. Otherwise provide MSS MAC parameters max_time Predict 0 max_time. Default 6seconds frequency Number samples within one second. Default 100Hz add_inertia_to_vertical inertia added bodymass calculating vertical force? Use TRUE (Default) using weight vest, FALSE dragging sled","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kinematics prediction functions — predict_kinematics","text":"Numeric vector Data frame kinetic kinematic variables","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kinematics prediction functions — predict_kinematics","text":"Haugen TA, Tønnessen E, Seiler SK. 2012. Difference Start: Impact Timing Start         Procedure Sprint Running Performance: Journal Strength Conditioning Research 26:473–479.         DOI: 10.1519/JSC.0b013e318226030b. Jovanović, M., Vescovi, J.D. (2020). shorts: R Package Modeling Short Sprints. Preprint         available SportRxiv. https://doi.org/10.31236/osf.io/4jw62 Samozino P. 2018. Simple Method Measuring Force, Velocity Power Capabilities Mechanical         Effectiveness Sprint Running. : Morin J-B, Samozino P eds. Biomechanics Training Testing.        Cham: Springer International Publishing, 237–267. DOI: 10.1007/978-3-319-05633-3_11.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/predict_kinematics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kinematics prediction functions — predict_kinematics","text":"","code":"MSS <- 8 MAC <- 9  time_seq <- seq(0, 6, length.out = 10)  df <- data.frame(   time = time_seq,   distance_at_time = predict_distance_at_time(time_seq, MSS, MAC),   velocity_at_time = predict_velocity_at_time(time_seq, MSS, MAC),   acceleration_at_time = predict_acceleration_at_time(time_seq, MSS, MAC) )  df$time_at_distance <- predict_time_at_distance(df$distance_at_time, MSS, MAC) df$velocity_at_distance <- predict_velocity_at_distance(df$distance_at_time, MSS, MAC) df$acceleration_at_distance <- predict_acceleration_at_distance(df$distance_at_time, MSS, MAC) df$acceleration_at_velocity <- predict_acceleration_at_velocity(df$velocity_at_time, MSS, MAC)  # Power calculation uses shorts::get_air_resistance function and its defaults # values to calculate power. Use the ... to setup your own parameters for power # calculations df$power_at_time <- predict_power_at_time(   time = df$time, MSS = MSS, MAC = MAC,   # Check shorts::get_air_resistance for available params   bodymass = 100, bodyheight = 1.85 )  df #>         time distance_at_time velocity_at_time acceleration_at_time #> 1  0.0000000         0.000000         0.000000           9.00000000 #> 2  0.6666667         1.581273         4.221068           4.25129897 #> 3  1.3333333         5.142259         6.214959           2.00817144 #> 4  2.0000000         9.638394         7.156806           0.94859302 #> 5  2.6666667        14.576264         7.601703           0.44808362 #> 6  3.3333333        19.722793         7.811858           0.21165971 #> 7  4.0000000        24.967886         7.911128           0.09998097 #> 8  4.6666667        30.259538         7.958020           0.04722767 #> 9  5.3333333        35.573182         7.980170           0.02230877 #> 10 6.0000000        40.897215         7.990633           0.01053792 #>    time_at_distance velocity_at_distance acceleration_at_distance #> 1         0.0000000             0.000000               9.00000000 #> 2         0.6666667             4.221068               4.25129897 #> 3         1.3333333             6.214959               2.00817144 #> 4         2.0000000             7.156806               0.94859302 #> 5         2.6666667             7.601703               0.44808362 #> 6         3.3333333             7.811858               0.21165971 #> 7         4.0000000             7.911128               0.09998097 #> 8         4.6666667             7.958020               0.04722767 #> 9         5.3333333             7.980170               0.02230877 #> 10        6.0000000             7.990633               0.01053792 #>    acceleration_at_velocity power_at_time #> 1                9.00000000        0.0000 #> 2                4.25129897     1818.3818 #> 3                2.00817144     1324.2919 #> 4                0.94859302      795.2812 #> 5                0.44808362      480.0949 #> 6                0.21165971      316.7110 #> 7                0.09998097      236.3057 #> 8                0.04722767      197.6055 #> 9                0.02230877      179.1643 #> 10               0.01053792      170.4175  # Example for predict_kinematics split_times <- data.frame(   distance = c(5, 10, 20, 30, 35),   time = c(1.20, 1.96, 3.36, 4.71, 5.35) )  # Simple model simple_model <- with(   split_times,   model_timing_gates(distance, time) )  predict_kinematics(simple_model) #>     time     distance  velocity acceleration bodymass inertia resistance #> 1   0.00 0.000000e+00 0.0000000 1.159360e+01       75       0          0 #> 2   0.01 5.766621e-04 0.1150318 1.141323e+01       75       0          0 #> 3   0.02 2.294670e-03 0.2282739 1.123566e+01       75       0          0 #> 4   0.03 5.136268e-03 0.3397542 1.106086e+01       75       0          0 #> 5   0.04 9.083973e-03 0.4495001 1.088877e+01       75       0          0 #> 6   0.05 1.412058e-02 0.5575386 1.071937e+01       75       0          0 #> 7   0.06 2.022914e-02 0.6638962 1.055259e+01       75       0          0 #> 8   0.07 2.739299e-02 0.7685991 1.038842e+01       75       0          0 #> 9   0.08 3.559570e-02 0.8716731 1.022679e+01       75       0          0 #> 10  0.09 4.482110e-02 0.9731434 1.006769e+01       75       0          0 #> 11  0.10 5.505330e-02 1.0730350 9.911052e+00       75       0          0 #> 12  0.11 6.627662e-02 1.1713725 9.756856e+00       75       0          0 #> 13  0.12 7.847565e-02 1.2681801 9.605059e+00       75       0          0 #> 14  0.13 9.163521e-02 1.3634816 9.455624e+00       75       0          0 #> 15  0.14 1.057403e-01 1.4573004 9.308514e+00       75       0          0 #> 16  0.15 1.207763e-01 1.5496595 9.163692e+00       75       0          0 #> 17  0.16 1.367287e-01 1.6405817 9.021123e+00       75       0          0 #> 18  0.17 1.535833e-01 1.7300894 8.880773e+00       75       0          0 #> 19  0.18 1.713259e-01 1.8182044 8.742606e+00       75       0          0 #> 20  0.19 1.899428e-01 1.9049486 8.606589e+00       75       0          0 #> 21  0.20 2.094204e-01 1.9903433 8.472687e+00       75       0          0 #> 22  0.21 2.297452e-01 2.0744093 8.340869e+00       75       0          0 #> 23  0.22 2.509042e-01 2.1571675 8.211102e+00       75       0          0 #> 24  0.23 2.728843e-01 2.2386381 8.083354e+00       75       0          0 #> 25  0.24 2.956727e-01 2.3188412 7.957593e+00       75       0          0 #> 26  0.25 3.192569e-01 2.3977965 7.833789e+00       75       0          0 #> 27  0.26 3.436246e-01 2.4755234 7.711911e+00       75       0          0 #> 28  0.27 3.687634e-01 2.5520410 7.591930e+00       75       0          0 #> 29  0.28 3.946614e-01 2.6273682 7.473815e+00       75       0          0 #> 30  0.29 4.213068e-01 2.7015235 7.357537e+00       75       0          0 #> 31  0.30 4.486880e-01 2.7745250 7.243069e+00       75       0          0 #> 32  0.31 4.767936e-01 2.8463908 7.130381e+00       75       0          0 #> 33  0.32 5.056121e-01 2.9171385 7.019447e+00       75       0          0 #> 34  0.33 5.351327e-01 2.9867855 6.910238e+00       75       0          0 #> 35  0.34 5.653442e-01 3.0553489 6.802729e+00       75       0          0 #> 36  0.35 5.962361e-01 3.1228456 6.696892e+00       75       0          0 #> 37  0.36 6.277976e-01 3.1892922 6.592702e+00       75       0          0 #> 38  0.37 6.600185e-01 3.2547051 6.490133e+00       75       0          0 #> 39  0.38 6.928883e-01 3.3191002 6.389159e+00       75       0          0 #> 40  0.39 7.263971e-01 3.3824935 6.289757e+00       75       0          0 #> 41  0.40 7.605349e-01 3.4449005 6.191901e+00       75       0          0 #> 42  0.41 7.952919e-01 3.5063366 6.095568e+00       75       0          0 #> 43  0.42 8.306585e-01 3.5668168 6.000733e+00       75       0          0 #> 44  0.43 8.666251e-01 3.6263562 5.907374e+00       75       0          0 #> 45  0.44 9.031825e-01 3.6849692 5.815467e+00       75       0          0 #> 46  0.45 9.403215e-01 3.7426703 5.724990e+00       75       0          0 #> 47  0.46 9.780329e-01 3.7994736 5.635921e+00       75       0          0 #> 48  0.47 1.016308e+00 3.8553933 5.548237e+00       75       0          0 #> 49  0.48 1.055138e+00 3.9104429 5.461918e+00       75       0          0 #> 50  0.49 1.094514e+00 3.9646361 5.376941e+00       75       0          0 #> 51  0.50 1.134428e+00 4.0179862 5.293287e+00       75       0          0 #> 52  0.51 1.174871e+00 4.0705062 5.210934e+00       75       0          0 #> 53  0.52 1.215835e+00 4.1222091 5.129862e+00       75       0          0 #> 54  0.53 1.257312e+00 4.1731076 5.050052e+00       75       0          0 #> 55  0.54 1.299295e+00 4.2232143 4.971483e+00       75       0          0 #> 56  0.55 1.341774e+00 4.2725414 4.894137e+00       75       0          0 #> 57  0.56 1.384743e+00 4.3211010 4.817994e+00       75       0          0 #> 58  0.57 1.428194e+00 4.3689052 4.743036e+00       75       0          0 #> 59  0.58 1.472119e+00 4.4159656 4.669244e+00       75       0          0 #> 60  0.59 1.516511e+00 4.4622939 4.596600e+00       75       0          0 #> 61  0.60 1.561362e+00 4.5079014 4.525086e+00       75       0          0 #> 62  0.61 1.606666e+00 4.5527993 4.454685e+00       75       0          0 #> 63  0.62 1.652416e+00 4.5969988 4.385379e+00       75       0          0 #> 64  0.63 1.698604e+00 4.6405105 4.317151e+00       75       0          0 #> 65  0.64 1.745224e+00 4.6833453 4.249985e+00       75       0          0 #> 66  0.65 1.792269e+00 4.7255137 4.183864e+00       75       0          0 #> 67  0.66 1.839732e+00 4.7670260 4.118771e+00       75       0          0 #> 68  0.67 1.887607e+00 4.8078925 4.054692e+00       75       0          0 #> 69  0.68 1.935888e+00 4.8481232 3.991609e+00       75       0          0 #> 70  0.69 1.984567e+00 4.8877280 3.929507e+00       75       0          0 #> 71  0.70 2.033640e+00 4.9267166 3.868372e+00       75       0          0 #> 72  0.71 2.083100e+00 4.9650986 3.808188e+00       75       0          0 #> 73  0.72 2.132940e+00 5.0028834 3.748940e+00       75       0          0 #> 74  0.73 2.183155e+00 5.0400805 3.690614e+00       75       0          0 #> 75  0.74 2.233740e+00 5.0766988 3.633196e+00       75       0          0 #> 76  0.75 2.284687e+00 5.1127473 3.576671e+00       75       0          0 #> 77  0.76 2.335993e+00 5.1482351 3.521025e+00       75       0          0 #> 78  0.77 2.387650e+00 5.1831707 3.466245e+00       75       0          0 #> 79  0.78 2.439654e+00 5.2175628 3.412317e+00       75       0          0 #> 80  0.79 2.492000e+00 5.2514199 3.359228e+00       75       0          0 #> 81  0.80 2.544681e+00 5.2847502 3.306966e+00       75       0          0 #> 82  0.81 2.597693e+00 5.3175619 3.255516e+00       75       0          0 #> 83  0.82 2.651031e+00 5.3498631 3.204867e+00       75       0          0 #> 84  0.83 2.704689e+00 5.3816618 3.155005e+00       75       0          0 #> 85  0.84 2.758662e+00 5.4129658 3.105920e+00       75       0          0 #> 86  0.85 2.812946e+00 5.4437828 3.057598e+00       75       0          0 #> 87  0.86 2.867536e+00 5.4741203 3.010028e+00       75       0          0 #> 88  0.87 2.922427e+00 5.5039858 2.963198e+00       75       0          0 #> 89  0.88 2.977614e+00 5.5333867 2.917097e+00       75       0          0 #> 90  0.89 3.033093e+00 5.5623301 2.871712e+00       75       0          0 #> 91  0.90 3.088859e+00 5.5908233 2.827034e+00       75       0          0 #> 92  0.91 3.144908e+00 5.6188731 2.783051e+00       75       0          0 #> 93  0.92 3.201235e+00 5.6464866 2.739753e+00       75       0          0 #> 94  0.93 3.257837e+00 5.6736704 2.697128e+00       75       0          0 #> 95  0.94 3.314707e+00 5.7004314 2.655166e+00       75       0          0 #> 96  0.95 3.371844e+00 5.7267759 2.613857e+00       75       0          0 #> 97  0.96 3.429242e+00 5.7527106 2.573190e+00       75       0          0 #> 98  0.97 3.486897e+00 5.7782418 2.533157e+00       75       0          0 #> 99  0.98 3.544805e+00 5.8033758 2.493746e+00       75       0          0 #> 100 0.99 3.602963e+00 5.8281188 2.454948e+00       75       0          0 #> 101 1.00 3.661366e+00 5.8524768 2.416754e+00       75       0          0 #> 102 1.01 3.720011e+00 5.8764559 2.379154e+00       75       0          0 #> 103 1.02 3.778894e+00 5.9000619 2.342140e+00       75       0          0 #> 104 1.03 3.838011e+00 5.9233006 2.305701e+00       75       0          0 #> 105 1.04 3.897359e+00 5.9461778 2.269829e+00       75       0          0 #> 106 1.05 3.956934e+00 5.9686990 2.234515e+00       75       0          0 #> 107 1.06 4.016732e+00 5.9908699 2.199750e+00       75       0          0 #> 108 1.07 4.076750e+00 6.0126958 2.165526e+00       75       0          0 #> 109 1.08 4.136984e+00 6.0341822 2.131835e+00       75       0          0 #> 110 1.09 4.197432e+00 6.0553343 2.098668e+00       75       0          0 #> 111 1.10 4.258090e+00 6.0761573 2.066017e+00       75       0          0 #> 112 1.11 4.318954e+00 6.0966563 2.033874e+00       75       0          0 #> 113 1.12 4.380022e+00 6.1168364 2.002231e+00       75       0          0 #> 114 1.13 4.441290e+00 6.1367026 1.971080e+00       75       0          0 #> 115 1.14 4.502755e+00 6.1562596 1.940414e+00       75       0          0 #> 116 1.15 4.564414e+00 6.1755125 1.910225e+00       75       0          0 #> 117 1.16 4.626264e+00 6.1944657 1.880506e+00       75       0          0 #> 118 1.17 4.688303e+00 6.2131241 1.851249e+00       75       0          0 #> 119 1.18 4.750526e+00 6.2314922 1.822448e+00       75       0          0 #> 120 1.19 4.812932e+00 6.2495746 1.794094e+00       75       0          0 #> 121 1.20 4.875516e+00 6.2673756 1.766181e+00       75       0          0 #> 122 1.21 4.938278e+00 6.2848996 1.738703e+00       75       0          0 #> 123 1.22 5.001214e+00 6.3021511 1.711653e+00       75       0          0 #> 124 1.23 5.064320e+00 6.3191341 1.685023e+00       75       0          0 #> 125 1.24 5.127595e+00 6.3358529 1.658807e+00       75       0          0 #> 126 1.25 5.191036e+00 6.3523116 1.632999e+00       75       0          0 #> 127 1.26 5.254641e+00 6.3685142 1.607593e+00       75       0          0 #> 128 1.27 5.318406e+00 6.3844648 1.582582e+00       75       0          0 #> 129 1.28 5.382329e+00 6.4001672 1.557961e+00       75       0          0 #> 130 1.29 5.446408e+00 6.4156253 1.533722e+00       75       0          0 #> 131 1.30 5.510641e+00 6.4308429 1.509860e+00       75       0          0 #> 132 1.31 5.575024e+00 6.4458237 1.486370e+00       75       0          0 #> 133 1.32 5.639557e+00 6.4605715 1.463245e+00       75       0          0 #> 134 1.33 5.704235e+00 6.4750898 1.440480e+00       75       0          0 #> 135 1.34 5.769058e+00 6.4893823 1.418069e+00       75       0          0 #> 136 1.35 5.834022e+00 6.5034523 1.396007e+00       75       0          0 #> 137 1.36 5.899126e+00 6.5173035 1.374287e+00       75       0          0 #> 138 1.37 5.964367e+00 6.5309392 1.352906e+00       75       0          0 #> 139 1.38 6.029744e+00 6.5443628 1.331858e+00       75       0          0 #> 140 1.39 6.095254e+00 6.5575775 1.311137e+00       75       0          0 #> 141 1.40 6.160895e+00 6.5705866 1.290738e+00       75       0          0 #> 142 1.41 6.226665e+00 6.5833933 1.270657e+00       75       0          0 #> 143 1.42 6.292562e+00 6.5960008 1.250888e+00       75       0          0 #> 144 1.43 6.358584e+00 6.6084121 1.231427e+00       75       0          0 #> 145 1.44 6.424730e+00 6.6206303 1.212268e+00       75       0          0 #> 146 1.45 6.490996e+00 6.6326584 1.193408e+00       75       0          0 #> 147 1.46 6.557382e+00 6.6444994 1.174841e+00       75       0          0 #> 148 1.47 6.623886e+00 6.6561562 1.156563e+00       75       0          0 #> 149 1.48 6.690505e+00 6.6676316 1.138569e+00       75       0          0 #> 150 1.49 6.757238e+00 6.6789285 1.120855e+00       75       0          0 #> 151 1.50 6.824083e+00 6.6900496 1.103417e+00       75       0          0 #> 152 1.51 6.891038e+00 6.7009978 1.086250e+00       75       0          0 #> 153 1.52 6.958102e+00 6.7117755 1.069350e+00       75       0          0 #> 154 1.53 7.025273e+00 6.7223856 1.052713e+00       75       0          0 #> 155 1.54 7.092549e+00 6.7328307 1.036335e+00       75       0          0 #> 156 1.55 7.159929e+00 6.7431132 1.020212e+00       75       0          0 #> 157 1.56 7.227411e+00 6.7532357 1.004339e+00       75       0          0 #> 158 1.57 7.294993e+00 6.7632008 9.887137e-01       75       0          0 #> 159 1.58 7.362675e+00 6.7730108 9.733313e-01       75       0          0 #> 160 1.59 7.430453e+00 6.7826682 9.581882e-01       75       0          0 #> 161 1.60 7.498327e+00 6.7921754 9.432808e-01       75       0          0 #> 162 1.61 7.566296e+00 6.8015346 9.286052e-01       75       0          0 #> 163 1.62 7.634358e+00 6.8107482 9.141580e-01       75       0          0 #> 164 1.63 7.702511e+00 6.8198185 8.999355e-01       75       0          0 #> 165 1.64 7.770754e+00 6.8287477 8.859344e-01       75       0          0 #> 166 1.65 7.839085e+00 6.8375379 8.721510e-01       75       0          0 #> 167 1.66 7.907504e+00 6.8461914 8.585821e-01       75       0          0 #> 168 1.67 7.976008e+00 6.8547103 8.452243e-01       75       0          0 #> 169 1.68 8.044598e+00 6.8630966 8.320743e-01       75       0          0 #> 170 1.69 8.113270e+00 6.8713524 8.191289e-01       75       0          0 #> 171 1.70 8.182024e+00 6.8794798 8.063849e-01       75       0          0 #> 172 1.71 8.250859e+00 6.8874808 7.938392e-01       75       0          0 #> 173 1.72 8.319773e+00 6.8953573 7.814887e-01       75       0          0 #> 174 1.73 8.388766e+00 6.9031112 7.693303e-01       75       0          0 #> 175 1.74 8.457835e+00 6.9107445 7.573610e-01       75       0          0 #> 176 1.75 8.526980e+00 6.9182590 7.455780e-01       75       0          0 #> 177 1.76 8.596200e+00 6.9256567 7.339783e-01       75       0          0 #> 178 1.77 8.665493e+00 6.9329392 7.225591e-01       75       0          0 #> 179 1.78 8.734858e+00 6.9401085 7.113176e-01       75       0          0 #> 180 1.79 8.804295e+00 6.9471661 7.002509e-01       75       0          0 #> 181 1.80 8.873801e+00 6.9541140 6.893564e-01       75       0          0 #> 182 1.81 8.943377e+00 6.9609538 6.786314e-01       75       0          0 #> 183 1.82 9.013020e+00 6.9676872 6.680733e-01       75       0          0 #> 184 1.83 9.082730e+00 6.9743159 6.576794e-01       75       0          0 #> 185 1.84 9.152506e+00 6.9808414 6.474472e-01       75       0          0 #> 186 1.85 9.222347e+00 6.9872653 6.373742e-01       75       0          0 #> 187 1.86 9.292251e+00 6.9935894 6.274580e-01       75       0          0 #> 188 1.87 9.362218e+00 6.9998150 6.176960e-01       75       0          0 #> 189 1.88 9.432247e+00 7.0059438 6.080859e-01       75       0          0 #> 190 1.89 9.502337e+00 7.0119772 5.986253e-01       75       0          0 #> 191 1.90 9.572486e+00 7.0179168 5.893119e-01       75       0          0 #> 192 1.91 9.642695e+00 7.0237639 5.801434e-01       75       0          0 #> 193 1.92 9.712961e+00 7.0295201 5.711175e-01       75       0          0 #> 194 1.93 9.783285e+00 7.0351868 5.622321e-01       75       0          0 #> 195 1.94 9.853665e+00 7.0407652 5.534849e-01       75       0          0 #> 196 1.95 9.924100e+00 7.0462569 5.448738e-01       75       0          0 #> 197 1.96 9.994590e+00 7.0516632 5.363967e-01       75       0          0 #> 198 1.97 1.006513e+01 7.0569853 5.280514e-01       75       0          0 #> 199 1.98 1.013573e+01 7.0622246 5.198360e-01       75       0          0 #> 200 1.99 1.020638e+01 7.0673824 5.117484e-01       75       0          0 #> 201 2.00 1.027708e+01 7.0724600 5.037866e-01       75       0          0 #> 202 2.01 1.034783e+01 7.0774586 4.959487e-01       75       0          0 #> 203 2.02 1.041863e+01 7.0823794 4.882328e-01       75       0          0 #> 204 2.03 1.048947e+01 7.0872236 4.806368e-01       75       0          0 #> 205 2.04 1.056037e+01 7.0919925 4.731591e-01       75       0          0 #> 206 2.05 1.063131e+01 7.0966872 4.657977e-01       75       0          0 #> 207 2.06 1.070230e+01 7.1013089 4.585508e-01       75       0          0 #> 208 2.07 1.077334e+01 7.1058586 4.514167e-01       75       0          0 #> 209 2.08 1.084442e+01 7.1103376 4.443936e-01       75       0          0 #> 210 2.09 1.091555e+01 7.1147468 4.374797e-01       75       0          0 #> 211 2.10 1.098671e+01 7.1190875 4.306734e-01       75       0          0 #> 212 2.11 1.105793e+01 7.1233607 4.239730e-01       75       0          0 #> 213 2.12 1.112918e+01 7.1275673 4.173768e-01       75       0          0 #> 214 2.13 1.120048e+01 7.1317085 4.108833e-01       75       0          0 #> 215 2.14 1.127182e+01 7.1357853 4.044908e-01       75       0          0 #> 216 2.15 1.134319e+01 7.1397987 3.981977e-01       75       0          0 #> 217 2.16 1.141461e+01 7.1437496 3.920026e-01       75       0          0 #> 218 2.17 1.148607e+01 7.1476390 3.859038e-01       75       0          0 #> 219 2.18 1.155756e+01 7.1514680 3.798999e-01       75       0          0 #> 220 2.19 1.162910e+01 7.1552374 3.739894e-01       75       0          0 #> 221 2.20 1.170067e+01 7.1589481 3.681709e-01       75       0          0 #> 222 2.21 1.177228e+01 7.1626011 3.624429e-01       75       0          0 #> 223 2.22 1.184392e+01 7.1661972 3.568040e-01       75       0          0 #> 224 2.23 1.191560e+01 7.1697375 3.512529e-01       75       0          0 #> 225 2.24 1.198731e+01 7.1732226 3.457881e-01       75       0          0 #> 226 2.25 1.205906e+01 7.1766535 3.404083e-01       75       0          0 #> 227 2.26 1.213085e+01 7.1800310 3.351123e-01       75       0          0 #> 228 2.27 1.220266e+01 7.1833560 3.298986e-01       75       0          0 #> 229 2.28 1.227451e+01 7.1866293 3.247660e-01       75       0          0 #> 230 2.29 1.234640e+01 7.1898516 3.197133e-01       75       0          0 #> 231 2.30 1.241831e+01 7.1930238 3.147392e-01       75       0          0 #> 232 2.31 1.249026e+01 7.1961466 3.098425e-01       75       0          0 #> 233 2.32 1.256223e+01 7.1992209 3.050220e-01       75       0          0 #> 234 2.33 1.263424e+01 7.2022473 3.002765e-01       75       0          0 #> 235 2.34 1.270628e+01 7.2052267 2.956048e-01       75       0          0 #> 236 2.35 1.277835e+01 7.2081597 2.910058e-01       75       0          0 #> 237 2.36 1.285044e+01 7.2110470 2.864783e-01       75       0          0 #> 238 2.37 1.292257e+01 7.2138895 2.820213e-01       75       0          0 #> 239 2.38 1.299472e+01 7.2166877 2.776336e-01       75       0          0 #> 240 2.39 1.306690e+01 7.2194424 2.733142e-01       75       0          0 #> 241 2.40 1.313911e+01 7.2221542 2.690620e-01       75       0          0 #> 242 2.41 1.321134e+01 7.2248238 2.648759e-01       75       0          0 #> 243 2.42 1.328360e+01 7.2274519 2.607550e-01       75       0          0 #> 244 2.43 1.335589e+01 7.2300391 2.566981e-01       75       0          0 #> 245 2.44 1.342821e+01 7.2325861 2.527044e-01       75       0          0 #> 246 2.45 1.350054e+01 7.2350934 2.487729e-01       75       0          0 #> 247 2.46 1.357291e+01 7.2375618 2.449025e-01       75       0          0 #> 248 2.47 1.364530e+01 7.2399917 2.410923e-01       75       0          0 #> 249 2.48 1.371771e+01 7.2423838 2.373414e-01       75       0          0 #> 250 2.49 1.379014e+01 7.2447387 2.336488e-01       75       0          0 #> 251 2.50 1.386260e+01 7.2470570 2.300137e-01       75       0          0 #> 252 2.51 1.393508e+01 7.2493392 2.264352e-01       75       0          0 #> 253 2.52 1.400759e+01 7.2515859 2.229123e-01       75       0          0 #> 254 2.53 1.408012e+01 7.2537976 2.194442e-01       75       0          0 #> 255 2.54 1.415266e+01 7.2559749 2.160301e-01       75       0          0 #> 256 2.55 1.422523e+01 7.2581184 2.126691e-01       75       0          0 #> 257 2.56 1.429783e+01 7.2602285 2.093604e-01       75       0          0 #> 258 2.57 1.437044e+01 7.2623058 2.061032e-01       75       0          0 #> 259 2.58 1.444307e+01 7.2643507 2.028966e-01       75       0          0 #> 260 2.59 1.451573e+01 7.2663639 1.997400e-01       75       0          0 #> 261 2.60 1.458840e+01 7.2683457 1.966324e-01       75       0          0 #> 262 2.61 1.466109e+01 7.2702967 1.935732e-01       75       0          0 #> 263 2.62 1.473381e+01 7.2722173 1.905616e-01       75       0          0 #> 264 2.63 1.480654e+01 7.2741081 1.875969e-01       75       0          0 #> 265 2.64 1.487929e+01 7.2759694 1.846782e-01       75       0          0 #> 266 2.65 1.495206e+01 7.2778018 1.818050e-01       75       0          0 #> 267 2.66 1.502484e+01 7.2796056 1.789765e-01       75       0          0 #> 268 2.67 1.509765e+01 7.2813815 1.761920e-01       75       0          0 #> 269 2.68 1.517047e+01 7.2831296 1.734508e-01       75       0          0 #> 270 2.69 1.524331e+01 7.2848506 1.707522e-01       75       0          0 #> 271 2.70 1.531617e+01 7.2865448 1.680957e-01       75       0          0 #> 272 2.71 1.538904e+01 7.2882127 1.654804e-01       75       0          0 #> 273 2.72 1.546193e+01 7.2898546 1.629059e-01       75       0          0 #> 274 2.73 1.553484e+01 7.2914709 1.603714e-01       75       0          0 #> 275 2.74 1.560776e+01 7.2930621 1.578764e-01       75       0          0 #> 276 2.75 1.568070e+01 7.2946286 1.554201e-01       75       0          0 #> 277 2.76 1.575365e+01 7.2961706 1.530021e-01       75       0          0 #> 278 2.77 1.582662e+01 7.2976887 1.506217e-01       75       0          0 #> 279 2.78 1.589961e+01 7.2991832 1.482783e-01       75       0          0 #> 280 2.79 1.597261e+01 7.3006544 1.459714e-01       75       0          0 #> 281 2.80 1.604562e+01 7.3021028 1.437004e-01       75       0          0 #> 282 2.81 1.611865e+01 7.3035285 1.414647e-01       75       0          0 #> 283 2.82 1.619169e+01 7.3049322 1.392638e-01       75       0          0 #> 284 2.83 1.626475e+01 7.3063139 1.370971e-01       75       0          0 #> 285 2.84 1.633782e+01 7.3076742 1.349642e-01       75       0          0 #> 286 2.85 1.641090e+01 7.3090133 1.328644e-01       75       0          0 #> 287 2.86 1.648400e+01 7.3103316 1.307973e-01       75       0          0 #> 288 2.87 1.655711e+01 7.3116294 1.287624e-01       75       0          0 #> 289 2.88 1.663023e+01 7.3129070 1.267591e-01       75       0          0 #> 290 2.89 1.670337e+01 7.3141647 1.247870e-01       75       0          0 #> 291 2.90 1.677651e+01 7.3154028 1.228455e-01       75       0          0 #> 292 2.91 1.684967e+01 7.3166217 1.209343e-01       75       0          0 #> 293 2.92 1.692285e+01 7.3178216 1.190528e-01       75       0          0 #> 294 2.93 1.699603e+01 7.3190028 1.172006e-01       75       0          0 #> 295 2.94 1.706923e+01 7.3201657 1.153772e-01       75       0          0 #> 296 2.95 1.714243e+01 7.3213105 1.135821e-01       75       0          0 #> 297 2.96 1.721565e+01 7.3224374 1.118150e-01       75       0          0 #> 298 2.97 1.728888e+01 7.3235469 1.100754e-01       75       0          0 #> 299 2.98 1.736212e+01 7.3246390 1.083629e-01       75       0          0 #> 300 2.99 1.743537e+01 7.3257142 1.066770e-01       75       0          0 #> 301 3.00 1.750864e+01 7.3267727 1.050173e-01       75       0          0 #> 302 3.01 1.758191e+01 7.3278146 1.033834e-01       75       0          0 #> 303 3.02 1.765519e+01 7.3288404 1.017750e-01       75       0          0 #> 304 3.03 1.772849e+01 7.3298502 1.001916e-01       75       0          0 #> 305 3.04 1.780179e+01 7.3308443 9.863279e-02       75       0          0 #> 306 3.05 1.787510e+01 7.3318230 9.709827e-02       75       0          0 #> 307 3.06 1.794843e+01 7.3327864 9.558761e-02       75       0          0 #> 308 3.07 1.802176e+01 7.3337348 9.410046e-02       75       0          0 #> 309 3.08 1.809510e+01 7.3346685 9.263645e-02       75       0          0 #> 310 3.09 1.816845e+01 7.3355876 9.119521e-02       75       0          0 #> 311 3.10 1.824181e+01 7.3364924 8.977640e-02       75       0          0 #> 312 3.11 1.831518e+01 7.3373832 8.837966e-02       75       0          0 #> 313 3.12 1.838856e+01 7.3382601 8.700465e-02       75       0          0 #> 314 3.13 1.846195e+01 7.3391234 8.565103e-02       75       0          0 #> 315 3.14 1.853534e+01 7.3399732 8.431848e-02       75       0          0 #> 316 3.15 1.860875e+01 7.3408098 8.300665e-02       75       0          0 #> 317 3.16 1.868216e+01 7.3416334 8.171524e-02       75       0          0 #> 318 3.17 1.875558e+01 7.3424442 8.044391e-02       75       0          0 #> 319 3.18 1.882901e+01 7.3432423 7.919237e-02       75       0          0 #> 320 3.19 1.890244e+01 7.3440281 7.796029e-02       75       0          0 #> 321 3.20 1.897589e+01 7.3448016 7.674739e-02       75       0          0 #> 322 3.21 1.904934e+01 7.3455631 7.555335e-02       75       0          0 #> 323 3.22 1.912280e+01 7.3463127 7.437790e-02       75       0          0 #> 324 3.23 1.919627e+01 7.3470507 7.322073e-02       75       0          0 #> 325 3.24 1.926974e+01 7.3477772 7.208156e-02       75       0          0 #> 326 3.25 1.934322e+01 7.3484924 7.096011e-02       75       0          0 #> 327 3.26 1.941671e+01 7.3491965 6.985612e-02       75       0          0 #> 328 3.27 1.949021e+01 7.3498896 6.876930e-02       75       0          0 #> 329 3.28 1.956371e+01 7.3505719 6.769939e-02       75       0          0 #> 330 3.29 1.963722e+01 7.3512436 6.664612e-02       75       0          0 #> 331 3.30 1.971073e+01 7.3519049 6.560924e-02       75       0          0 #> 332 3.31 1.978426e+01 7.3525559 6.458849e-02       75       0          0 #> 333 3.32 1.985778e+01 7.3531967 6.358363e-02       75       0          0 #> 334 3.33 1.993132e+01 7.3538276 6.259439e-02       75       0          0 #> 335 3.34 2.000486e+01 7.3544487 6.162055e-02       75       0          0 #> 336 3.35 2.007841e+01 7.3550601 6.066186e-02       75       0          0 #> 337 3.36 2.015196e+01 7.3556619 5.971808e-02       75       0          0 #> 338 3.37 2.022552e+01 7.3562545 5.878899e-02       75       0          0 #> 339 3.38 2.029909e+01 7.3568378 5.787435e-02       75       0          0 #> 340 3.39 2.037266e+01 7.3574120 5.697394e-02       75       0          0 #> 341 3.40 2.044623e+01 7.3579773 5.608754e-02       75       0          0 #> 342 3.41 2.051982e+01 7.3585338 5.521494e-02       75       0          0 #> 343 3.42 2.059341e+01 7.3590816 5.435590e-02       75       0          0 #> 344 3.43 2.066700e+01 7.3596210 5.351023e-02       75       0          0 #> 345 3.44 2.074060e+01 7.3601519 5.267772e-02       75       0          0 #> 346 3.45 2.081420e+01 7.3606746 5.185816e-02       75       0          0 #> 347 3.46 2.088781e+01 7.3611891 5.105136e-02       75       0          0 #> 348 3.47 2.096143e+01 7.3616956 5.025710e-02       75       0          0 #> 349 3.48 2.103505e+01 7.3621943 4.947520e-02       75       0          0 #> 350 3.49 2.110867e+01 7.3626852 4.870547e-02       75       0          0 #> 351 3.50 2.118230e+01 7.3631684 4.794771e-02       75       0          0 #> 352 3.51 2.125593e+01 7.3636442 4.720174e-02       75       0          0 #> 353 3.52 2.132957e+01 7.3641125 4.646737e-02       75       0          0 #> 354 3.53 2.140322e+01 7.3645736 4.574444e-02       75       0          0 #> 355 3.54 2.147686e+01 7.3650274 4.503274e-02       75       0          0 #> 356 3.55 2.155052e+01 7.3654742 4.433213e-02       75       0          0 #> 357 3.56 2.162417e+01 7.3659141 4.364241e-02       75       0          0 #> 358 3.57 2.169783e+01 7.3663471 4.296342e-02       75       0          0 #> 359 3.58 2.177150e+01 7.3667734 4.229499e-02       75       0          0 #> 360 3.59 2.184517e+01 7.3671931 4.163697e-02       75       0          0 #> 361 3.60 2.191884e+01 7.3676062 4.098918e-02       75       0          0 #> 362 3.61 2.199252e+01 7.3680129 4.035147e-02       75       0          0 #> 363 3.62 2.206620e+01 7.3684132 3.972369e-02       75       0          0 #> 364 3.63 2.213989e+01 7.3688074 3.910567e-02       75       0          0 #> 365 3.64 2.221358e+01 7.3691954 3.849726e-02       75       0          0 #> 366 3.65 2.228727e+01 7.3695774 3.789832e-02       75       0          0 #> 367 3.66 2.236097e+01 7.3699534 3.730870e-02       75       0          0 #> 368 3.67 2.243467e+01 7.3703236 3.672825e-02       75       0          0 #> 369 3.68 2.250838e+01 7.3706880 3.615683e-02       75       0          0 #> 370 3.69 2.258209e+01 7.3710467 3.559431e-02       75       0          0 #> 371 3.70 2.265580e+01 7.3713999 3.504053e-02       75       0          0 #> 372 3.71 2.272951e+01 7.3717476 3.449537e-02       75       0          0 #> 373 3.72 2.280323e+01 7.3720898 3.395869e-02       75       0          0 #> 374 3.73 2.287696e+01 7.3724268 3.343036e-02       75       0          0 #> 375 3.74 2.295068e+01 7.3727585 3.291025e-02       75       0          0 #> 376 3.75 2.302441e+01 7.3730850 3.239824e-02       75       0          0 #> 377 3.76 2.309814e+01 7.3734065 3.189419e-02       75       0          0 #> 378 3.77 2.317188e+01 7.3737229 3.139798e-02       75       0          0 #> 379 3.78 2.324562e+01 7.3740344 3.090949e-02       75       0          0 #> 380 3.79 2.331936e+01 7.3743411 3.042860e-02       75       0          0 #> 381 3.80 2.339311e+01 7.3746430 2.995519e-02       75       0          0 #> 382 3.81 2.346685e+01 7.3749403 2.948915e-02       75       0          0 #> 383 3.82 2.354060e+01 7.3752329 2.903036e-02       75       0          0 #> 384 3.83 2.361436e+01 7.3755209 2.857870e-02       75       0          0 #> 385 3.84 2.368811e+01 7.3758044 2.813408e-02       75       0          0 #> 386 3.85 2.376187e+01 7.3760836 2.769637e-02       75       0          0 #> 387 3.86 2.383564e+01 7.3763584 2.726547e-02       75       0          0 #> 388 3.87 2.390940e+01 7.3766289 2.684127e-02       75       0          0 #> 389 3.88 2.398317e+01 7.3768952 2.642367e-02       75       0          0 #> 390 3.89 2.405694e+01 7.3771574 2.601258e-02       75       0          0 #> 391 3.90 2.413071e+01 7.3774155 2.560787e-02       75       0          0 #> 392 3.91 2.420449e+01 7.3776696 2.520947e-02       75       0          0 #> 393 3.92 2.427827e+01 7.3779197 2.481726e-02       75       0          0 #> 394 3.93 2.435205e+01 7.3781660 2.443115e-02       75       0          0 #> 395 3.94 2.442583e+01 7.3784084 2.405105e-02       75       0          0 #> 396 3.95 2.449961e+01 7.3786470 2.367687e-02       75       0          0 #> 397 3.96 2.457340e+01 7.3788819 2.330850e-02       75       0          0 #> 398 3.97 2.464719e+01 7.3791132 2.294587e-02       75       0          0 #> 399 3.98 2.472098e+01 7.3793409 2.258888e-02       75       0          0 #> 400 3.99 2.479478e+01 7.3795650 2.223744e-02       75       0          0 #> 401 4.00 2.486857e+01 7.3797856 2.189147e-02       75       0          0 #> 402 4.01 2.494237e+01 7.3800028 2.155088e-02       75       0          0 #> 403 4.02 2.501617e+01 7.3802167 2.121559e-02       75       0          0 #> 404 4.03 2.508998e+01 7.3804272 2.088552e-02       75       0          0 #> 405 4.04 2.516378e+01 7.3806344 2.056059e-02       75       0          0 #> 406 4.05 2.523759e+01 7.3808384 2.024070e-02       75       0          0 #> 407 4.06 2.531140e+01 7.3810392 1.992580e-02       75       0          0 #> 408 4.07 2.538521e+01 7.3812369 1.961579e-02       75       0          0 #> 409 4.08 2.545902e+01 7.3814316 1.931061e-02       75       0          0 #> 410 4.09 2.553284e+01 7.3816232 1.901018e-02       75       0          0 #> 411 4.10 2.560666e+01 7.3818118 1.871442e-02       75       0          0 #> 412 4.11 2.568048e+01 7.3819975 1.842326e-02       75       0          0 #> 413 4.12 2.575430e+01 7.3821803 1.813663e-02       75       0          0 #> 414 4.13 2.582812e+01 7.3823602 1.785446e-02       75       0          0 #> 415 4.14 2.590194e+01 7.3825374 1.757668e-02       75       0          0 #> 416 4.15 2.597577e+01 7.3827118 1.730322e-02       75       0          0 #> 417 4.16 2.604960e+01 7.3828834 1.703402e-02       75       0          0 #> 418 4.17 2.612343e+01 7.3830525 1.676901e-02       75       0          0 #> 419 4.18 2.619726e+01 7.3832188 1.650811e-02       75       0          0 #> 420 4.19 2.627109e+01 7.3833826 1.625128e-02       75       0          0 #> 421 4.20 2.634493e+01 7.3835439 1.599844e-02       75       0          0 #> 422 4.21 2.641876e+01 7.3837026 1.574954e-02       75       0          0 #> 423 4.22 2.649260e+01 7.3838589 1.550451e-02       75       0          0 #> 424 4.23 2.656644e+01 7.3840127 1.526329e-02       75       0          0 #> 425 4.24 2.664028e+01 7.3841642 1.502582e-02       75       0          0 #> 426 4.25 2.671412e+01 7.3843132 1.479205e-02       75       0          0 #> 427 4.26 2.678797e+01 7.3844600 1.456192e-02       75       0          0 #> 428 4.27 2.686181e+01 7.3846045 1.433536e-02       75       0          0 #> 429 4.28 2.693566e+01 7.3847467 1.411233e-02       75       0          0 #> 430 4.29 2.700951e+01 7.3848867 1.389278e-02       75       0          0 #> 431 4.30 2.708336e+01 7.3850246 1.367663e-02       75       0          0 #> 432 4.31 2.715721e+01 7.3851603 1.346385e-02       75       0          0 #> 433 4.32 2.723106e+01 7.3852939 1.325438e-02       75       0          0 #> 434 4.33 2.730491e+01 7.3854254 1.304817e-02       75       0          0 #> 435 4.34 2.737877e+01 7.3855549 1.284517e-02       75       0          0 #> 436 4.35 2.745263e+01 7.3856823 1.264532e-02       75       0          0 #> 437 4.36 2.752648e+01 7.3858078 1.244859e-02       75       0          0 #> 438 4.37 2.760034e+01 7.3859313 1.225491e-02       75       0          0 #> 439 4.38 2.767420e+01 7.3860529 1.206425e-02       75       0          0 #> 440 4.39 2.774806e+01 7.3861726 1.187655e-02       75       0          0 #> 441 4.40 2.782193e+01 7.3862904 1.169178e-02       75       0          0 #> 442 4.41 2.789579e+01 7.3864064 1.150988e-02       75       0          0 #> 443 4.42 2.796965e+01 7.3865206 1.133081e-02       75       0          0 #> 444 4.43 2.804352e+01 7.3866331 1.115452e-02       75       0          0 #> 445 4.44 2.811739e+01 7.3867437 1.098098e-02       75       0          0 #> 446 4.45 2.819125e+01 7.3868527 1.081014e-02       75       0          0 #> 447 4.46 2.826512e+01 7.3869599 1.064195e-02       75       0          0 #> 448 4.47 2.833899e+01 7.3870655 1.047639e-02       75       0          0 #> 449 4.48 2.841286e+01 7.3871695 1.031340e-02       75       0          0 #> 450 4.49 2.848674e+01 7.3872718 1.015294e-02       75       0          0 #> 451 4.50 2.856061e+01 7.3873725 9.994981e-03       75       0          0 #> 452 4.51 2.863448e+01 7.3874717 9.839479e-03       75       0          0 #> 453 4.52 2.870836e+01 7.3875693 9.686397e-03       75       0          0 #> 454 4.53 2.878224e+01 7.3876654 9.535696e-03       75       0          0 #> 455 4.54 2.885611e+01 7.3877601 9.387340e-03       75       0          0 #> 456 4.55 2.892999e+01 7.3878532 9.241292e-03       75       0          0 #> 457 4.56 2.900387e+01 7.3879449 9.097516e-03       75       0          0 #> 458 4.57 2.907775e+01 7.3880352 8.955977e-03       75       0          0 #> 459 4.58 2.915163e+01 7.3881240 8.816640e-03       75       0          0 #> 460 4.59 2.922551e+01 7.3882115 8.679471e-03       75       0          0 #> 461 4.60 2.929939e+01 7.3882976 8.544436e-03       75       0          0 #> 462 4.61 2.937328e+01 7.3883824 8.411502e-03       75       0          0 #> 463 4.62 2.944716e+01 7.3884659 8.280636e-03       75       0          0 #> 464 4.63 2.952105e+01 7.3885480 8.151806e-03       75       0          0 #> 465 4.64 2.959493e+01 7.3886289 8.024980e-03       75       0          0 #> 466 4.65 2.966882e+01 7.3887085 7.900128e-03       75       0          0 #> 467 4.66 2.974271e+01 7.3887869 7.777218e-03       75       0          0 #> 468 4.67 2.981660e+01 7.3888641 7.656220e-03       75       0          0 #> 469 4.68 2.989048e+01 7.3889400 7.537104e-03       75       0          0 #> 470 4.69 2.996437e+01 7.3890148 7.419842e-03       75       0          0 #> 471 4.70 3.003826e+01 7.3890884 7.304404e-03       75       0          0 #> 472 4.71 3.011216e+01 7.3891609 7.190763e-03       75       0          0 #> 473 4.72 3.018605e+01 7.3892323 7.078889e-03       75       0          0 #> 474 4.73 3.025994e+01 7.3893025 6.968756e-03       75       0          0 #> 475 4.74 3.033383e+01 7.3893716 6.860336e-03       75       0          0 #> 476 4.75 3.040773e+01 7.3894397 6.753603e-03       75       0          0 #> 477 4.76 3.048162e+01 7.3895067 6.648530e-03       75       0          0 #> 478 4.77 3.055552e+01 7.3895727 6.545093e-03       75       0          0 #> 479 4.78 3.062941e+01 7.3896376 6.443264e-03       75       0          0 #> 480 4.79 3.070331e+01 7.3897016 6.343020e-03       75       0          0 #> 481 4.80 3.077721e+01 7.3897645 6.244335e-03       75       0          0 #> 482 4.81 3.085111e+01 7.3898264 6.147186e-03       75       0          0 #> 483 4.82 3.092500e+01 7.3898874 6.051548e-03       75       0          0 #> 484 4.83 3.099890e+01 7.3899475 5.957398e-03       75       0          0 #> 485 4.84 3.107280e+01 7.3900066 5.864713e-03       75       0          0 #> 486 4.85 3.114670e+01 7.3900648 5.773470e-03       75       0          0 #> 487 4.86 3.122061e+01 7.3901221 5.683647e-03       75       0          0 #> 488 4.87 3.129451e+01 7.3901785 5.595221e-03       75       0          0 #> 489 4.88 3.136841e+01 7.3902340 5.508170e-03       75       0          0 #> 490 4.89 3.144231e+01 7.3902886 5.422474e-03       75       0          0 #> 491 4.90 3.151621e+01 7.3903424 5.338111e-03       75       0          0 #> 492 4.91 3.159012e+01 7.3903954 5.255061e-03       75       0          0 #> 493 4.92 3.166402e+01 7.3904475 5.173303e-03       75       0          0 #> 494 4.93 3.173793e+01 7.3904989 5.092817e-03       75       0          0 #> 495 4.94 3.181183e+01 7.3905494 5.013583e-03       75       0          0 #> 496 4.95 3.188574e+01 7.3905991 4.935582e-03       75       0          0 #> 497 4.96 3.195964e+01 7.3906481 4.858794e-03       75       0          0 #> 498 4.97 3.203355e+01 7.3906963 4.783201e-03       75       0          0 #> 499 4.98 3.210746e+01 7.3907438 4.708784e-03       75       0          0 #> 500 4.99 3.218137e+01 7.3907905 4.635525e-03       75       0          0 #> 501 5.00 3.225527e+01 7.3908365 4.563405e-03       75       0          0 #> 502 5.01 3.232918e+01 7.3908818 4.492408e-03       75       0          0 #> 503 5.02 3.240309e+01 7.3909263 4.422515e-03       75       0          0 #> 504 5.03 3.247700e+01 7.3909702 4.353710e-03       75       0          0 #> 505 5.04 3.255091e+01 7.3910134 4.285975e-03       75       0          0 #> 506 5.05 3.262482e+01 7.3910560 4.219294e-03       75       0          0 #> 507 5.06 3.269873e+01 7.3910978 4.153650e-03       75       0          0 #> 508 5.07 3.277264e+01 7.3911390 4.089028e-03       75       0          0 #> 509 5.08 3.284655e+01 7.3911796 4.025411e-03       75       0          0 #> 510 5.09 3.292047e+01 7.3912195 3.962783e-03       75       0          0 #> 511 5.10 3.299438e+01 7.3912589 3.901130e-03       75       0          0 #> 512 5.11 3.306829e+01 7.3912976 3.840437e-03       75       0          0 #> 513 5.12 3.314221e+01 7.3913357 3.780687e-03       75       0          0 #> 514 5.13 3.321612e+01 7.3913732 3.721867e-03       75       0          0 #> 515 5.14 3.329003e+01 7.3914101 3.663963e-03       75       0          0 #> 516 5.15 3.336395e+01 7.3914465 3.606959e-03       75       0          0 #> 517 5.16 3.343786e+01 7.3914823 3.550842e-03       75       0          0 #> 518 5.17 3.351178e+01 7.3915175 3.495598e-03       75       0          0 #> 519 5.18 3.358569e+01 7.3915522 3.441213e-03       75       0          0 #> 520 5.19 3.365961e+01 7.3915863 3.387675e-03       75       0          0 #> 521 5.20 3.373352e+01 7.3916199 3.334970e-03       75       0          0 #> 522 5.21 3.380744e+01 7.3916530 3.283084e-03       75       0          0 #> 523 5.22 3.388136e+01 7.3916856 3.232006e-03       75       0          0 #> 524 5.23 3.395527e+01 7.3917177 3.181723e-03       75       0          0 #> 525 5.24 3.402919e+01 7.3917492 3.132221e-03       75       0          0 #> 526 5.25 3.410311e+01 7.3917803 3.083490e-03       75       0          0 #> 527 5.26 3.417703e+01 7.3918109 3.035517e-03       75       0          0 #> 528 5.27 3.425095e+01 7.3918410 2.988291e-03       75       0          0 #> 529 5.28 3.432486e+01 7.3918707 2.941799e-03       75       0          0 #> 530 5.29 3.439878e+01 7.3918999 2.896031e-03       75       0          0 #> 531 5.30 3.447270e+01 7.3919286 2.850974e-03       75       0          0 #> 532 5.31 3.454662e+01 7.3919569 2.806619e-03       75       0          0 #> 533 5.32 3.462054e+01 7.3919847 2.762954e-03       75       0          0 #> 534 5.33 3.469446e+01 7.3920121 2.719968e-03       75       0          0 #> 535 5.34 3.476838e+01 7.3920391 2.677650e-03       75       0          0 #> 536 5.35 3.484230e+01 7.3920657 2.635991e-03       75       0          0 #> 537 5.36 3.491622e+01 7.3920918 2.594981e-03       75       0          0 #> 538 5.37 3.499014e+01 7.3921176 2.554608e-03       75       0          0 #> 539 5.38 3.506406e+01 7.3921429 2.514864e-03       75       0          0 #> 540 5.39 3.513799e+01 7.3921679 2.475737e-03       75       0          0 #> 541 5.40 3.521191e+01 7.3921925 2.437220e-03       75       0          0 #> 542 5.41 3.528583e+01 7.3922166 2.399302e-03       75       0          0 #> 543 5.42 3.535975e+01 7.3922404 2.361973e-03       75       0          0 #> 544 5.43 3.543367e+01 7.3922639 2.325226e-03       75       0          0 #> 545 5.44 3.550760e+01 7.3922870 2.289050e-03       75       0          0 #> 546 5.45 3.558152e+01 7.3923097 2.253437e-03       75       0          0 #> 547 5.46 3.565544e+01 7.3923320 2.218378e-03       75       0          0 #> 548 5.47 3.572937e+01 7.3923540 2.183865e-03       75       0          0 #> 549 5.48 3.580329e+01 7.3923757 2.149888e-03       75       0          0 #> 550 5.49 3.587721e+01 7.3923970 2.116440e-03       75       0          0 #> 551 5.50 3.595114e+01 7.3924180 2.083513e-03       75       0          0 #> 552 5.51 3.602506e+01 7.3924387 2.051097e-03       75       0          0 #> 553 5.52 3.609899e+01 7.3924591 2.019186e-03       75       0          0 #> 554 5.53 3.617291e+01 7.3924791 1.987772e-03       75       0          0 #> 555 5.54 3.624684e+01 7.3924988 1.956846e-03       75       0          0 #> 556 5.55 3.632076e+01 7.3925182 1.926402e-03       75       0          0 #> 557 5.56 3.639469e+01 7.3925373 1.896431e-03       75       0          0 #> 558 5.57 3.646861e+01 7.3925562 1.866926e-03       75       0          0 #> 559 5.58 3.654254e+01 7.3925747 1.837880e-03       75       0          0 #> 560 5.59 3.661646e+01 7.3925929 1.809287e-03       75       0          0 #> 561 5.60 3.669039e+01 7.3926109 1.781138e-03       75       0          0 #> 562 5.61 3.676432e+01 7.3926285 1.753427e-03       75       0          0 #> 563 5.62 3.683824e+01 7.3926459 1.726147e-03       75       0          0 #> 564 5.63 3.691217e+01 7.3926631 1.699292e-03       75       0          0 #> 565 5.64 3.698610e+01 7.3926799 1.672854e-03       75       0          0 #> 566 5.65 3.706002e+01 7.3926965 1.646828e-03       75       0          0 #> 567 5.66 3.713395e+01 7.3927129 1.621207e-03       75       0          0 #> 568 5.67 3.720788e+01 7.3927290 1.595984e-03       75       0          0 #> 569 5.68 3.728180e+01 7.3927448 1.571154e-03       75       0          0 #> 570 5.69 3.735573e+01 7.3927604 1.546710e-03       75       0          0 #> 571 5.70 3.742966e+01 7.3927757 1.522646e-03       75       0          0 #> 572 5.71 3.750359e+01 7.3927908 1.498957e-03       75       0          0 #> 573 5.72 3.757752e+01 7.3928057 1.475636e-03       75       0          0 #> 574 5.73 3.765144e+01 7.3928203 1.452678e-03       75       0          0 #> 575 5.74 3.772537e+01 7.3928348 1.430077e-03       75       0          0 #> 576 5.75 3.779930e+01 7.3928489 1.407828e-03       75       0          0 #> 577 5.76 3.787323e+01 7.3928629 1.385925e-03       75       0          0 #> 578 5.77 3.794716e+01 7.3928767 1.364363e-03       75       0          0 #> 579 5.78 3.802109e+01 7.3928902 1.343136e-03       75       0          0 #> 580 5.79 3.809502e+01 7.3929035 1.322240e-03       75       0          0 #> 581 5.80 3.816894e+01 7.3929166 1.301668e-03       75       0          0 #> 582 5.81 3.824287e+01 7.3929296 1.281417e-03       75       0          0 #> 583 5.82 3.831680e+01 7.3929423 1.261481e-03       75       0          0 #> 584 5.83 3.839073e+01 7.3929548 1.241855e-03       75       0          0 #> 585 5.84 3.846466e+01 7.3929671 1.222534e-03       75       0          0 #> 586 5.85 3.853859e+01 7.3929792 1.203514e-03       75       0          0 #> 587 5.86 3.861252e+01 7.3929912 1.184790e-03       75       0          0 #> 588 5.87 3.868645e+01 7.3930029 1.166357e-03       75       0          0 #> 589 5.88 3.876038e+01 7.3930145 1.148210e-03       75       0          0 #> 590 5.89 3.883431e+01 7.3930259 1.130347e-03       75       0          0 #> 591 5.90 3.890824e+01 7.3930371 1.112761e-03       75       0          0 #> 592 5.91 3.898217e+01 7.3930482 1.095448e-03       75       0          0 #> 593 5.92 3.905610e+01 7.3930590 1.078405e-03       75       0          0 #> 594 5.93 3.913003e+01 7.3930697 1.061628e-03       75       0          0 #> 595 5.94 3.920397e+01 7.3930803 1.045111e-03       75       0          0 #> 596 5.95 3.927790e+01 7.3930906 1.028851e-03       75       0          0 #> 597 5.96 3.935183e+01 7.3931008 1.012844e-03       75       0          0 #> 598 5.97 3.942576e+01 7.3931109 9.970863e-04       75       0          0 #> 599 5.98 3.949969e+01 7.3931208 9.815737e-04       75       0          0 #> 600 5.99 3.957362e+01 7.3931305 9.663024e-04       75       0          0 #> 601 6.00 3.964755e+01 7.3931401 9.512687e-04       75       0          0 #>     air_resistance horizontal_force horizontal_force_relative vertical_force #> 1      0.000000000        869.52009                11.5936012         735.75 #> 2      0.003571112        855.99568                11.4132757         735.75 #> 3      0.014063075        842.68866                11.2358488         735.75 #> 4      0.031152825        829.59543                11.0612724         735.75 #> 5      0.054528975        816.71246                10.8894995         735.75 #> 6      0.083891427        804.03627                10.7204837         735.75 #> 7      0.118950997        791.56346                10.5541794         735.75 #> 8      0.159429053        779.29065                10.3905420         735.75 #> 9      0.205057164        767.21457                10.2295276         735.75 #> 10     0.255576760        755.33197                10.0710929         735.75 #> 11     0.310738804        743.63967                 9.9151955         735.75 #> 12     0.370303471        732.13453                 9.7617937         735.75 #> 13     0.434039843        720.81349                 9.6108466         735.75 #> 14     0.501725608        709.67353                 9.4623137         735.75 #> 15     0.573146775        698.71166                 9.3161555         735.75 #> 16     0.648097388        687.92499                 9.1723332         735.75 #> 17     0.726379264        677.31063                 9.0308084         735.75 #> 18     0.807801724        666.86576                 8.8915435         735.75 #> 19     0.892181343        656.58762                 8.7545016         735.75 #> 20     0.979341705        646.47348                 8.6196465         735.75 #> 21     1.069113163        636.52067                 8.4869423         735.75 #> 22     1.161332613        626.72654                 8.3563539         735.75 #> 23     1.255843270        617.08852                 8.2278470         735.75 #> 24     1.352494453        607.60406                 8.1013874         735.75 #> 25     1.451141376        598.27065                 7.9769420         735.75 #> 26     1.551644947        589.08585                 7.8544780         735.75 #> 27     1.653871577        580.04723                 7.7339630         735.75 #> 28     1.757692983        571.15242                 7.6153655         735.75 #> 29     1.862986015        562.39907                 7.4986543         735.75 #> 30     1.969632473        553.78491                 7.3837988         735.75 #> 31     2.077518939        545.30766                 7.2707688         735.75 #> 32     2.186536611        536.96512                 7.1595349         735.75 #> 33     2.296581143        528.75508                 7.0500678         735.75 #> 34     2.407552491        520.67542                 6.9423390         735.75 #> 35     2.519354762        512.72402                 6.8363203         735.75 #> 36     2.631896073        504.89881                 6.7319841         735.75 #> 37     2.745088405        497.19774                 6.6293032         735.75 #> 38     2.858847472        489.61881                 6.5282508         735.75 #> 39     2.973092590        482.16005                 6.4288007         735.75 #> 40     3.087746547        474.81953                 6.3309270         735.75 #> 41     3.202735485        467.59532                 6.2346043         735.75 #> 42     3.317988778        460.48556                 6.1398075         735.75 #> 43     3.433438916        453.48840                 6.0465121         735.75 #> 44     3.549021402        446.60204                 5.9546939         735.75 #> 45     3.664674633        439.82468                 5.8643291         735.75 #> 46     3.780339808        433.15458                 5.7753944         735.75 #> 47     3.895960818        426.59000                 5.6878667         735.75 #> 48     4.011484157        420.12926                 5.6017234         735.75 #> 49     4.126858823        413.77068                 5.5169424         735.75 #> 50     4.242036229        407.51262                 5.4335016         735.75 #> 51     4.356970115        401.35348                 5.3513797         735.75 #> 52     4.471616465        395.29166                 5.2705555         735.75 #> 53     4.585933423        389.32561                 5.1910081         735.75 #> 54     4.699881214        383.45378                 5.1127171         735.75 #> 55     4.813422069        377.67468                 5.0356623         735.75 #> 56     4.926520149        371.98680                 4.9598241         735.75 #> 57     5.039141476        366.38871                 4.8851828         735.75 #> 58     5.151253861        360.87895                 4.8117193         735.75 #> 59     5.262826839        355.45612                 4.7394149         735.75 #> 60     5.373831605        350.11882                 4.6682509         735.75 #> 61     5.484240948        344.86569                 4.5982092         735.75 #> 62     5.594029196        339.69539                 4.5292719         735.75 #> 63     5.703172154        334.60659                 4.4614212         735.75 #> 64     5.811647049        329.59799                 4.3946399         735.75 #> 65     5.919432475        324.66831                 4.3289108         735.75 #> 66     6.026508341        319.81630                 4.2642173         735.75 #> 67     6.132855820        315.04071                 4.2005428         735.75 #> 68     6.238457299        310.34033                 4.1378711         735.75 #> 69     6.343296336        305.71396                 4.0761861         735.75 #> 70     6.447357606        301.16041                 4.0154722         735.75 #> 71     6.550626866        296.67854                 3.9557139         735.75 #> 72     6.653090905        292.26720                 3.8968960         735.75 #> 73     6.754737508        287.92527                 3.8390036         735.75 #> 74     6.855555412        283.65164                 3.7820219         735.75 #> 75     6.955534272        279.44523                 3.7259364         735.75 #> 76     7.054664618        275.30497                 3.6707329         735.75 #> 77     7.152937826        271.22981                 3.6163975         735.75 #> 78     7.250346078        267.21871                 3.5629162         735.75 #> 79     7.346882332        263.27067                 3.5102755         735.75 #> 80     7.442540288        259.38467                 3.4584622         735.75 #> 81     7.537314357        255.55973                 3.4074631         735.75 #> 82     7.631199631        251.79489                 3.3572651         735.75 #> 83     7.724191855        248.08918                 3.3078558         735.75 #> 84     7.816287399        244.44168                 3.2592225         735.75 #> 85     7.907483231        240.85147                 3.2113529         735.75 #> 86     7.997776888        237.31762                 3.1642349         735.75 #> 87     8.087166456        233.83926                 3.1178568         735.75 #> 88     8.175650542        230.41549                 3.0722066         735.75 #> 89     8.263228252        227.04547                 3.0272729         735.75 #> 90     8.349899169        223.72833                 2.9830444         735.75 #> 91     8.435663330        220.46324                 2.9395098         735.75 #> 92     8.520521206        217.24937                 2.8966583         735.75 #> 93     8.604473684        214.08593                 2.8544790         735.75 #> 94     8.687522040        210.97210                 2.8129613         735.75 #> 95     8.769667931        207.90710                 2.7720947         735.75 #> 96     8.850913369        204.89017                 2.7318690         735.75 #> 97     8.931260704        201.92054                 2.6922739         735.75 #> 98     9.010712614        198.99747                 2.6532996         735.75 #> 99     9.089272080        196.12022                 2.6149363         735.75 #> 100    9.166942377        193.28807                 2.5771742         735.75 #> 101    9.243727056        190.50030                 2.5400040         735.75 #> 102    9.319629930        187.75621                 2.5034162         735.75 #> 103    9.394655060        185.05513                 2.4674017         735.75 #> 104    9.468806742        182.39635                 2.4319514         735.75 #> 105    9.542089496        179.77923                 2.3970564         735.75 #> 106    9.614508049        177.20311                 2.3627081         735.75 #> 107    9.686067328        174.66732                 2.3288977         735.75 #> 108    9.756772445        172.17125                 2.2956167         735.75 #> 109    9.826628689        169.71427                 2.2628569         735.75 #> 110    9.895641510        167.29575                 2.2306100         735.75 #> 111    9.963816518        164.91510                 2.1988680         735.75 #> 112   10.031159464        162.57171                 2.1676228         735.75 #> 113   10.097676235        160.26501                 2.1368667         735.75 #> 114   10.163372844        157.99440                 2.1065920         735.75 #> 115   10.228255424        155.75933                 2.0767911         735.75 #> 116   10.292330214        153.55924                 2.0474565         735.75 #> 117   10.355603557        151.39356                 2.0185809         735.75 #> 118   10.418081887        149.26178                 1.9901570         735.75 #> 119   10.479771726        147.16334                 1.9621778         735.75 #> 120   10.540679675        145.09773                 1.9346363         735.75 #> 121   10.600812407        143.06442                 1.9075256         735.75 #> 122   10.660176659        141.06292                 1.8808389         735.75 #> 123   10.718779231        139.09272                 1.8545696         735.75 #> 124   10.776626973        137.15333                 1.8287110         735.75 #> 125   10.833726785        135.24426                 1.8032568         735.75 #> 126   10.890085608        133.36504                 1.7782006         735.75 #> 127   10.945710421        131.51520                 1.7535360         735.75 #> 128   11.000608235        129.69428                 1.7292571         735.75 #> 129   11.054786085        127.90183                 1.7053577         735.75 #> 130   11.108251033        126.13739                 1.6818318         735.75 #> 131   11.161010156        124.40053                 1.6586737         735.75 #> 132   11.213070546        122.69081                 1.6358774         735.75 #> 133   11.264439304        121.00781                 1.6134374         735.75 #> 134   11.315123537        119.35111                 1.5913481         735.75 #> 135   11.365130356        117.72029                 1.5696039         735.75 #> 136   11.414466867        116.11496                 1.5481994         735.75 #> 137   11.463140176        114.53470                 1.5271293         735.75 #> 138   11.511157377        112.97913                 1.5063884         735.75 #> 139   11.558525555        111.44786                 1.4859715         735.75 #> 140   11.605251782        109.94051                 1.4658735         735.75 #> 141   11.651343111        108.45671                 1.4460894         735.75 #> 142   11.696806578        106.99607                 1.4266143         735.75 #> 143   11.741649196        105.55825                 1.4074433         735.75 #> 144   11.785877955        104.14288                 1.3885718         735.75 #> 145   11.829499819        102.74962                 1.3699949         735.75 #> 146   11.872521720        101.37810                 1.3517081         735.75 #> 147   11.914950565        100.02801                 1.3337068         735.75 #> 148   11.956793224         98.69899                 1.3159865         735.75 #> 149   11.998056535         97.39072                 1.2985429         735.75 #> 150   12.038747301         96.10287                 1.2813716         735.75 #> 151   12.078872284         94.83513                 1.2644684         735.75 #> 152   12.118438211         93.58717                 1.2478290         735.75 #> 153   12.157451765         92.35870                 1.2314493         735.75 #> 154   12.195919590         91.14940                 1.2153253         735.75 #> 155   12.233848285         89.95897                 1.1994529         735.75 #> 156   12.271244405         88.78712                 1.1838282         735.75 #> 157   12.308114461         87.63355                 1.1684474         735.75 #> 158   12.344464916         86.49799                 1.1533066         735.75 #> 159   12.380302186         85.38015                 1.1384020         735.75 #> 160   12.415632639         84.27975                 1.1237300         735.75 #> 161   12.450462593         83.19652                 1.1092869         735.75 #> 162   12.484798316         82.13019                 1.0950692         735.75 #> 163   12.518646028         81.08050                 1.0810733         735.75 #> 164   12.552011894         80.04718                 1.0672957         735.75 #> 165   12.584902029         79.02998                 1.0537331         735.75 #> 166   12.617322496         78.02865                 1.0403820         735.75 #> 167   12.649279304         77.04294                 1.0272392         735.75 #> 168   12.680778408         76.07260                 1.0143013         735.75 #> 169   12.711825711         75.11740                 1.0015653         735.75 #> 170   12.742427061         74.17709                 0.9890279         735.75 #> 171   12.772588250         73.25146                 0.9766861         735.75 #> 172   12.802315018         72.34025                 0.9645367         735.75 #> 173   12.831613048         71.44326                 0.9525768         735.75 #> 174   12.860487968         70.56026                 0.9408034         735.75 #> 175   12.888945351         69.69102                 0.9292136         735.75 #> 176   12.916990715         68.83534                 0.9178046         735.75 #> 177   12.944629520         67.99300                 0.9065734         735.75 #> 178   12.971867175         67.16380                 0.8955173         735.75 #> 179   12.998709027         66.34753                 0.8846337         735.75 #> 180   13.025160373         65.54398                 0.8739197         735.75 #> 181   13.051226451         64.75296                 0.8633727         735.75 #> 182   13.076912444         63.97427                 0.8529902         735.75 #> 183   13.102223481         63.20772                 0.8427696         735.75 #> 184   13.127164632         62.45312                 0.8327082         735.75 #> 185   13.151740914         61.71028                 0.8228038         735.75 #> 186   13.175957290         60.97903                 0.8130537         735.75 #> 187   13.199818665         60.25917                 0.8034556         735.75 #> 188   13.223329890         59.55053                 0.7940071         735.75 #> 189   13.246495763         58.85294                 0.7847059         735.75 #> 190   13.269321025         58.16622                 0.7755496         735.75 #> 191   13.291810364         57.49020                 0.7665361         735.75 #> 192   13.313968415         56.82472                 0.7576630         735.75 #> 193   13.335799756         56.16962                 0.7489282         735.75 #> 194   13.357308914         55.52472                 0.7403296         735.75 #> 195   13.378500363         54.88987                 0.7318649         735.75 #> 196   13.399378523         54.26491                 0.7235322         735.75 #> 197   13.419947760         53.64970                 0.7153293         735.75 #> 198   13.440212392         53.04407                 0.7072542         735.75 #> 199   13.460176680         52.44788                 0.6993050         735.75 #> 200   13.479844837         51.86097                 0.6914797         735.75 #> 201   13.499221023         51.28322                 0.6837762         735.75 #> 202   13.518309347         50.71446                 0.6761928         735.75 #> 203   13.537113869         50.15457                 0.6687276         735.75 #> 204   13.555638596         49.60340                 0.6613787         735.75 #> 205   13.573887489         49.06082                 0.6541443         735.75 #> 206   13.591864455         48.52669                 0.6470226         735.75 #> 207   13.609573357         48.00089                 0.6400118         735.75 #> 208   13.627018005         47.48327                 0.6331103         735.75 #> 209   13.644202163         46.97372                 0.6263163         735.75 #> 210   13.661129547         46.47211                 0.6196281         735.75 #> 211   13.677803825         45.97831                 0.6130441         735.75 #> 212   13.694228619         45.49220                 0.6065627         735.75 #> 213   13.710407503         45.01367                 0.6001823         735.75 #> 214   13.726344006         44.54259                 0.5939012         735.75 #> 215   13.742041611         44.07885                 0.5877180         735.75 #> 216   13.757503755         43.62233                 0.5816311         735.75 #> 217   13.772733832         43.17293                 0.5756390         735.75 #> 218   13.787735189         42.73052                 0.5697403         735.75 #> 219   13.802511131         42.29500                 0.5639334         735.75 #> 220   13.817064919         41.86627                 0.5582170         735.75 #> 221   13.831399770         41.44422                 0.5525896         735.75 #> 222   13.845518860         41.02874                 0.5470498         735.75 #> 223   13.859425320         40.61973                 0.5415964         735.75 #> 224   13.873122242         40.21709                 0.5362278         735.75 #> 225   13.886612676         39.82072                 0.5309429         735.75 #> 226   13.899899629         39.43052                 0.5257403         735.75 #> 227   13.912986070         39.04641                 0.5206187         735.75 #> 228   13.925874927         38.66827                 0.5155769         735.75 #> 229   13.938569088         38.29602                 0.5106136         735.75 #> 230   13.951071402         37.92957                 0.5057276         735.75 #> 231   13.963384680         37.56883                 0.5009177         735.75 #> 232   13.975511694         37.21370                 0.4961827         735.75 #> 233   13.987455177         36.86410                 0.4915214         735.75 #> 234   13.999217826         36.51995                 0.4869327         735.75 #> 235   14.010802302         36.18116                 0.4824155         735.75 #> 236   14.022211226         35.84764                 0.4779686         735.75 #> 237   14.033447186         35.51932                 0.4735909         735.75 #> 238   14.044512732         35.19611                 0.4692814         735.75 #> 239   14.055410381         34.87793                 0.4650391         735.75 #> 240   14.066142612         34.56471                 0.4608627         735.75 #> 241   14.076711872         34.25636                 0.4567514         735.75 #> 242   14.087120573         33.95281                 0.4527042         735.75 #> 243   14.097371093         33.65399                 0.4487199         735.75 #> 244   14.107465777         33.35983                 0.4447977         735.75 #> 245   14.117406938         33.07024                 0.4409365         735.75 #> 246   14.127196854         32.78516                 0.4371355         735.75 #> 247   14.136837773         32.50452                 0.4333936         735.75 #> 248   14.146331911         32.22825                 0.4297100         735.75 #> 249   14.155681452         31.95628                 0.4260838         735.75 #> 250   14.164888551         31.68855                 0.4225140         735.75 #> 251   14.173955329         31.42498                 0.4189998         735.75 #> 252   14.182883880         31.16552                 0.4155403         735.75 #> 253   14.191676267         30.91010                 0.4121346         735.75 #> 254   14.200334523         30.65865                 0.4087820         735.75 #> 255   14.208860653         30.41112                 0.4054816         735.75 #> 256   14.217256633         30.16744                 0.4022325         735.75 #> 257   14.225524411         29.92755                 0.3990341         735.75 #> 258   14.233665907         29.69140                 0.3958854         735.75 #> 259   14.241683012         29.45893                 0.3927857         735.75 #> 260   14.249577592         29.23008                 0.3897343         735.75 #> 261   14.257351485         29.00478                 0.3867304         735.75 #> 262   14.265006503         28.78300                 0.3837733         735.75 #> 263   14.272544431         28.56466                 0.3808622         735.75 #> 264   14.279967029         28.34973                 0.3779964         735.75 #> 265   14.287276031         28.13814                 0.3751752         735.75 #> 266   14.294473146         27.92985                 0.3723980         735.75 #> 267   14.301560059         27.72480                 0.3696639         735.75 #> 268   14.308538429         27.52294                 0.3669725         735.75 #> 269   14.315409892         27.32422                 0.3643229         735.75 #> 270   14.322176061         27.12859                 0.3617146         735.75 #> 271   14.328838523         26.93601                 0.3591469         735.75 #> 272   14.335398844         26.74643                 0.3566191         735.75 #> 273   14.341858567         26.55980                 0.3541307         735.75 #> 274   14.348219210         26.37608                 0.3516810         735.75 #> 275   14.354482272         26.19521                 0.3492695         735.75 #> 276   14.360649229         26.01716                 0.3468954         735.75 #> 277   14.366721533         25.84188                 0.3445584         735.75 #> 278   14.372700619         25.66933                 0.3422577         735.75 #> 279   14.378587897         25.49946                 0.3399928         735.75 #> 280   14.384384758         25.33224                 0.3377632         735.75 #> 281   14.390092573         25.16762                 0.3355683         735.75 #> 282   14.395712692         25.00557                 0.3334075         735.75 #> 283   14.401246445         24.84603                 0.3312804         735.75 #> 284   14.406695143         24.68898                 0.3291864         735.75 #> 285   14.412060076         24.53437                 0.3271250         735.75 #> 286   14.417342518         24.38217                 0.3250956         735.75 #> 287   14.422543721         24.23234                 0.3230979         735.75 #> 288   14.427664920         24.08484                 0.3211312         735.75 #> 289   14.432707331         23.93964                 0.3191952         735.75 #> 290   14.437672153         23.79669                 0.3172893         735.75 #> 291   14.442560567         23.65598                 0.3154130         735.75 #> 292   14.447373735         23.51745                 0.3135660         735.75 #> 293   14.452112803         23.38107                 0.3117476         735.75 #> 294   14.456778899         23.24682                 0.3099576         735.75 #> 295   14.461373137         23.11466                 0.3081955         735.75 #> 296   14.465896610         22.98456                 0.3064608         735.75 #> 297   14.470350398         22.85648                 0.3047530         735.75 #> 298   14.474735563         22.73039                 0.3030719         735.75 #> 299   14.479053154         22.60627                 0.3014169         735.75 #> 300   14.483304200         22.48408                 0.2997877         735.75 #> 301   14.487489718         22.36379                 0.2981838         735.75 #> 302   14.491610708         22.24537                 0.2966049         735.75 #> 303   14.495668156         22.12879                 0.2950506         735.75 #> 304   14.499663034         22.01403                 0.2935204         735.75 #> 305   14.503596297         21.90106                 0.2920141         735.75 #> 306   14.507468887         21.78984                 0.2905312         735.75 #> 307   14.511281732         21.68035                 0.2890714         735.75 #> 308   14.515035747         21.57257                 0.2876343         735.75 #> 309   14.518731831         21.46647                 0.2862195         735.75 #> 310   14.522370871         21.36201                 0.2848268         735.75 #> 311   14.525953740         21.25918                 0.2834558         735.75 #> 312   14.529481299         21.15796                 0.2821061         735.75 #> 313   14.532954394         21.05830                 0.2807774         735.75 #> 314   14.536373861         20.96020                 0.2794694         735.75 #> 315   14.539740520         20.86363                 0.2781817         735.75 #> 316   14.543055182         20.76855                 0.2769141         735.75 #> 317   14.546318643         20.67496                 0.2756662         735.75 #> 318   14.549531689         20.58283                 0.2744377         735.75 #> 319   14.552695093         20.49212                 0.2732283         735.75 #> 320   14.555809616         20.40283                 0.2720378         735.75 #> 321   14.558876010         20.31493                 0.2708657         735.75 #> 322   14.561895012         20.22840                 0.2697120         735.75 #> 323   14.564867350         20.14321                 0.2685761         735.75 #> 324   14.567793741         20.05935                 0.2674580         735.75 #> 325   14.570674890         19.97679                 0.2663572         735.75 #> 326   14.573511493         19.89552                 0.2652736         735.75 #> 327   14.576304234         19.81551                 0.2642068         735.75 #> 328   14.579053786         19.73675                 0.2631567         735.75 #> 329   14.581760814         19.65921                 0.2621229         735.75 #> 330   14.584425972         19.58289                 0.2611051         735.75 #> 331   14.587049903         19.50774                 0.2601032         735.75 #> 332   14.589633242         19.43377                 0.2591169         735.75 #> 333   14.592176613         19.36095                 0.2581460         735.75 #> 334   14.594680630         19.28926                 0.2571901         735.75 #> 335   14.597145900         19.21869                 0.2562492         735.75 #> 336   14.599573018         19.14921                 0.2553228         735.75 #> 337   14.601962573         19.08082                 0.2544109         735.75 #> 338   14.604315141         19.01349                 0.2535132         735.75 #> 339   14.606631294         18.94721                 0.2526294         735.75 #> 340   14.608911592         18.88196                 0.2517594         735.75 #> 341   14.611156586         18.81772                 0.2509030         735.75 #> 342   14.613366821         18.75449                 0.2500598         735.75 #> 343   14.615542833         18.69224                 0.2492298         735.75 #> 344   14.617685149         18.63095                 0.2484127         735.75 #> 345   14.619794288         18.57062                 0.2476083         735.75 #> 346   14.621870762         18.51123                 0.2468164         735.75 #> 347   14.623915073         18.45277                 0.2460369         735.75 #> 348   14.625927720         18.39521                 0.2452695         735.75 #> 349   14.627909188         18.33855                 0.2445140         735.75 #> 350   14.629859960         18.28277                 0.2437703         735.75 #> 351   14.631780509         18.22786                 0.2430381         735.75 #> 352   14.633671302         18.17380                 0.2423174         735.75 #> 353   14.635532796         18.12059                 0.2416078         735.75 #> 354   14.637365446         18.06820                 0.2409093         735.75 #> 355   14.639169695         18.01663                 0.2402217         735.75 #> 356   14.640945982         17.96586                 0.2395447         735.75 #> 357   14.642694739         17.91588                 0.2388783         735.75 #> 358   14.644416391         17.86667                 0.2382223         735.75 #> 359   14.646111356         17.81824                 0.2375765         735.75 #> 360   14.647780047         17.77055                 0.2369407         735.75 #> 361   14.649422869         17.72361                 0.2363148         735.75 #> 362   14.651040222         17.67740                 0.2356987         735.75 #> 363   14.652632500         17.63191                 0.2350921         735.75 #> 364   14.654200089         17.58713                 0.2344950         735.75 #> 365   14.655743372         17.54304                 0.2339072         735.75 #> 366   14.657262724         17.49964                 0.2333285         735.75 #> 367   14.658758515         17.45691                 0.2327588         735.75 #> 368   14.660231109         17.41485                 0.2321980         735.75 #> 369   14.661680864         17.37344                 0.2316459         735.75 #> 370   14.663108135         17.33268                 0.2311024         735.75 #> 371   14.664513267         17.29255                 0.2305674         735.75 #> 372   14.665896605         17.25305                 0.2300407         735.75 #> 373   14.667258484         17.21416                 0.2295221         735.75 #> 374   14.668599237         17.17588                 0.2290117         735.75 #> 375   14.669919190         17.13819                 0.2285092         735.75 #> 376   14.671218665         17.10109                 0.2280145         735.75 #> 377   14.672497980         17.06456                 0.2275275         735.75 #> 378   14.673757445         17.02861                 0.2270481         735.75 #> 379   14.674997369         16.99321                 0.2265761         735.75 #> 380   14.676218052         16.95836                 0.2261115         735.75 #> 381   14.677419795         16.92406                 0.2256541         735.75 #> 382   14.678602888         16.89029                 0.2252039         735.75 #> 383   14.679767622         16.85704                 0.2247606         735.75 #> 384   14.680914279         16.82432                 0.2243242         735.75 #> 385   14.682043141         16.79210                 0.2238947         735.75 #> 386   14.683154483         16.76038                 0.2234718         735.75 #> 387   14.684248575         16.72916                 0.2230554         735.75 #> 388   14.685325685         16.69842                 0.2226456         735.75 #> 389   14.686386076         16.66816                 0.2222422         735.75 #> 390   14.687430007         16.63837                 0.2218450         735.75 #> 391   14.688457733         16.60905                 0.2214540         735.75 #> 392   14.689469504         16.58018                 0.2210691         735.75 #> 393   14.690465569         16.55176                 0.2206901         735.75 #> 394   14.691446169         16.52378                 0.2203171         735.75 #> 395   14.692411546         16.49624                 0.2199499         735.75 #> 396   14.693361934         16.46913                 0.2195884         735.75 #> 397   14.694297566         16.44244                 0.2192325         735.75 #> 398   14.695218670         16.41616                 0.2188821         735.75 #> 399   14.696125473         16.39029                 0.2185372         735.75 #> 400   14.697018194         16.36483                 0.2181977         735.75 #> 401   14.697897053         16.33976                 0.2178634         735.75 #> 402   14.698762265         16.31508                 0.2175344         735.75 #> 403   14.699614040         16.29078                 0.2172104         735.75 #> 404   14.700452588         16.26687                 0.2168916         735.75 #> 405   14.701278113         16.24332                 0.2165776         735.75 #> 406   14.702090817         16.22014                 0.2162686         735.75 #> 407   14.702890899         16.19733                 0.2159643         735.75 #> 408   14.703678554         16.17486                 0.2156648         735.75 #> 409   14.704453976         16.15275                 0.2153700         735.75 #> 410   14.705217354         16.13098                 0.2150797         735.75 #> 411   14.705968874         16.10955                 0.2147940         735.75 #> 412   14.706708721         16.08845                 0.2145127         735.75 #> 413   14.707437076         16.06768                 0.2142358         735.75 #> 414   14.708154117         16.04724                 0.2139632         735.75 #> 415   14.708860019         16.02711                 0.2136948         735.75 #> 416   14.709554955         16.00730                 0.2134306         735.75 #> 417   14.710239095         15.98779                 0.2131705         735.75 #> 418   14.710912607         15.96859                 0.2129145         735.75 #> 419   14.711575656         15.94968                 0.2126625         735.75 #> 420   14.712228403         15.93107                 0.2124143         735.75 #> 421   14.712871010         15.91275                 0.2121701         735.75 #> 422   14.713503632         15.89472                 0.2119296         735.75 #> 423   14.714126425         15.87696                 0.2116929         735.75 #> 424   14.714739542         15.85949                 0.2114598         735.75 #> 425   14.715343132         15.84228                 0.2112304         735.75 #> 426   14.715937344         15.82534                 0.2110046         735.75 #> 427   14.716522323         15.80867                 0.2107822         735.75 #> 428   14.717098212         15.79225                 0.2105633         735.75 #> 429   14.717665152         15.77609                 0.2103479         735.75 #> 430   14.718223283         15.76018                 0.2101358         735.75 #> 431   14.718772740         15.74452                 0.2099269         735.75 #> 432   14.719313659         15.72910                 0.2097214         735.75 #> 433   14.719846173         15.71392                 0.2095190         735.75 #> 434   14.720370410         15.69898                 0.2093198         735.75 #> 435   14.720886501         15.68427                 0.2091237         735.75 #> 436   14.721394572         15.66979                 0.2089306         735.75 #> 437   14.721894746         15.65554                 0.2087405         735.75 #> 438   14.722387147         15.64151                 0.2085534         735.75 #> 439   14.722871895         15.62769                 0.2083692         735.75 #> 440   14.723349109         15.61409                 0.2081879         735.75 #> 441   14.723818907         15.60070                 0.2080094         735.75 #> 442   14.724281402         15.58752                 0.2078336         735.75 #> 443   14.724736709         15.57455                 0.2076606         735.75 #> 444   14.725184940         15.56177                 0.2074903         735.75 #> 445   14.725626203         15.54920                 0.2073227         735.75 #> 446   14.726060608         15.53682                 0.2071576         735.75 #> 447   14.726488261         15.52463                 0.2069951         735.75 #> 448   14.726909266         15.51264                 0.2068352         735.75 #> 449   14.727323727         15.50083                 0.2066777         735.75 #> 450   14.727731746         15.48920                 0.2065227         735.75 #> 451   14.728133422         15.47776                 0.2063701         735.75 #> 452   14.728528854         15.46649                 0.2062199         735.75 #> 453   14.728918139         15.45540                 0.2060720         735.75 #> 454   14.729301373         15.44448                 0.2059264         735.75 #> 455   14.729678650         15.43373                 0.2057831         735.75 #> 456   14.730050061         15.42315                 0.2056420         735.75 #> 457   14.730415699         15.41273                 0.2055031         735.75 #> 458   14.730775652         15.40247                 0.2053663         735.75 #> 459   14.731130010         15.39238                 0.2052317         735.75 #> 460   14.731478858         15.38244                 0.2050992         735.75 #> 461   14.731822284         15.37265                 0.2049687         735.75 #> 462   14.732160370         15.36302                 0.2048403         735.75 #> 463   14.732493200         15.35354                 0.2047139         735.75 #> 464   14.732820856         15.34421                 0.2045894         735.75 #> 465   14.733143417         15.33502                 0.2044669         735.75 #> 466   14.733460964         15.32597                 0.2043463         735.75 #> 467   14.733773573         15.31706                 0.2042275         735.75 #> 468   14.734081322         15.30830                 0.2041106         735.75 #> 469   14.734384287         15.29967                 0.2039956         735.75 #> 470   14.734682541         15.29117                 0.2038823         735.75 #> 471   14.734976157         15.28281                 0.2037708         735.75 #> 472   14.735265209         15.27457                 0.2036610         735.75 #> 473   14.735549766         15.26647                 0.2035529         735.75 #> 474   14.735829898         15.25849                 0.2034465         735.75 #> 475   14.736105675         15.25063                 0.2033417         735.75 #> 476   14.736377164         15.24290                 0.2032386         735.75 #> 477   14.736644432         15.23528                 0.2031371         735.75 #> 478   14.736907543         15.22779                 0.2030372         735.75 #> 479   14.737166564         15.22041                 0.2029388         735.75 #> 480   14.737421557         15.21315                 0.2028420         735.75 #> 481   14.737672585         15.20600                 0.2027466         735.75 #> 482   14.737919709         15.19896                 0.2026528         735.75 #> 483   14.738162991         15.19203                 0.2025604         735.75 #> 484   14.738402490         15.18521                 0.2024694         735.75 #> 485   14.738638265         15.17849                 0.2023799         735.75 #> 486   14.738870373         15.17188                 0.2022917         735.75 #> 487   14.739098872         15.16537                 0.2022050         735.75 #> 488   14.739323817         15.15897                 0.2021195         735.75 #> 489   14.739545265         15.15266                 0.2020354         735.75 #> 490   14.739763269         15.14645                 0.2019527         735.75 #> 491   14.739977883         15.14034                 0.2018711         735.75 #> 492   14.740189159         15.13432                 0.2017909         735.75 #> 493   14.740397150         15.12839                 0.2017119         735.75 #> 494   14.740601906         15.12256                 0.2016342         735.75 #> 495   14.740803479         15.11682                 0.2015576         735.75 #> 496   14.741001916         15.11117                 0.2014823         735.75 #> 497   14.741197267         15.10561                 0.2014081         735.75 #> 498   14.741389581         15.10013                 0.2013351         735.75 #> 499   14.741578904         15.09474                 0.2012632         735.75 #> 500   14.741765282         15.08943                 0.2011924         735.75 #> 501   14.741948762         15.08420                 0.2011227         735.75 #> 502   14.742129388         15.07906                 0.2010541         735.75 #> 503   14.742307205         15.07400                 0.2009866         735.75 #> 504   14.742482257         15.06901                 0.2009201         735.75 #> 505   14.742654587         15.06410                 0.2008547         735.75 #> 506   14.742824236         15.05927                 0.2007903         735.75 #> 507   14.742991247         15.05451                 0.2007269         735.75 #> 508   14.743155660         15.04983                 0.2006644         735.75 #> 509   14.743317517         15.04522                 0.2006030         735.75 #> 510   14.743476856         15.04069                 0.2005425         735.75 #> 511   14.743633717         15.03622                 0.2004829         735.75 #> 512   14.743788138         15.03182                 0.2004243         735.75 #> 513   14.743940158         15.02749                 0.2003666         735.75 #> 514   14.744089813         15.02323                 0.2003097         735.75 #> 515   14.744237141         15.01903                 0.2002538         735.75 #> 516   14.744382177         15.01490                 0.2001987         735.75 #> 517   14.744524957         15.01084                 0.2001445         735.75 #> 518   14.744665517         15.00684                 0.2000911         735.75 #> 519   14.744803891         15.00289                 0.2000386         735.75 #> 520   14.744940112         14.99902                 0.1999869         735.75 #> 521   14.745074215         14.99520                 0.1999360         735.75 #> 522   14.745206232         14.99144                 0.1998858         735.75 #> 523   14.745336195         14.98774                 0.1998365         735.75 #> 524   14.745464138         14.98409                 0.1997879         735.75 #> 525   14.745590090         14.98051                 0.1997401         735.75 #> 526   14.745714083         14.97698                 0.1996930         735.75 #> 527   14.745836148         14.97350                 0.1996467         735.75 #> 528   14.745956314         14.97008                 0.1996010         735.75 #> 529   14.746074611         14.96671                 0.1995561         735.75 #> 530   14.746191068         14.96339                 0.1995119         735.75 #> 531   14.746305713         14.96013                 0.1994684         735.75 #> 532   14.746418576         14.95691                 0.1994255         735.75 #> 533   14.746529682         14.95375                 0.1993833         735.75 #> 534   14.746639061         14.95064                 0.1993418         735.75 #> 535   14.746746738         14.94757                 0.1993009         735.75 #> 536   14.746852741         14.94455                 0.1992607         735.75 #> 537   14.746957095         14.94158                 0.1992211         735.75 #> 538   14.747059825         14.93866                 0.1991821         735.75 #> 539   14.747160958         14.93578                 0.1991437         735.75 #> 540   14.747260517         14.93294                 0.1991059         735.75 #> 541   14.747358528         14.93015                 0.1990687         735.75 #> 542   14.747455015         14.92740                 0.1990320         735.75 #> 543   14.747550000         14.92470                 0.1989960         735.75 #> 544   14.747643508         14.92204                 0.1989605         735.75 #> 545   14.747735562         14.91941                 0.1989255         735.75 #> 546   14.747826183         14.91683                 0.1988911         735.75 #> 547   14.747915395         14.91429                 0.1988572         735.75 #> 548   14.748003220         14.91179                 0.1988239         735.75 #> 549   14.748089678         14.90933                 0.1987911         735.75 #> 550   14.748174791         14.90691                 0.1987588         735.75 #> 551   14.748258581         14.90452                 0.1987270         735.75 #> 552   14.748341067         14.90217                 0.1986956         735.75 #> 553   14.748422270         14.89986                 0.1986648         735.75 #> 554   14.748502209         14.89759                 0.1986345         735.75 #> 555   14.748580906         14.89534                 0.1986046         735.75 #> 556   14.748658378         14.89314                 0.1985752         735.75 #> 557   14.748734645         14.89097                 0.1985462         735.75 #> 558   14.748809726         14.88883                 0.1985177         735.75 #> 559   14.748883639         14.88672                 0.1984897         735.75 #> 560   14.748956402         14.88465                 0.1984620         735.75 #> 561   14.749028033         14.88261                 0.1984348         735.75 #> 562   14.749098550         14.88061                 0.1984081         735.75 #> 563   14.749167970         14.87863                 0.1983817         735.75 #> 564   14.749236310         14.87668                 0.1983558         735.75 #> 565   14.749303587         14.87477                 0.1983302         735.75 #> 566   14.749369817         14.87288                 0.1983051         735.75 #> 567   14.749435017         14.87103                 0.1982803         735.75 #> 568   14.749499203         14.86920                 0.1982560         735.75 #> 569   14.749562391         14.86740                 0.1982320         735.75 #> 570   14.749624595         14.86563                 0.1982084         735.75 #> 571   14.749685832         14.86388                 0.1981851         735.75 #> 572   14.749746116         14.86217                 0.1981622         735.75 #> 573   14.749805463         14.86048                 0.1981397         735.75 #> 574   14.749863886         14.85881                 0.1981175         735.75 #> 575   14.749921401         14.85718                 0.1980957         735.75 #> 576   14.749978020         14.85557                 0.1980742         735.75 #> 577   14.750033759         14.85398                 0.1980530         735.75 #> 578   14.750088631         14.85242                 0.1980322         735.75 #> 579   14.750142650         14.85088                 0.1980117         735.75 #> 580   14.750195828         14.84936                 0.1979915         735.75 #> 581   14.750248178         14.84787                 0.1979716         735.75 #> 582   14.750299715         14.84641                 0.1979521         735.75 #> 583   14.750350449         14.84496                 0.1979328         735.75 #> 584   14.750400395         14.84354                 0.1979139         735.75 #> 585   14.750449563         14.84214                 0.1978952         735.75 #> 586   14.750497967         14.84076                 0.1978768         735.75 #> 587   14.750545617         14.83940                 0.1978587         735.75 #> 588   14.750592527         14.83807                 0.1978409         735.75 #> 589   14.750638706         14.83675                 0.1978234         735.75 #> 590   14.750684167         14.83546                 0.1978061         735.75 #> 591   14.750728921         14.83419                 0.1977891         735.75 #> 592   14.750772979         14.83293                 0.1977724         735.75 #> 593   14.750816351         14.83170                 0.1977560         735.75 #> 594   14.750859049         14.83048                 0.1977397         735.75 #> 595   14.750901082         14.82928                 0.1977238         735.75 #> 596   14.750942462         14.82811                 0.1977081         735.75 #> 597   14.750983198         14.82695                 0.1976926         735.75 #> 598   14.751023300         14.82580                 0.1976774         735.75 #> 599   14.751062778         14.82468                 0.1976624         735.75 #> 600   14.751101642         14.82357                 0.1976477         735.75 #> 601   14.751139902         14.82249                 0.1976331         735.75 #>     resultant_force resultant_force_relative      power power_relative #> 1         1139.0317                15.187090    0.00000       0.000000 #> 2         1128.7412                15.049882   98.46671       1.312890 #> 3         1118.6833                14.915777  192.36384       2.564851 #> 4         1108.8538                14.784717  281.85855       3.758114 #> 5         1099.2485                14.656647  367.11235       4.894831 #> 6         1089.8635                14.531513  448.28126       5.977083 #> 7         1080.6946                14.409261  525.51598       7.006880 #> 8         1071.7378                14.289838  598.96211       7.986161 #> 9         1062.9893                14.173191  668.76027       8.916804 #> 10        1054.4451                14.059268  735.04629       9.800617 #> 11        1046.1013                13.948018  797.95139      10.639352 #> 12        1037.9543                13.839390  857.60228      11.434697 #> 13        1030.0001                13.733334  914.12135      12.188285 #> 14        1022.2351                13.629801  967.62679      12.901691 #> 15        1014.6556                13.528742 1018.23276      13.576437 #> 16        1007.2581                13.430108 1066.04949      14.213993 #> 17        1000.0389                13.333852 1111.18342      14.815779 #> 18         992.9945                13.239926 1153.73736      15.383165 #> 19         986.1214                13.148285 1193.81053      15.917474 #> 20         979.4162                13.058882 1231.49878      16.419984 #> 21         972.8754                12.971673 1266.89463      16.891928 #> 22         966.4958                12.886611 1300.08739      17.334499 #> 23         960.2741                12.803654 1331.16330      17.748844 #> 24         954.2069                12.722758 1360.20560      18.136075 #> 25         948.2910                12.643880 1387.29464      18.497262 #> 26         942.5233                12.566978 1412.50799      18.833440 #> 27         936.9007                12.492009 1435.92049      19.145607 #> 28         931.4200                12.418933 1457.60441      19.434725 #> 29         926.0782                12.347709 1477.62946      19.701726 #> 30         920.8723                12.278297 1496.06293      19.947506 #> 31         915.7994                12.210658 1512.96974      20.172930 #> 32         910.8565                12.144754 1528.41255      20.378834 #> 33         906.0408                12.080545 1542.45179      20.566024 #> 34         901.3495                12.017994 1555.14578      20.735277 #> 35         896.7798                11.957064 1566.55077      20.887344 #> 36         892.3289                11.897719 1576.72103      21.022947 #> 37         887.9942                11.839922 1585.70888      21.142785 #> 38         883.7730                11.783639 1593.56482      21.247531 #> 39         879.6627                11.728835 1600.33753      21.337834 #> 40         875.6607                11.675476 1606.07395      21.414319 #> 41         871.7646                11.623527 1610.81935      21.477591 #> 42         867.9718                11.572957 1614.61736      21.528232 #> 43         864.2799                11.523732 1617.51008      21.566801 #> 44         860.6866                11.475821 1619.53806      21.593841 #> 45         857.1895                11.429193 1620.74038      21.609872 #> 46         853.7862                11.383817 1621.15475      21.615397 #> 47         850.4746                11.339662 1620.81746      21.610900 #> 48         847.2524                11.296699 1619.76352      21.596847 #> 49         844.1174                11.254899 1618.02662      21.573688 #> 50         841.0675                11.214234 1615.63926      21.541857 #> 51         838.1006                11.174675 1612.63273      21.501770 #> 52         835.2147                11.136196 1609.03716      21.453829 #> 53         832.4076                11.098769 1604.88156      21.398421 #> 54         829.6776                11.062368 1600.19390      21.335919 #> 55         827.0225                11.026967 1595.00108      21.266681 #> 56         824.4406                10.992541 1589.32901      21.191054 #> 57         821.9299                10.959065 1583.20263      21.109368 #> 58         819.4887                10.926516 1576.64592      21.021946 #> 59         817.1151                10.894868 1569.68200      20.929093 #> 60         814.8075                10.864100 1562.33308      20.831108 #> 61         812.5641                10.834188 1554.62054      20.728274 #> 62         810.3833                10.805110 1546.56495      20.620866 #> 63         808.2633                10.776845 1538.18608      20.509148 #> 64         806.2028                10.749370 1529.50294      20.393373 #> 65         804.2000                10.722666 1520.53383      20.273784 #> 66         802.2534                10.696712 1511.29631      20.150617 #> 67         800.3616                10.671488 1501.80727      20.024097 #> 68         798.5231                10.646975 1492.08294      19.894439 #> 69         796.7365                10.623154 1482.13892      19.761852 #> 70         795.0004                10.600006 1471.99017      19.626536 #> 71         793.3134                10.577513 1461.65108      19.488681 #> 72         791.6743                10.555657 1451.13546      19.348473 #> 73         790.0817                10.534422 1440.45655      19.206087 #> 74         788.5343                10.513790 1429.62708      19.061694 #> 75         787.0309                10.493746 1418.65925      18.915457 #> 76         785.5704                10.474272 1407.56475      18.767530 #> 77         784.1516                10.455354 1396.35482      18.618064 #> 78         782.7732                10.436976 1385.04021      18.467203 #> 79         781.4343                10.419123 1373.63124      18.315083 #> 80         780.1336                10.401782 1362.13779      18.161837 #> 81         778.8702                10.384936 1350.56932      18.007591 #> 82         777.6431                10.368574 1338.93489      17.852465 #> 83         776.4511                10.352681 1327.24318      17.696576 #> 84         775.2934                10.337245 1315.50249      17.540033 #> 85         774.1689                10.322252 1303.72076      17.382943 #> 86         773.0768                10.307690 1291.90558      17.225408 #> 87         772.0161                10.293548 1280.06422      17.067523 #> 88         770.9860                10.279813 1268.20361      16.909381 #> 89         769.9855                10.266474 1256.33036      16.751072 #> 90         769.0139                10.253519 1244.45082      16.592678 #> 91         768.0704                10.240938 1232.57100      16.434280 #> 92         767.1541                10.228721 1220.69667      16.275956 #> 93         766.2642                10.216856 1208.83331      16.117778 #> 94         765.4001                10.205334 1196.98616      15.959815 #> 95         764.5609                10.194146 1185.16017      15.802136 #> 96         763.7461                10.183281 1173.36011      15.644801 #> 97         762.9548                10.172730 1161.59046      15.487873 #> 98         762.1864                10.162485 1149.85552      15.331407 #> 99         761.4402                10.152536 1138.15935      15.175458 #> 100        760.7157                10.142876 1126.50582      15.020078 #> 101        760.0121                10.133495 1114.89858      14.865314 #> 102        759.3290                10.124386 1103.34111      14.711215 #> 103        758.6656                10.115541 1091.83669      14.557823 #> 104        758.0214                10.106952 1080.38843      14.405179 #> 105        757.3960                10.098613 1068.99928      14.253324 #> 106        756.7886                10.090515 1057.67200      14.102293 #> 107        756.1989                10.082652 1046.40921      13.952123 #> 108        755.6262                10.075016 1035.21338      13.802845 #> 109        755.0702                10.067603 1024.08681      13.654491 #> 110        754.5303                10.060404 1013.03170      13.507089 #> 111        754.0060                10.053413 1002.05007      13.360668 #> 112        753.4969                10.046626  991.14385      13.215251 #> 113        753.0026                10.040035  980.31482      13.070864 #> 114        752.5226                10.033635  969.56465      12.927529 #> 115        752.0565                10.027420  958.89488      12.785265 #> 116        751.6040                10.021386  948.30697      12.644093 #> 117        751.1645                10.015526  937.80225      12.504030 #> 118        750.7377                10.009836  927.38194      12.365093 #> 119        750.3233                10.004311  917.04720      12.227296 #> 120        749.9209                 9.998946  906.79906      12.090654 #> 121        749.5302                 9.993736  896.63847      11.955180 #> 122        749.1507                 9.988676  886.56630      11.820884 #> 123        748.7822                 9.983763  876.58333      11.687778 #> 124        748.4244                 9.978992  866.69026      11.555870 #> 125        748.0769                 9.974359  856.88774      11.425170 #> 126        747.7395                 9.969859  847.17630      11.295684 #> 127        747.4117                 9.965490  837.55644      11.167419 #> 128        747.0935                 9.961246  828.02858      11.040381 #> 129        746.7844                 9.957125  818.59307      10.914574 #> 130        746.4842                 9.953123  809.25021      10.790003 #> 131        746.1927                 9.949236  800.00023      10.666670 #> 132        745.9096                 9.945461  790.84331      10.544578 #> 133        745.6346                 9.941795  781.77959      10.423728 #> 134        745.3675                 9.938234  772.80913      10.304122 #> 135        745.1081                 9.934775  763.93196      10.185760 #> 136        744.8562                 9.931416  755.14808      10.068641 #> 137        744.6115                 9.928153  746.45741       9.952765 #> 138        744.3738                 9.924984  737.85984       9.838131 #> 139        744.1429                 9.921906  729.35524       9.724737 #> 140        743.9187                 9.918916  720.94343       9.612579 #> 141        743.7008                 9.916011  712.62417       9.501656 #> 142        743.4892                 9.913190  704.39723       9.391963 #> 143        743.2837                 9.910449  696.26230       9.283497 #> 144        743.0840                 9.907786  688.21908       9.176254 #> 145        742.8900                 9.905200  680.26722       9.070230 #> 146        742.7015                 9.902687  672.40634       8.965418 #> 147        742.5185                 9.900246  664.63603       8.861814 #> 148        742.3406                 9.897875  656.95588       8.759412 #> 149        742.1678                 9.895570  649.36543       8.658206 #> 150        741.9999                 9.893332  641.86420       8.558189 #> 151        741.8368                 9.891157  634.45171       8.459356 #> 152        741.6782                 9.889043  627.12743       8.361699 #> 153        741.5242                 9.886990  619.89084       8.265211 #> 154        741.3746                 9.884994  612.74138       8.169885 #> 155        741.2292                 9.883056  605.67849       8.075713 #> 156        741.0879                 9.881171  598.70158       7.982688 #> 157        740.9505                 9.879341  591.81005       7.890801 #> 158        740.8171                 9.877561  585.00329       7.800044 #> 159        740.6874                 9.875832  578.28068       7.710409 #> 160        740.5614                 9.874152  571.64159       7.621888 #> 161        740.4389                 9.872518  565.08535       7.534471 #> 162        740.3198                 9.870931  558.61133       7.448151 #> 163        740.2041                 9.869388  552.21884       7.362918 #> 164        740.0916                 9.867888  545.90722       7.278763 #> 165        739.9823                 9.866431  539.67578       7.195677 #> 166        739.8760                 9.865014  533.52384       7.113651 #> 167        739.7727                 9.863636  527.45069       7.032676 #> 168        739.6723                 9.862297  521.45563       6.952742 #> 169        739.5747                 9.860996  515.53796       6.873839 #> 170        739.4798                 9.859730  509.69696       6.795959 #> 171        739.3875                 9.858500  503.93192       6.719092 #> 172        739.2978                 9.857303  498.24211       6.643228 #> 173        739.2105                 9.856140  492.62682       6.568358 #> 174        739.1257                 9.855009  487.08531       6.494471 #> 175        739.0432                 9.853910  481.61686       6.421558 #> 176        738.9630                 9.852840  476.22073       6.349610 #> 177        738.8850                 9.851801  470.89621       6.278616 #> 178        738.8092                 9.850789  465.64255       6.208567 #> 179        738.7354                 9.849806  460.45902       6.139454 #> 180        738.6637                 9.848849  455.34490       6.071265 #> 181        738.5939                 9.847919  450.29944       6.003993 #> 182        738.5261                 9.847014  445.32192       5.937626 #> 183        738.4601                 9.846134  440.41161       5.872155 #> 184        738.3959                 9.845278  435.56778       5.807570 #> 185        738.3334                 9.844445  430.78969       5.743863 #> 186        738.2726                 9.843635  426.07663       5.681022 #> 187        738.2135                 9.842847  421.42788       5.619038 #> 188        738.1560                 9.842080  416.84270       5.557903 #> 189        738.1001                 9.841334  412.32038       5.497605 #> 190        738.0456                 9.840609  407.86021       5.438136 #> 191        737.9927                 9.839902  403.46147       5.379486 #> 192        737.9411                 9.839215  399.12345       5.321646 #> 193        737.8910                 9.838546  394.84544       5.264606 #> 194        737.8422                 9.837895  390.62675       5.208357 #> 195        737.7947                 9.837262  386.46668       5.152889 #> 196        737.7484                 9.836646  382.36452       5.098194 #> 197        737.7034                 9.836046  378.31960       5.044261 #> 198        737.6596                 9.835462  374.33121       4.991083 #> 199        737.6170                 9.834893  370.39869       4.938649 #> 200        737.5755                 9.834340  366.52134       4.886951 #> 201        737.5351                 9.833801  362.69851       4.835980 #> 202        737.4958                 9.833277  358.92952       4.785727 #> 203        737.4575                 9.832766  355.21370       4.736183 #> 204        737.4202                 9.832269  351.55040       4.687339 #> 205        737.3839                 9.831785  347.93897       4.639186 #> 206        737.3486                 9.831314  344.37875       4.591717 #> 207        737.3141                 9.830855  340.86911       4.544922 #> 208        737.2806                 9.830408  337.40941       4.498792 #> 209        737.2480                 9.829973  333.99900       4.453320 #> 210        737.2162                 9.829549  330.63728       4.408497 #> 211        737.1852                 9.829136  327.32360       4.364315 #> 212        737.1551                 9.828734  324.05737       4.320765 #> 213        737.1257                 9.828343  320.83796       4.277839 #> 214        737.0971                 9.827961  317.66477       4.235530 #> 215        737.0692                 9.827589  314.53721       4.193829 #> 216        737.0420                 9.827227  311.45467       4.152729 #> 217        737.0156                 9.826874  308.41657       4.112221 #> 218        736.9898                 9.826531  305.42233       4.072298 #> 219        736.9647                 9.826196  302.47136       4.032952 #> 220        736.9402                 9.825869  299.56311       3.994175 #> 221        736.9163                 9.825551  296.69700       3.955960 #> 222        736.8931                 9.825241  293.87247       3.918300 #> 223        736.8704                 9.824939  291.08898       3.881186 #> 224        736.8483                 9.824645  288.34596       3.844613 #> 225        736.8268                 9.824358  285.64288       3.808572 #> 226        736.8058                 9.824078  282.97921       3.773056 #> 227        736.7854                 9.823805  280.35440       3.738059 #> 228        736.7654                 9.823539  277.76794       3.703573 #> 229        736.7460                 9.823280  275.21931       3.669591 #> 230        736.7270                 9.823027  272.70798       3.636106 #> 231        736.7085                 9.822781  270.23347       3.603113 #> 232        736.6905                 9.822540  267.79525       3.570603 #> 233        736.6729                 9.822306  265.39283       3.538571 #> 234        736.6558                 9.822077  263.02573       3.507010 #> 235        736.6391                 9.821854  260.69346       3.475913 #> 236        736.6228                 9.821637  258.39554       3.445274 #> 237        736.6069                 9.821425  256.13148       3.415086 #> 238        736.5914                 9.821218  253.90083       3.385344 #> 239        736.5762                 9.821016  251.70313       3.356042 #> 240        736.5615                 9.820819  249.53790       3.327172 #> 241        736.5471                 9.820627  247.40470       3.298729 #> 242        736.5330                 9.820440  245.30309       3.270708 #> 243        736.5193                 9.820257  243.23262       3.243102 #> 244        736.5059                 9.820079  241.19285       3.215905 #> 245        736.4928                 9.819905  239.18335       3.189111 #> 246        736.4801                 9.819735  237.20371       3.162716 #> 247        736.4677                 9.819569  235.25349       3.136713 #> 248        736.4555                 9.819407  233.33228       3.111097 #> 249        736.4437                 9.819249  231.43967       3.085862 #> 250        736.4321                 9.819095  229.57526       3.061003 #> 251        736.4208                 9.818944  227.73864       3.036515 #> 252        736.4098                 9.818797  225.92943       3.012392 #> 253        736.3990                 9.818653  224.14722       2.988630 #> 254        736.3885                 9.818513  222.39164       2.965222 #> 255        736.3782                 9.818376  220.66231       2.942164 #> 256        736.3682                 9.818243  218.95885       2.919451 #> 257        736.3584                 9.818112  217.28089       2.897078 #> 258        736.3489                 9.817985  215.62806       2.875041 #> 259        736.3395                 9.817860  214.00000       2.853333 #> 260        736.3304                 9.817739  212.39636       2.831951 #> 261        736.3215                 9.817620  210.81679       2.810891 #> 262        736.3128                 9.817504  209.26093       2.790146 #> 263        736.3043                 9.817390  207.72845       2.769713 #> 264        736.2960                 9.817280  206.21901       2.749587 #> 265        736.2879                 9.817172  204.73226       2.729764 #> 266        736.2799                 9.817066  203.26790       2.710239 #> 267        736.2722                 9.816962  201.82558       2.691008 #> 268        736.2646                 9.816861  200.40500       2.672067 #> 269        736.2572                 9.816763  199.00582       2.653411 #> 270        736.2500                 9.816666  197.62775       2.635037 #> 271        736.2429                 9.816572  196.27047       2.616940 #> 272        736.2360                 9.816480  194.93368       2.599116 #> 273        736.2292                 9.816390  193.61709       2.581561 #> 274        736.2226                 9.816302  192.32039       2.564272 #> 275        736.2162                 9.816216  191.04329       2.547244 #> 276        736.2099                 9.816131  189.78551       2.530473 #> 277        736.2037                 9.816049  188.54676       2.513957 #> 278        736.1976                 9.815969  187.32676       2.497690 #> 279        736.1917                 9.815890  186.12525       2.481670 #> 280        736.1860                 9.815813  184.94193       2.465892 #> 281        736.1803                 9.815738  183.77656       2.450354 #> 282        736.1748                 9.815664  182.62886       2.435051 #> 283        736.1694                 9.815592  181.49857       2.419981 #> 284        736.1641                 9.815522  180.38544       2.405139 #> 285        736.1589                 9.815453  179.28921       2.390523 #> 286        736.1539                 9.815385  178.20963       2.376128 #> 287        736.1489                 9.815319  177.14645       2.361953 #> 288        736.1441                 9.815255  176.09944       2.347993 #> 289        736.1394                 9.815192  175.06835       2.334245 #> 290        736.1347                 9.815130  174.05294       2.320706 #> 291        736.1302                 9.815069  173.05299       2.307373 #> 292        736.1258                 9.815010  172.06826       2.294243 #> 293        736.1214                 9.814952  171.09852       2.281314 #> 294        736.1172                 9.814896  170.14356       2.268581 #> 295        736.1130                 9.814840  169.20315       2.256042 #> 296        736.1089                 9.814786  168.27708       2.243694 #> 297        736.1049                 9.814733  167.36513       2.231535 #> 298        736.1010                 9.814680  166.46709       2.219561 #> 299        736.0972                 9.814629  165.58275       2.207770 #> 300        736.0935                 9.814580  164.71192       2.196159 #> 301        736.0898                 9.814531  163.85437       2.184725 #> 302        736.0862                 9.814483  163.00993       2.173466 #> 303        736.0827                 9.814436  162.17839       2.162378 #> 304        736.0793                 9.814390  161.35955       2.151461 #> 305        736.0759                 9.814345  160.55323       2.140710 #> 306        736.0726                 9.814301  159.75924       2.130123 #> 307        736.0694                 9.814258  158.97740       2.119699 #> 308        736.0662                 9.814216  158.20751       2.109433 #> 309        736.0631                 9.814175  157.44941       2.099325 #> 310        736.0601                 9.814134  156.70291       2.089372 #> 311        736.0571                 9.814094  155.96784       2.079571 #> 312        736.0542                 9.814055  155.24403       2.069920 #> 313        736.0513                 9.814017  154.53131       2.060417 #> 314        736.0485                 9.813980  153.82950       2.051060 #> 315        736.0458                 9.813943  153.13846       2.041846 #> 316        736.0431                 9.813908  152.45801       2.032773 #> 317        736.0404                 9.813872  151.78799       2.023840 #> 318        736.0378                 9.813838  151.12824       2.015043 #> 319        736.0353                 9.813804  150.47862       2.006382 #> 320        736.0328                 9.813771  149.83897       1.997853 #> 321        736.0304                 9.813739  149.20913       1.989455 #> 322        736.0280                 9.813707  148.58896       1.981186 #> 323        736.0257                 9.813676  147.97832       1.973044 #> 324        736.0234                 9.813645  147.37705       1.965027 #> 325        736.0212                 9.813615  146.78502       1.957134 #> 326        736.0189                 9.813586  146.20208       1.949361 #> 327        736.0168                 9.813557  145.62810       1.941708 #> 328        736.0147                 9.813529  145.06294       1.934173 #> 329        736.0126                 9.813501  144.50647       1.926753 #> 330        736.0106                 9.813474  143.95856       1.919447 #> 331        736.0086                 9.813448  143.41907       1.912254 #> 332        736.0066                 9.813422  142.88788       1.905172 #> 333        736.0047                 9.813396  142.36486       1.898198 #> 334        736.0028                 9.813371  141.84989       1.891332 #> 335        736.0010                 9.813346  141.34285       1.884571 #> 336        735.9992                 9.813322  140.84361       1.877915 #> 337        735.9974                 9.813298  140.35205       1.871361 #> 338        735.9956                 9.813275  139.86807       1.864908 #> 339        735.9939                 9.813252  139.39153       1.858554 #> 340        735.9922                 9.813230  138.92234       1.852298 #> 341        735.9906                 9.813208  138.46037       1.846138 #> 342        735.9890                 9.813187  138.00553       1.840074 #> 343        735.9874                 9.813165  137.55769       1.834102 #> 344        735.9859                 9.813145  137.11675       1.828223 #> 345        735.9843                 9.813124  136.68261       1.822435 #> 346        735.9828                 9.813104  136.25516       1.816735 #> 347        735.9814                 9.813085  135.83431       1.811124 #> 348        735.9799                 9.813066  135.41994       1.805599 #> 349        735.9785                 9.813047  135.01196       1.800159 #> 350        735.9771                 9.813028  134.61028       1.794804 #> 351        735.9758                 9.813010  134.21479       1.789531 #> 352        735.9744                 9.812992  133.82541       1.784339 #> 353        735.9731                 9.812975  133.44203       1.779227 #> 354        735.9718                 9.812958  133.06457       1.774194 #> 355        735.9706                 9.812941  132.69294       1.769239 #> 356        735.9693                 9.812924  132.32704       1.764361 #> 357        735.9681                 9.812908  131.96680       1.759557 #> 358        735.9669                 9.812892  131.61211       1.754828 #> 359        735.9657                 9.812876  131.26291       1.750172 #> 360        735.9646                 9.812861  130.91909       1.745588 #> 361        735.9634                 9.812846  130.58059       1.741075 #> 362        735.9623                 9.812831  130.24732       1.736631 #> 363        735.9612                 9.812817  129.91919       1.732256 #> 364        735.9602                 9.812802  129.59614       1.727948 #> 365        735.9591                 9.812788  129.27807       1.723708 #> 366        735.9581                 9.812774  128.96493       1.719532 #> 367        735.9571                 9.812761  128.65662       1.715422 #> 368        735.9561                 9.812748  128.35308       1.711374 #> 369        735.9551                 9.812735  128.05423       1.707390 #> 370        735.9541                 9.812722  127.76000       1.703467 #> 371        735.9532                 9.812709  127.47032       1.699604 #> 372        735.9523                 9.812697  127.18512       1.695802 #> 373        735.9514                 9.812685  126.90434       1.692058 #> 374        735.9505                 9.812673  126.62789       1.688372 #> 375        735.9496                 9.812661  126.35572       1.684743 #> 376        735.9487                 9.812650  126.08776       1.681170 #> 377        735.9479                 9.812638  125.82395       1.677653 #> 378        735.9470                 9.812627  125.56422       1.674190 #> 379        735.9462                 9.812616  125.30851       1.670780 #> 380        735.9454                 9.812605  125.05675       1.667423 #> 381        735.9446                 9.812595  124.80889       1.664119 #> 382        735.9438                 9.812585  124.56487       1.660865 #> 383        735.9431                 9.812574  124.32463       1.657662 #> 384        735.9423                 9.812564  124.08810       1.654508 #> 385        735.9416                 9.812555  123.85524       1.651403 #> 386        735.9409                 9.812545  123.62598       1.648346 #> 387        735.9402                 9.812536  123.40027       1.645337 #> 388        735.9395                 9.812526  123.17806       1.642374 #> 389        735.9388                 9.812517  122.95928       1.639457 #> 390        735.9381                 9.812508  122.74390       1.636585 #> 391        735.9374                 9.812499  122.53185       1.633758 #> 392        735.9368                 9.812491  122.32309       1.630974 #> 393        735.9362                 9.812482  122.11756       1.628234 #> 394        735.9355                 9.812474  121.91521       1.625536 #> 395        735.9349                 9.812465  121.71600       1.622880 #> 396        735.9343                 9.812457  121.51987       1.620265 #> 397        735.9337                 9.812449  121.32679       1.617691 #> 398        735.9331                 9.812442  121.13669       1.615156 #> 399        735.9325                 9.812434  120.94955       1.612661 #> 400        735.9320                 9.812426  120.76530       1.610204 #> 401        735.9314                 9.812419  120.58391       1.607785 #> 402        735.9309                 9.812412  120.40533       1.605404 #> 403        735.9303                 9.812404  120.22951       1.603060 #> 404        735.9298                 9.812397  120.05643       1.600752 #> 405        735.9293                 9.812390  119.88602       1.598480 #> 406        735.9288                 9.812384  119.71826       1.596243 #> 407        735.9283                 9.812377  119.55310       1.594041 #> 408        735.9278                 9.812370  119.39050       1.591873 #> 409        735.9273                 9.812364  119.23042       1.589739 #> 410        735.9268                 9.812357  119.07282       1.587638 #> 411        735.9263                 9.812351  118.91767       1.585569 #> 412        735.9259                 9.812345  118.76492       1.583532 #> 413        735.9254                 9.812339  118.61454       1.581527 #> 414        735.9250                 9.812333  118.46650       1.579553 #> 415        735.9245                 9.812327  118.32075       1.577610 #> 416        735.9241                 9.812321  118.17726       1.575697 #> 417        735.9237                 9.812316  118.03599       1.573813 #> 418        735.9233                 9.812310  117.89692       1.571959 #> 419        735.9229                 9.812305  117.76001       1.570133 #> 420        735.9225                 9.812299  117.62522       1.568336 #> 421        735.9221                 9.812294  117.49252       1.566567 #> 422        735.9217                 9.812289  117.36188       1.564825 #> 423        735.9213                 9.812284  117.23327       1.563110 #> 424        735.9209                 9.812279  117.10665       1.561422 #> 425        735.9205                 9.812274  116.98200       1.559760 #> 426        735.9202                 9.812269  116.85928       1.558124 #> 427        735.9198                 9.812264  116.73846       1.556513 #> 428        735.9195                 9.812260  116.61952       1.554927 #> 429        735.9191                 9.812255  116.50243       1.553366 #> 430        735.9188                 9.812250  116.38716       1.551829 #> 431        735.9184                 9.812246  116.27367       1.550316 #> 432        735.9181                 9.812241  116.16194       1.548826 #> 433        735.9178                 9.812237  116.05195       1.547359 #> 434        735.9175                 9.812233  115.94367       1.545916 #> 435        735.9172                 9.812229  115.83707       1.544494 #> 436        735.9168                 9.812225  115.73212       1.543095 #> 437        735.9165                 9.812221  115.62880       1.541717 #> 438        735.9162                 9.812217  115.52708       1.540361 #> 439        735.9160                 9.812213  115.42695       1.539026 #> 440        735.9157                 9.812209  115.32837       1.537712 #> 441        735.9154                 9.812205  115.23132       1.536418 #> 442        735.9151                 9.812201  115.13577       1.535144 #> 443        735.9148                 9.812198  115.04171       1.533890 #> 444        735.9146                 9.812194  114.94912       1.532655 #> 445        735.9143                 9.812191  114.85795       1.531439 #> 446        735.9140                 9.812187  114.76821       1.530243 #> 447        735.9138                 9.812184  114.67986       1.529065 #> 448        735.9135                 9.812180  114.59288       1.527905 #> 449        735.9133                 9.812177  114.50725       1.526763 #> 450        735.9130                 9.812174  114.42295       1.525639 #> 451        735.9128                 9.812170  114.33996       1.524533 #> 452        735.9125                 9.812167  114.25826       1.523443 #> 453        735.9123                 9.812164  114.17782       1.522371 #> 454        735.9121                 9.812161  114.09864       1.521315 #> 455        735.9119                 9.812158  114.02069       1.520276 #> 456        735.9116                 9.812155  113.94395       1.519253 #> 457        735.9114                 9.812152  113.86840       1.518245 #> 458        735.9112                 9.812149  113.79402       1.517254 #> 459        735.9110                 9.812147  113.72080       1.516277 #> 460        735.9108                 9.812144  113.64871       1.515316 #> 461        735.9106                 9.812141  113.57775       1.514370 #> 462        735.9104                 9.812138  113.50789       1.513439 #> 463        735.9102                 9.812136  113.43911       1.512522 #> 464        735.9100                 9.812133  113.37140       1.511619 #> 465        735.9098                 9.812131  113.30475       1.510730 #> 466        735.9096                 9.812128  113.23913       1.509855 #> 467        735.9094                 9.812126  113.17453       1.508994 #> 468        735.9092                 9.812123  113.11093       1.508146 #> 469        735.9091                 9.812121  113.04832       1.507311 #> 470        735.9089                 9.812118  112.98669       1.506489 #> 471        735.9087                 9.812116  112.92601       1.505680 #> 472        735.9085                 9.812114  112.86627       1.504884 #> 473        735.9084                 9.812112  112.80747       1.504100 #> 474        735.9082                 9.812109  112.74957       1.503328 #> 475        735.9080                 9.812107  112.69258       1.502568 #> 476        735.9079                 9.812105  112.63647       1.501820 #> 477        735.9077                 9.812103  112.58124       1.501083 #> 478        735.9076                 9.812101  112.52686       1.500358 #> 479        735.9074                 9.812099  112.47332       1.499644 #> 480        735.9073                 9.812097  112.42062       1.498942 #> 481        735.9071                 9.812095  112.36874       1.498250 #> 482        735.9070                 9.812093  112.31767       1.497569 #> 483        735.9068                 9.812091  112.26739       1.496898 #> 484        735.9067                 9.812089  112.21789       1.496238 #> 485        735.9065                 9.812087  112.16915       1.495589 #> 486        735.9064                 9.812086  112.12118       1.494949 #> 487        735.9063                 9.812084  112.07395       1.494319 #> 488        735.9061                 9.812082  112.02746       1.493699 #> 489        735.9060                 9.812080  111.98169       1.493089 #> 490        735.9059                 9.812079  111.93663       1.492488 #> 491        735.9058                 9.812077  111.89227       1.491897 #> 492        735.9056                 9.812075  111.84860       1.491315 #> 493        735.9055                 9.812074  111.80561       1.490741 #> 494        735.9054                 9.812072  111.76329       1.490177 #> 495        735.9053                 9.812070  111.72162       1.489622 #> 496        735.9052                 9.812069  111.68060       1.489075 #> 497        735.9050                 9.812067  111.64022       1.488536 #> 498        735.9049                 9.812066  111.60047       1.488006 #> 499        735.9048                 9.812064  111.56134       1.487485 #> 500        735.9047                 9.812063  111.52281       1.486971 #> 501        735.9046                 9.812061  111.48489       1.486465 #> 502        735.9045                 9.812060  111.44755       1.485967 #> 503        735.9044                 9.812059  111.41079       1.485477 #> 504        735.9043                 9.812057  111.37461       1.484995 #> 505        735.9042                 9.812056  111.33899       1.484520 #> 506        735.9041                 9.812055  111.30392       1.484052 #> 507        735.9040                 9.812053  111.26939       1.483592 #> 508        735.9039                 9.812052  111.23541       1.483139 #> 509        735.9038                 9.812051  111.20195       1.482693 #> 510        735.9037                 9.812050  111.16901       1.482253 #> 511        735.9036                 9.812048  111.13658       1.481821 #> 512        735.9035                 9.812047  111.10466       1.481395 #> 513        735.9035                 9.812046  111.07324       1.480976 #> 514        735.9034                 9.812045  111.04230       1.480564 #> 515        735.9033                 9.812044  111.01184       1.480158 #> 516        735.9032                 9.812043  110.98186       1.479758 #> 517        735.9031                 9.812041  110.95234       1.479365 #> 518        735.9030                 9.812040  110.92329       1.478977 #> 519        735.9029                 9.812039  110.89468       1.478596 #> 520        735.9029                 9.812038  110.86652       1.478220 #> 521        735.9028                 9.812037  110.83880       1.477851 #> 522        735.9027                 9.812036  110.81150       1.477487 #> 523        735.9026                 9.812035  110.78464       1.477128 #> 524        735.9026                 9.812034  110.75819       1.476776 #> 525        735.9025                 9.812033  110.73215       1.476429 #> 526        735.9024                 9.812032  110.70652       1.476087 #> 527        735.9023                 9.812031  110.68128       1.475750 #> 528        735.9023                 9.812030  110.65644       1.475419 #> 529        735.9022                 9.812029  110.63198       1.475093 #> 530        735.9021                 9.812029  110.60791       1.474772 #> 531        735.9021                 9.812028  110.58420       1.474456 #> 532        735.9020                 9.812027  110.56087       1.474145 #> 533        735.9019                 9.812026  110.53790       1.473839 #> 534        735.9019                 9.812025  110.51529       1.473537 #> 535        735.9018                 9.812024  110.49303       1.473240 #> 536        735.9018                 9.812023  110.47111       1.472948 #> 537        735.9017                 9.812023  110.44954       1.472660 #> 538        735.9016                 9.812022  110.42830       1.472377 #> 539        735.9016                 9.812021  110.40739       1.472099 #> 540        735.9015                 9.812020  110.38681       1.471824 #> 541        735.9015                 9.812020  110.36654       1.471554 #> 542        735.9014                 9.812019  110.34659       1.471288 #> 543        735.9014                 9.812018  110.32696       1.471026 #> 544        735.9013                 9.812017  110.30762       1.470768 #> 545        735.9013                 9.812017  110.28859       1.470515 #> 546        735.9012                 9.812016  110.26986       1.470265 #> 547        735.9011                 9.812015  110.25141       1.470019 #> 548        735.9011                 9.812015  110.23325       1.469777 #> 549        735.9010                 9.812014  110.21538       1.469538 #> 550        735.9010                 9.812013  110.19778       1.469304 #> 551        735.9009                 9.812013  110.18046       1.469073 #> 552        735.9009                 9.812012  110.16340       1.468845 #> 553        735.9009                 9.812011  110.14661       1.468622 #> 554        735.9008                 9.812011  110.13009       1.468401 #> 555        735.9008                 9.812010  110.11382       1.468184 #> 556        735.9007                 9.812010  110.09780       1.467971 #> 557        735.9007                 9.812009  110.08203       1.467760 #> 558        735.9006                 9.812008  110.06651       1.467553 #> 559        735.9006                 9.812008  110.05122       1.467350 #> 560        735.9005                 9.812007  110.03618       1.467149 #> 561        735.9005                 9.812007  110.02137       1.466952 #> 562        735.9005                 9.812006  110.00679       1.466757 #> 563        735.9004                 9.812006  109.99244       1.466566 #> 564        735.9004                 9.812005  109.97831       1.466377 #> 565        735.9003                 9.812005  109.96440       1.466192 #> 566        735.9003                 9.812004  109.95070       1.466009 #> 567        735.9003                 9.812004  109.93722       1.465830 #> 568        735.9002                 9.812003  109.92395       1.465653 #> 569        735.9002                 9.812003  109.91089       1.465478 #> 570        735.9002                 9.812002  109.89802       1.465307 #> 571        735.9001                 9.812002  109.88536       1.465138 #> 572        735.9001                 9.812001  109.87290       1.464972 #> 573        735.9001                 9.812001  109.86063       1.464808 #> 574        735.9000                 9.812000  109.84855       1.464647 #> 575        735.9000                 9.812000  109.83666       1.464489 #> 576        735.9000                 9.811999  109.82495       1.464333 #> 577        735.8999                 9.811999  109.81342       1.464179 #> 578        735.8999                 9.811999  109.80208       1.464028 #> 579        735.8999                 9.811998  109.79091       1.463879 #> 580        735.8998                 9.811998  109.77991       1.463732 #> 581        735.8998                 9.811997  109.76909       1.463588 #> 582        735.8998                 9.811997  109.75843       1.463446 #> 583        735.8997                 9.811997  109.74794       1.463306 #> 584        735.8997                 9.811996  109.73762       1.463168 #> 585        735.8997                 9.811996  109.72745       1.463033 #> 586        735.8997                 9.811995  109.71744       1.462899 #> 587        735.8996                 9.811995  109.70759       1.462768 #> 588        735.8996                 9.811995  109.69789       1.462639 #> 589        735.8996                 9.811994  109.68834       1.462511 #> 590        735.8996                 9.811994  109.67894       1.462386 #> 591        735.8995                 9.811994  109.66969       1.462263 #> 592        735.8995                 9.811993  109.66058       1.462141 #> 593        735.8995                 9.811993  109.65161       1.462021 #> 594        735.8995                 9.811993  109.64278       1.461904 #> 595        735.8994                 9.811992  109.63409       1.461788 #> 596        735.8994                 9.811992  109.62553       1.461674 #> 597        735.8994                 9.811992  109.61711       1.461561 #> 598        735.8994                 9.811991  109.60882       1.461451 #> 599        735.8993                 9.811991  109.60066       1.461342 #> 600        735.8993                 9.811991  109.59262       1.461235 #> 601        735.8993                 9.811991  109.58471       1.461129 #>             work average_power average_power_relative         RF force_angle #> 1      0.0000000           NaN                    NaN 0.76338532    40.23644 #> 2      0.4962128      49.62128               0.661617 0.75836311    40.67989 #> 3      1.9541030      97.70515               1.302735 0.75328620    41.12415 #> 4      4.3288155     144.29385               1.923918 0.74815586    41.56912 #> 5      7.5771383     189.42846               2.525713 0.74297345    42.01467 #> 6     11.6574468     233.14894               3.108652 0.73774036    42.46072 #> 7     16.5296500     275.49417               3.673256 0.73245806    42.90714 #> 8     22.1551383     316.50198               4.220026 0.72712806    43.35383 #> 9     28.4967328     356.20916               4.749455 0.72175192    43.80069 #> 10    35.5186370     394.65152               5.262020 0.71633125    44.24759 #> 11    43.1863894     431.86389               5.758185 0.71086771    44.69444 #> 12    51.4668180     467.88016               6.238402 0.70536300    45.14112 #> 13    60.3279961     502.73330               6.703111 0.69981887    45.58753 #> 14    69.7392000     536.45538               7.152738 0.69423710    46.03354 #> 15    79.6708674     569.07762               7.587702 0.68861951    46.47907 #> 16    90.0945581     600.63039               8.008405 0.68296795    46.92399 #> 17   100.9829150     631.14322               8.415243 0.67728430    47.36821 #> 18   112.3096270     660.64486               8.808598 0.67157047    47.81161 #> 19   124.0493933     689.16330               9.188844 0.66582840    48.25409 #> 20   136.1778883     716.72573               9.556343 0.66006005    48.69555 #> 21   148.6717280     743.35864               9.911449 0.65426738    49.13588 #> 22   161.5084376     769.08780              10.254504 0.64845239    49.57498 #> 23   174.6664200     793.93827              10.585844 0.64261708    50.01275 #> 24   188.1249252     817.93446              10.905793 0.63676345    50.44910 #> 25   201.8640214     841.10009              11.214668 0.63089352    50.88392 #> 26   215.8645660     863.45826              11.512777 0.62500931    51.31713 #> 27   230.1081786     885.03146              11.800419 0.61911284    51.74862 #> 28   244.5772141     905.84153              12.077887 0.61320611    52.17831 #> 29   259.2547375     925.90978              12.345464 0.60729115    52.60611 #> 30   274.1244983     945.25689              12.603425 0.60136993    53.03193 #> 31   289.1709074     963.90302              12.852040 0.59544445    53.45568 #> 32   304.3790134     981.86779              13.091570 0.58951669    53.87728 #> 33   319.7344801     999.17025              13.322270 0.58358858    54.29666 #> 34   335.2235652    1015.82899              13.544386 0.57766206    54.71373 #> 35   350.8330993    1031.86206              13.758161 0.57173905    55.12842 #> 36   366.5504651    1047.28704              13.963827 0.56582142    55.54065 #> 37   382.3635787    1062.12105              14.161614 0.55991104    55.95035 #> 38   398.2608699    1076.38073              14.351743 0.55400972    56.35747 #> 39   414.2312645    1090.08228              14.534430 0.54811927    56.76192 #> 40   430.2641664    1103.24145              14.709886 0.54224145    57.16364 #> 41   446.3494403    1115.87360              14.878315 0.53637799    57.56259 #> 42   462.4773956    1127.99365              15.039915 0.53053057    57.95869 #> 43   478.6387701    1139.61612              15.194882 0.52470084    58.35189 #> 44   494.8247149    1150.75515              15.343402 0.51889042    58.74215 #> 45   511.0267792    1161.42450              15.485660 0.51310088    59.12940 #> 46   527.2368962    1171.63755              15.621834 0.50733375    59.51361 #> 47   543.4473688    1181.40732              15.752098 0.50159051    59.89472 #> 48   559.6508567    1190.74650              15.876620 0.49587260    60.27269 #> 49   575.8403628    1199.66742              15.995566 0.49018142    60.64749 #> 50   592.0092211    1208.18208              16.109094 0.48451831    61.01908 #> 51   608.1510843    1216.30217              16.217362 0.47888459    61.38742 #> 52   624.2599123    1224.03904              16.320521 0.47328151    61.75248 #> 53   640.3299608    1231.40377              16.418717 0.46771027    62.11423 #> 54   656.3557701    1238.40711              16.512095 0.46217205    62.47265 #> 55   672.3321551    1245.05955              16.600794 0.45666795    62.82770 #> 56   688.2541944    1251.37126              16.684950 0.45119906    63.17936 #> 57   704.1172211    1257.35218              16.764696 0.44576637    63.52762 #> 58   719.9168127    1263.01195              16.840159 0.44037088    63.87245 #> 59   735.6487823    1268.35997              16.911466 0.43501351    64.21385 #> 60   751.3091695    1273.40537              16.978738 0.42969514    64.55179 #> 61   766.8942319    1278.15705              17.042094 0.42441660    64.88626 #> 62   782.4004369    1282.62367              17.101649 0.41917869    65.21725 #> 63   797.8244534    1286.81363              17.157515 0.41398214    65.54477 #> 64   813.1631444    1290.73515              17.209802 0.40882766    65.86879 #> 65   828.4135591    1294.39619              17.258616 0.40371590    66.18932 #> 66   843.5729263    1297.80450              17.304060 0.39864748    66.50635 #> 67   858.6386469    1300.96765              17.346235 0.39362296    66.81988 #> 68   873.6082874    1303.89297              17.385240 0.38864288    67.12992 #> 69   888.4795735    1306.58761              17.421168 0.38370772    67.43646 #> 70   903.2503835    1309.05853              17.454114 0.37881793    67.73952 #> 71   917.9187425    1311.31249              17.484167 0.37397392    68.03909 #> 72   932.4828167    1313.35608              17.511414 0.36917607    68.33519 #> 73   946.9409075    1315.19570              17.535943 0.36442470    68.62782 #> 74   961.2914460    1316.83760              17.557835 0.35972011    68.91699 #> 75   975.5329880    1318.28782              17.577171 0.35506257    69.20272 #> 76   989.6642088    1319.55228              17.594030 0.35045231    69.48502 #> 77  1003.6838983    1320.63671              17.608489 0.34588952    69.76390 #> 78  1017.5909563    1321.54670              17.620623 0.34137437    70.03937 #> 79  1031.3843881    1322.28768              17.630502 0.33690699    70.31146 #> 80  1045.0632996    1322.86494              17.638199 0.33248749    70.58017 #> 81  1058.6268939    1323.28362              17.643782 0.32811593    70.84554 #> 82  1072.0744662    1323.54872              17.647316 0.32379237    71.10757 #> 83  1085.4054007    1323.66512              17.648868 0.31951682    71.36629 #> 84  1098.6191665    1323.63755              17.648501 0.31528928    71.62172 #> 85  1111.7153137    1323.47061              17.646275 0.31110971    71.87388 #> 86  1124.6934702    1323.16879              17.642251 0.30697807    72.12279 #> 87  1137.5533381    1322.73644              17.636486 0.30289427    72.36848 #> 88  1150.2946904    1322.17781              17.629037 0.29885822    72.61096 #> 89  1162.9173681    1321.49701              17.619960 0.29486979    72.85027 #> 90  1175.4212767    1320.69806              17.609308 0.29092884    73.08643 #> 91  1187.8063836    1319.78487              17.597132 0.28703521    73.31946 #> 92  1200.0727151    1318.76123              17.583483 0.28318872    73.54939 #> 93  1212.2203537    1317.63082              17.568411 0.27938917    73.77625 #> 94  1224.2494354    1316.39724              17.551963 0.27563637    74.00006 #> 95  1236.1601474    1315.06399              17.534186 0.27193006    74.22085 #> 96  1247.9527253    1313.63445              17.515126 0.26827002    74.43865 #> 97  1259.6274509    1312.11193              17.494826 0.26465599    74.65349 #> 98  1271.1846502    1310.49964              17.473329 0.26108768    74.86539 #> 99  1282.6246906    1308.80070              17.450676 0.25756483    75.07438 #> 100 1293.9479793    1307.01816              17.426909 0.25408713    75.28050 #> 101 1305.1549613    1305.15496              17.402066 0.25065429    75.48377 #> 102 1316.2461168    1303.21398              17.376186 0.24726598    75.68421 #> 103 1327.2219603    1301.19800              17.349307 0.24392187    75.88187 #> 104 1338.0830378    1299.10975              17.321463 0.24062163    76.07677 #> 105 1348.8299260    1296.95185              17.292691 0.23736492    76.26893 #> 106 1359.4632297    1294.72689              17.263025 0.23415139    76.45839 #> 107 1369.9835810    1292.43734              17.232498 0.23098067    76.64519 #> 108 1380.3916371    1290.08564              17.201142 0.22785240    76.82933 #> 109 1390.6880794    1287.67415              17.168989 0.22476621    77.01087 #> 110 1400.8736116    1285.20515              17.136069 0.22172172    77.18982 #> 111 1410.9489584    1282.68087              17.102412 0.21871855    77.36622 #> 112 1420.9148644    1280.10348              17.068046 0.21575630    77.54010 #> 113 1430.7720928    1277.47508              17.033001 0.21283459    77.71148 #> 114 1440.5214237    1274.79772              16.997303 0.20995303    77.88040 #> 115 1450.1636537    1272.07338              16.960978 0.20711120    78.04689 #> 116 1459.6995942    1269.30399              16.924053 0.20430871    78.21097 #> 117 1469.1300705    1266.49144              16.886553 0.20154516    78.37267 #> 118 1478.4559206    1263.63754              16.848501 0.19882013    78.53203 #> 119 1487.6779946    1260.74406              16.809921 0.19613323    78.68907 #> 120 1496.7971533    1257.81273              16.770836 0.19348403    78.84382 #> 121 1505.8142676    1254.84522              16.731270 0.19087213    78.99631 #> 122 1514.7302173    1251.84315              16.691242 0.18829711    79.14658 #> 123 1523.5458908    1248.80811              16.650775 0.18575857    79.29464 #> 124 1532.2621836    1245.74161              16.609888 0.18325608    79.44052 #> 125 1540.8799979    1242.64516              16.568602 0.18078924    79.58427 #> 126 1549.4002420    1239.52019              16.526936 0.17835764    79.72589 #> 127 1557.8238292    1236.36812              16.484908 0.17596085    79.86542 #> 128 1566.1516775    1233.19030              16.442537 0.17359847    80.00289 #> 129 1574.3847087    1229.98805              16.399841 0.17127008    80.13833 #> 130 1582.5238478    1226.76267              16.356836 0.16897529    80.27175 #> 131 1590.5700225    1223.51540              16.313539 0.16671367    80.40320 #> 132 1598.5241626    1220.24745              16.269966 0.16448483    80.53269 #> 133 1606.3871994    1216.96000              16.226133 0.16228835    80.66025 #> 134 1614.1600652    1213.65418              16.182056 0.16012383    80.78592 #> 135 1621.8436930    1210.33111              16.137748 0.15799088    80.90970 #> 136 1629.4390155    1206.99186              16.093225 0.15588909    81.03164 #> 137 1636.9469652    1203.63747              16.048500 0.15381807    81.15175 #> 138 1644.3684739    1200.26896              16.003586 0.15177742    81.27006 #> 139 1651.7044720    1196.88730              15.958497 0.14976674    81.38659 #> 140 1658.9558881    1193.49344              15.913246 0.14778566    81.50138 #> 141 1666.1236490    1190.08832              15.867844 0.14583378    81.61444 #> 142 1673.2086792    1186.67282              15.822304 0.14391072    81.72579 #> 143 1680.2119003    1183.24782              15.776638 0.14201610    81.83547 #> 144 1687.1342309    1179.81415              15.730855 0.14014955    81.94350 #> 145 1693.9765865    1176.37263              15.684968 0.13831067    82.04990 #> 146 1700.7398786    1172.92405              15.638987 0.13649912    82.15468 #> 147 1707.4250151    1169.46919              15.592923 0.13471450    82.25789 #> 148 1714.0328997    1166.00878              15.546784 0.13295647    82.35953 #> 149 1720.5644317    1162.54353              15.500580 0.13122466    82.45963 #> 150 1727.0205057    1159.07416              15.454322 0.12951871    82.55822 #> 151 1733.4020115    1155.60134              15.408018 0.12783827    82.65531 #> 152 1739.7098339    1152.12572              15.361676 0.12618298    82.75092 #> 153 1745.9448524    1148.64793              15.315306 0.12455250    82.84509 #> 154 1752.1079412    1145.16859              15.268915 0.12294648    82.93782 #> 155 1758.1999687    1141.68829              15.222511 0.12136458    83.02914 #> 156 1764.2217976    1138.20761              15.176101 0.11980647    83.11907 #> 157 1770.1742849    1134.72711              15.129695 0.11827180    83.20763 #> 158 1776.0582812    1131.24731              15.083298 0.11676026    83.29484 #> 159 1781.8746312    1127.76875              15.036917 0.11527150    83.38071 #> 160 1787.6241733    1124.29193              14.990559 0.11380522    83.46528 #> 161 1793.3077392    1120.81734              14.944231 0.11236109    83.54856 #> 162 1798.9261544    1117.34544              14.897939 0.11093880    83.63056 #> 163 1804.4802375    1113.87669              14.851689 0.10953803    83.71131 #> 164 1809.9708007    1110.41153              14.805487 0.10815847    83.79083 #> 165 1815.3986492    1106.95040              14.759339 0.10679982    83.86913 #> 166 1820.7645814    1103.49369              14.713249 0.10546179    83.94623 #> 167 1826.0693887    1100.04180              14.667224 0.10414406    84.02215 #> 168 1831.3138555    1096.59512              14.621268 0.10284636    84.09690 #> 169 1836.4987593    1093.15402              14.575387 0.10156838    84.17051 #> 170 1841.6248703    1089.71886              14.529585 0.10030984    84.24299 #> 171 1846.6929517    1086.28997              14.483866 0.09907046    84.31435 #> 172 1851.7037595    1082.86770              14.438236 0.09784996    84.38463 #> 173 1856.6580423    1079.45235              14.392698 0.09664806    84.45382 #> 174 1861.5565417    1076.04424              14.347257 0.09546449    84.52195 #> 175 1866.3999920    1072.64367              14.301916 0.09429898    84.58903 #> 176 1871.1891199    1069.25093              14.256679 0.09315127    84.65508 #> 177 1875.9246453    1065.86628              14.211550 0.09202109    84.72011 #> 178 1880.6072803    1062.48999              14.166533 0.09090818    84.78414 #> 179 1885.2377300    1059.12232              14.121631 0.08981229    84.84719 #> 180 1889.8166920    1055.76352              14.076847 0.08873318    84.90927 #> 181 1894.3448568    1052.41381              14.032184 0.08767058    84.97039 #> 182 1898.8229073    1049.07343              13.987646 0.08662425    85.03057 #> 183 1903.2515192    1045.74259              13.943235 0.08559395    85.08982 #> 184 1907.6313611    1042.42151              13.898953 0.08457945    85.14816 #> 185 1911.9630939    1039.11038              13.854805 0.08358051    85.20560 #> 186 1916.2473717    1035.80939              13.810792 0.08259689    85.26215 #> 187 1920.4848410    1032.51873              13.766916 0.08162837    85.31783 #> 188 1924.6761412    1029.23858              13.723181 0.08067472    85.37265 #> 189 1928.8219045    1025.96910              13.679588 0.07973572    85.42663 #> 190 1932.9227559    1022.71045              13.636139 0.07881114    85.47977 #> 191 1936.9793134    1019.46280              13.592837 0.07790078    85.53209 #> 192 1940.9921877    1016.22628              13.549684 0.07700441    85.58360 #> 193 1944.9619824    1013.00103              13.506680 0.07612184    85.63432 #> 194 1948.8892943    1009.78720              13.463829 0.07525284    85.68425 #> 195 1952.7747129    1006.58490              13.421132 0.07439722    85.73341 #> 196 1956.6188209    1003.39427              13.378590 0.07355477    85.78181 #> 197 1960.4221941    1000.21541              13.336205 0.07272529    85.82947 #> 198 1964.1854013     997.04843              13.293979 0.07190860    85.87638 #> 199 1967.9090045     993.89344              13.251912 0.07110448    85.92257 #> 200 1971.5935590     990.75053              13.210007 0.07031277    85.96805 #> 201 1975.2396131     987.61981              13.168264 0.06953326    86.01282 #> 202 1978.8477086     984.50135              13.126685 0.06876577    86.05690 #> 203 1982.4183806     981.39524              13.085270 0.06801012    86.10030 #> 204 1985.9521577     978.30156              13.044021 0.06726613    86.14302 #> 205 1989.4495616     975.22037              13.002938 0.06653362    86.18509 #> 206 1992.9111078     972.15176              12.962023 0.06581242    86.22650 #> 207 1996.3373052     969.09578              12.921277 0.06510235    86.26727 #> 208 1999.7286565     966.05249              12.880700 0.06440325    86.30741 #> 209 2003.0856577     963.02195              12.840293 0.06371495    86.34693 #> 210 2006.4087988     960.00421              12.800056 0.06303728    86.38583 #> 211 2009.6985635     956.99932              12.759991 0.06237009    86.42414 #> 212 2012.9554290     954.00731              12.720097 0.06171321    86.46185 #> 213 2016.1798669     951.02824              12.680377 0.06106648    86.49897 #> 214 2019.3723423     948.06213              12.640828 0.06042975    86.53552 #> 215 2022.5333144     945.10903              12.601454 0.05980286    86.57150 #> 216 2025.6632365     942.16895              12.562253 0.05918568    86.60693 #> 217 2028.7625559     939.24192              12.523226 0.05857804    86.64180 #> 218 2031.8317140     936.32798              12.484373 0.05797980    86.67614 #> 219 2034.8711467     933.42713              12.445695 0.05739082    86.70994 #> 220 2037.8812837     930.53940              12.407192 0.05681095    86.74322 #> 221 2040.8625494     927.66480              12.368864 0.05624006    86.77598 #> 222 2043.8153623     924.80333              12.330711 0.05567800    86.80823 #> 223 2046.7401356     921.95502              12.292734 0.05512465    86.83999 #> 224 2049.6372768     919.11986              12.254931 0.05457987    86.87125 #> 225 2052.5071880     916.29785              12.217305 0.05404353    86.90202 #> 226 2055.3502658     913.48901              12.179853 0.05351549    86.93232 #> 227 2058.1669017     910.69332              12.142578 0.05299563    86.96215 #> 228 2060.9574817     907.91078              12.105477 0.05248383    86.99152 #> 229 2063.7223866     905.14140              12.068552 0.05197995    87.02043 #> 230 2066.4619922     902.38515              12.031802 0.05148389    87.04889 #> 231 2069.1766690     899.64203              11.995227 0.05099551    87.07690 #> 232 2071.8667825     896.91203              11.958827 0.05051470    87.10449 #> 233 2074.5326933     894.19513              11.922602 0.05004135    87.13164 #> 234 2077.1747569     891.49131              11.886551 0.04957533    87.15838 #> 235 2079.7933240     888.80057              11.850674 0.04911654    87.18470 #> 236 2082.3887406     886.12287              11.814972 0.04866486    87.21061 #> 237 2084.9613477     883.45820              11.779443 0.04822018    87.23612 #> 238 2087.5114816     880.80653              11.744087 0.04778241    87.26123 #> 239 2090.0394741     878.16785              11.708905 0.04735142    87.28595 #> 240 2092.5456524     875.54211              11.673895 0.04692712    87.31029 #> 241 2095.0303389     872.92931              11.639057 0.04650940    87.33425 #> 242 2097.4938517     870.32940              11.604392 0.04609816    87.35783 #> 243 2099.9365045     867.74236              11.569898 0.04569330    87.38106 #> 244 2102.3586064     865.16815              11.535575 0.04529472    87.40392 #> 245 2104.7604623     862.60675              11.501423 0.04490232    87.42642 #> 246 2107.1423729     860.05811              11.467441 0.04451602    87.44858 #> 247 2109.5046345     857.52221              11.433629 0.04413571    87.47039 #> 248 2111.8475393     854.99900              11.399987 0.04376130    87.49186 #> 249 2114.1713754     852.48846              11.366513 0.04339271    87.51300 #> 250 2116.4764267     849.99053              11.333207 0.04302983    87.53381 #> 251 2118.7629732     847.50519              11.300069 0.04267259    87.55430 #> 252 2121.0312908     845.03239              11.267098 0.04232089    87.57447 #> 253 2123.2816517     842.57208              11.234294 0.04197466    87.59432 #> 254 2125.5143240     840.12424              11.201657 0.04163380    87.61387 #> 255 2127.7295721     837.68881              11.169184 0.04129823    87.63311 #> 256 2129.9276565     835.26575              11.136877 0.04096787    87.65206 #> 257 2132.1088341     832.85501              11.104734 0.04064265    87.67071 #> 258 2134.2733580     830.45656              11.072754 0.04032247    87.68907 #> 259 2136.4214778     828.07034              11.040938 0.04000726    87.70714 #> 260 2138.5534394     825.69631              11.009284 0.03969696    87.72493 #> 261 2140.6694853     823.33442              10.977792 0.03939147    87.74245 #> 262 2142.7698543     820.98462              10.946462 0.03909072    87.75970 #> 263 2144.8547818     818.64686              10.915292 0.03879465    87.77667 #> 264 2146.9245000     816.32110              10.884281 0.03850317    87.79339 #> 265 2148.9792376     814.00729              10.853430 0.03821623    87.80984 #> 266 2151.0192199     811.70537              10.822738 0.03793374    87.82604 #> 267 2153.0446691     809.41529              10.792204 0.03765563    87.84198 #> 268 2155.0558040     807.13701              10.761827 0.03738185    87.85768 #> 269 2157.0528404     804.87046              10.731606 0.03711233    87.87313 #> 270 2159.0359908     802.61561              10.701541 0.03684699    87.88835 #> 271 2161.0054647     800.37239              10.671632 0.03658577    87.90332 #> 272 2162.9614685     798.14076              10.641877 0.03632861    87.91807 #> 273 2164.9042057     795.92066              10.612276 0.03607545    87.93258 #> 274 2166.8338766     793.71204              10.582827 0.03582622    87.94687 #> 275 2168.7506788     791.51485              10.553531 0.03558087    87.96094 #> 276 2170.6548067     789.32902              10.524387 0.03533932    87.97478 #> 277 2172.5464523     787.15451              10.495393 0.03510153    87.98842 #> 278 2174.4258044     784.99127              10.466550 0.03486744    88.00184 #> 279 2176.2930491     782.83923              10.437856 0.03463698    88.01505 #> 280 2178.1483700     780.69834              10.409311 0.03441011    88.02806 #> 281 2179.9919476     778.56855              10.380914 0.03418676    88.04086 #> 282 2181.8239601     776.44981              10.352664 0.03396689    88.05347 #> 283 2183.6445829     774.34205              10.324561 0.03375043    88.06588 #> 284 2185.4539887     772.24523              10.296603 0.03353733    88.07809 #> 285 2187.2523480     770.15928              10.268790 0.03332755    88.09012 #> 286 2189.0398284     768.08415              10.241122 0.03312103    88.10196 #> 287 2190.8165952     766.01979              10.213597 0.03291772    88.11361 #> 288 2192.5828113     763.96614              10.186215 0.03271756    88.12509 #> 289 2194.3386371     761.92314              10.158975 0.03252052    88.13638 #> 290 2196.0842306     759.89074              10.131876 0.03232655    88.14750 #> 291 2197.8197474     757.86888              10.104918 0.03213559    88.15845 #> 292 2199.5453411     755.85751              10.078100 0.03194759    88.16923 #> 293 2201.2611626     753.85656              10.051421 0.03176252    88.17984 #> 294 2202.9673608     751.86599              10.024880 0.03158033    88.19028 #> 295 2204.6640823     749.88574               9.998477 0.03140097    88.20056 #> 296 2206.3514717     747.91575               9.972210 0.03122440    88.21068 #> 297 2208.0296710     745.95597               9.946080 0.03105057    88.22065 #> 298 2209.6988206     744.00634               9.920084 0.03087945    88.23046 #> 299 2211.3590585     742.06680               9.894224 0.03071098    88.24011 #> 300 2213.0105207     740.13730               9.868497 0.03054514    88.24962 #> 301 2214.6533412     738.21778               9.842904 0.03038187    88.25898 #> 302 2216.2876519     736.30819               9.817443 0.03022114    88.26819 #> 303 2217.9135828     734.40847               9.792113 0.03006292    88.27726 #> 304 2219.5312620     732.51857               9.766914 0.02990715    88.28619 #> 305 2221.1408155     730.63843               9.741846 0.02975380    88.29498 #> 306 2222.7423677     728.76799               9.716907 0.02960284    88.30363 #> 307 2224.3360409     726.90720               9.692096 0.02945423    88.31215 #> 308 2225.9219555     725.05601               9.667413 0.02930792    88.32054 #> 309 2227.5002304     723.21436               9.642858 0.02916389    88.32880 #> 310 2229.0709823     721.38219               9.618429 0.02902210    88.33692 #> 311 2230.6343266     719.55946               9.594126 0.02888252    88.34492 #> 312 2232.1903767     717.74610               9.569948 0.02874511    88.35280 #> 313 2233.7392442     715.94207               9.545894 0.02860983    88.36055 #> 314 2235.2810392     714.14730               9.521964 0.02847666    88.36819 #> 315 2236.8158701     712.36174               9.498157 0.02834556    88.37570 #> 316 2238.3438437     710.58535               9.474471 0.02821649    88.38310 #> 317 2239.8650650     708.81806               9.450907 0.02808944    88.39038 #> 318 2241.3796377     707.05982               9.427464 0.02796436    88.39755 #> 319 2242.8876636     705.31059               9.404141 0.02784122    88.40461 #> 320 2244.3892433     703.57030               9.380937 0.02772000    88.41156 #> 321 2245.8844757     701.83890               9.357852 0.02760067    88.41840 #> 322 2247.3734582     700.11634               9.334885 0.02748319    88.42513 #> 323 2248.8562867     698.40257               9.312034 0.02736754    88.43176 #> 324 2250.3330558     696.69754               9.289301 0.02725368    88.43829 #> 325 2251.8038585     695.00119               9.266683 0.02714160    88.44471 #> 326 2253.2687864     693.31347               9.244180 0.02703126    88.45103 #> 327 2254.7279299     691.63433               9.221791 0.02692264    88.45726 #> 328 2256.1813778     689.96372               9.199516 0.02681570    88.46339 #> 329 2257.6292177     688.30159               9.177355 0.02671043    88.46942 #> 330 2259.0715358     686.64788               9.155305 0.02660680    88.47536 #> 331 2260.5084169     685.00255               9.133367 0.02650478    88.48121 #> 332 2261.9399448     683.36554               9.111541 0.02640434    88.48697 #> 333 2263.3662018     681.73681               9.089824 0.02630547    88.49263 #> 334 2264.7872690     680.11630               9.068217 0.02620813    88.49821 #> 335 2266.2032261     678.50396               9.046719 0.02611231    88.50370 #> 336 2267.6141519     676.89975               9.025330 0.02601798    88.50911 #> 337 2269.0201239     675.30361               9.004048 0.02592512    88.51443 #> 338 2270.4212182     673.71550               8.982873 0.02583370    88.51967 #> 339 2271.8175101     672.13536               8.961805 0.02574370    88.52483 #> 340 2273.2090734     670.56315               8.940842 0.02565510    88.52991 #> 341 2274.5959810     668.99882               8.919984 0.02556788    88.53491 #> 342 2275.9783046     667.44232               8.899231 0.02548202    88.53983 #> 343 2277.3561149     665.89360               8.878581 0.02539749    88.54467 #> 344 2278.7294813     664.35262               8.858035 0.02531428    88.54944 #> 345 2280.0984725     662.81932               8.837591 0.02523236    88.55414 #> 346 2281.4631559     661.29367               8.817249 0.02515172    88.55876 #> 347 2282.8235977     659.77561               8.797008 0.02507233    88.56331 #> 348 2284.1798636     658.26509               8.776868 0.02499417    88.56779 #> 349 2285.5320178     656.76207               8.756828 0.02491723    88.57220 #> 350 2286.8801238     655.26651               8.736887 0.02484149    88.57654 #> 351 2288.2242440     653.77836               8.717045 0.02476693    88.58081 #> 352 2289.5644400     652.29756               8.697301 0.02469352    88.58502 #> 353 2290.9007722     650.82408               8.677654 0.02462126    88.58916 #> 354 2292.2333004     649.35788               8.658105 0.02455012    88.59324 #> 355 2293.5620831     647.89889               8.638652 0.02448009    88.59725 #> 356 2294.8871783     646.44709               8.619295 0.02441115    88.60121 #> 357 2296.2086429     645.00243               8.600032 0.02434328    88.60510 #> 358 2297.5265328     643.56486               8.580865 0.02427646    88.60892 #> 359 2298.8409034     642.13433               8.561791 0.02421069    88.61269 #> 360 2300.1518089     640.71081               8.542811 0.02414594    88.61641 #> 361 2301.4593030     639.29425               8.523923 0.02408219    88.62006 #> 362 2302.7634382     637.88461               8.505128 0.02401944    88.62366 #> 363 2304.0642664     636.48184               8.486425 0.02395766    88.62720 #> 364 2305.3618389     635.08591               8.467812 0.02389684    88.63068 #> 365 2306.6562058     633.69676               8.449290 0.02383697    88.63411 #> 366 2307.9474168     632.31436               8.430858 0.02377803    88.63749 #> 367 2309.2355205     630.93867               8.412516 0.02372001    88.64082 #> 368 2310.5205650     629.56964               8.394262 0.02366289    88.64409 #> 369 2311.8025977     628.20723               8.376096 0.02360666    88.64731 #> 370 2313.0816651     626.85140               8.358019 0.02355131    88.65048 #> 371 2314.3578129     625.50211               8.340028 0.02349681    88.65361 #> 372 2315.6310865     624.15932               8.322124 0.02344316    88.65668 #> 373 2316.9015301     622.82299               8.304307 0.02339035    88.65971 #> 374 2318.1691877     621.49308               8.286574 0.02333836    88.66269 #> 375 2319.4341022     620.16955               8.268927 0.02328718    88.66562 #> 376 2320.6963162     618.85235               8.251365 0.02323679    88.66851 #> 377 2321.9558713     617.54146               8.233886 0.02318719    88.67135 #> 378 2323.2128088     616.23682               8.216491 0.02313836    88.67415 #> 379 2324.4671691     614.93840               8.199179 0.02309029    88.67691 #> 380 2325.7189921     613.64617               8.181949 0.02304296    88.67962 #> 381 2326.9683172     612.36008               8.164801 0.02299638    88.68229 #> 382 2328.2151828     611.08010               8.147735 0.02295051    88.68492 #> 383 2329.4596272     609.80619               8.130749 0.02290536    88.68750 #> 384 2330.7016878     608.53830               8.113844 0.02286092    88.69005 #> 385 2331.9414014     607.27641               8.097019 0.02281716    88.69256 #> 386 2333.1788045     606.02047               8.080273 0.02277409    88.69503 #> 387 2334.4139328     604.77045               8.063606 0.02273168    88.69746 #> 388 2335.6468216     603.52631               8.047017 0.02268994    88.69985 #> 389 2336.8775054     602.28802               8.030507 0.02264884    88.70221 #> 390 2338.1060185     601.05553               8.014074 0.02260839    88.70452 #> 391 2339.3323945     599.82882               7.997718 0.02256856    88.70681 #> 392 2340.5566664     598.60784               7.981438 0.02252935    88.70905 #> 393 2341.7788670     597.39257               7.965234 0.02249076    88.71127 #> 394 2342.9990282     596.18296               7.949106 0.02245276    88.71344 #> 395 2344.2171816     594.97898               7.933053 0.02241535    88.71559 #> 396 2345.4333584     593.78060               7.917075 0.02237853    88.71770 #> 397 2346.6475892     592.58778               7.901170 0.02234228    88.71978 #> 398 2347.8599042     591.40048               7.885340 0.02230659    88.72182 #> 399 2349.0703329     590.21868               7.869582 0.02227146    88.72383 #> 400 2350.2789047     589.04233               7.853898 0.02223687    88.72582 #> 401 2351.4856484     587.87141               7.838285 0.02220283    88.72777 #> 402 2352.6905922     586.70588               7.822745 0.02216931    88.72969 #> 403 2353.8937641     585.54571               7.807276 0.02213631    88.73158 #> 404 2355.0951916     584.39087               7.791878 0.02210383    88.73344 #> 405 2356.2949016     583.24131               7.776551 0.02207185    88.73527 #> 406 2357.4929208     582.09702               7.761294 0.02204037    88.73708 #> 407 2358.6892754     580.95795               7.746106 0.02200938    88.73885 #> 408 2359.8839913     579.82408               7.730988 0.02197887    88.74060 #> 409 2361.0770938     578.69537               7.715938 0.02194884    88.74232 #> 410 2362.2686079     577.57179               7.700957 0.02191927    88.74402 #> 411 2363.4585583     576.45331               7.686044 0.02189017    88.74569 #> 412 2364.6469693     575.33990               7.671199 0.02186151    88.74733 #> 413 2365.8338646     574.23152               7.656420 0.02183331    88.74894 #> 414 2367.0192679     573.12815               7.641709 0.02180554    88.75054 #> 415 2368.2032022     572.02976               7.627063 0.02177820    88.75210 #> 416 2369.3856904     570.93631               7.612484 0.02175129    88.75364 #> 417 2370.5667548     569.84778               7.597970 0.02172479    88.75516 #> 418 2371.7464176     568.76413               7.583522 0.02169871    88.75666 #> 419 2372.9247005     567.68534               7.569138 0.02167304    88.75813 #> 420 2374.1016248     566.61137               7.554818 0.02164776    88.75958 #> 421 2375.2772118     565.54219               7.540563 0.02162288    88.76100 #> 422 2376.4514821     564.47779               7.526370 0.02159838    88.76241 #> 423 2377.6244561     563.41812               7.512242 0.02157427    88.76379 #> 424 2378.7961541     562.36316               7.498175 0.02155053    88.76515 #> 425 2379.9665957     561.31288               7.484172 0.02152716    88.76649 #> 426 2381.1358004     560.26725               7.470230 0.02150415    88.76781 #> 427 2382.3037876     559.22624               7.456350 0.02148151    88.76911 #> 428 2383.4705759     558.18983               7.442531 0.02145921    88.77038 #> 429 2384.6361842     557.15799               7.428773 0.02143726    88.77164 #> 430 2385.8006306     556.13068               7.415076 0.02141565    88.77288 #> 431 2386.9639333     555.10789               7.401439 0.02139438    88.77410 #> 432 2388.1261099     554.08958               7.387861 0.02137344    88.77530 #> 433 2389.2871779     553.07574               7.374343 0.02135283    88.77648 #> 434 2390.4471546     552.06632               7.360884 0.02133253    88.77764 #> 435 2391.6060569     551.06130               7.347484 0.02131255    88.77879 #> 436 2392.7639014     550.06067               7.334142 0.02129289    88.77992 #> 437 2393.9207047     549.06438               7.320858 0.02127352    88.78102 #> 438 2395.0764827     548.07242               7.307632 0.02125446    88.78212 #> 439 2396.2312516     547.08476               7.294463 0.02123570    88.78319 #> 440 2397.3850269     546.10137               7.281352 0.02121723    88.78425 #> 441 2398.5378241     545.12223               7.268296 0.02119904    88.78529 #> 442 2399.6896583     544.14731               7.255298 0.02118114    88.78632 #> 443 2400.8405445     543.17659               7.242355 0.02116352    88.78733 #> 444 2401.9904974     542.21004               7.229467 0.02114617    88.78832 #> 445 2403.1395316     541.24764               7.216635 0.02112909    88.78930 #> 446 2404.2876612     540.28936               7.203858 0.02111228    88.79027 #> 447 2405.4349004     539.33518               7.191136 0.02109573    88.79121 #> 448 2406.5812629     538.38507               7.178468 0.02107943    88.79215 #> 449 2407.7267624     537.43901               7.165853 0.02106339    88.79307 #> 450 2408.8714123     536.49697               7.153293 0.02104760    88.79397 #> 451 2410.0152257     535.55894               7.140786 0.02103205    88.79486 #> 452 2411.1582157     534.62488               7.128332 0.02101675    88.79574 #> 453 2412.3003951     533.69478               7.115930 0.02100168    88.79660 #> 454 2413.4417764     532.76860               7.103581 0.02098685    88.79745 #> 455 2414.5823720     531.84634               7.091284 0.02097225    88.79829 #> 456 2415.7221942     530.92795               7.079039 0.02095788    88.79911 #> 457 2416.8612549     530.01343               7.066846 0.02094373    88.79992 #> 458 2417.9995660     529.10275               7.054703 0.02092980    88.80072 #> 459 2419.1371391     528.19588               7.042612 0.02091609    88.80151 #> 460 2420.2739857     527.29281               7.030571 0.02090259    88.80228 #> 461 2421.4101171     526.39350               7.018580 0.02088930    88.80304 #> 462 2422.5455444     525.49795               7.006639 0.02087621    88.80379 #> 463 2423.6802785     524.60612               6.994748 0.02086334    88.80453 #> 464 2424.8143302     523.71800               6.982907 0.02085066    88.80526 #> 465 2425.9477101     522.83356               6.971114 0.02083817    88.80597 #> 466 2427.0804287     521.95278               6.959370 0.02082589    88.80668 #> 467 2428.2124961     521.07564               6.947675 0.02081379    88.80737 #> 468 2429.3439226     520.20212               6.936028 0.02080188    88.80805 #> 469 2430.4747180     519.33220               6.924429 0.02079016    88.80873 #> 470 2431.6048923     518.46586               6.912878 0.02077862    88.80939 #> 471 2432.7344550     517.60308               6.901374 0.02076726    88.81004 #> 472 2433.8634156     516.74382               6.889918 0.02075607    88.81068 #> 473 2434.9917835     515.88809               6.878508 0.02074506    88.81131 #> 474 2436.1195680     515.03585               6.867145 0.02073423    88.81193 #> 475 2437.2467780     514.18708               6.855828 0.02072356    88.81254 #> 476 2438.3734225     513.34177               6.844557 0.02071305    88.81314 #> 477 2439.4995103     512.49990               6.833332 0.02070271    88.81374 #> 478 2440.6250501     511.66144               6.822152 0.02069253    88.81432 #> 479 2441.7500503     510.82637               6.811018 0.02068251    88.81490 #> 480 2442.8745193     509.99468               6.799929 0.02067264    88.81546 #> 481 2443.9984655     509.16635               6.788885 0.02066293    88.81602 #> 482 2445.1218969     508.34135               6.777885 0.02065337    88.81656 #> 483 2446.2448215     507.51967               6.766929 0.02064396    88.81710 #> 484 2447.3672472     506.70129               6.756017 0.02063469    88.81764 #> 485 2448.4891817     505.88619               6.745149 0.02062557    88.81816 #> 486 2449.6106328     505.07436               6.734325 0.02061659    88.81867 #> 487 2450.7316078     504.26576               6.723544 0.02060775    88.81918 #> 488 2451.8521143     503.46039               6.712805 0.02059905    88.81968 #> 489 2452.9721594     502.65823               6.702110 0.02059048    88.82017 #> 490 2454.0917504     501.85925               6.691457 0.02058205    88.82065 #> 491 2455.2108943     501.06345               6.680846 0.02057374    88.82113 #> 492 2456.3295981     500.27079               6.670277 0.02056557    88.82160 #> 493 2457.4478686     499.48127               6.659750 0.02055752    88.82206 #> 494 2458.5657125     498.69487               6.649265 0.02054960    88.82251 #> 495 2459.6831365     497.91157               6.638821 0.02054180    88.82296 #> 496 2460.8001471     497.13134               6.628418 0.02053413    88.82340 #> 497 2461.9167507     496.35418               6.618056 0.02052657    88.82383 #> 498 2463.0329537     495.58007               6.607734 0.02051913    88.82426 #> 499 2464.1487622     494.80899               6.597453 0.02051181    88.82468 #> 500 2465.2641825     494.04092               6.587212 0.02050460    88.82509 #> 501 2466.3792205     493.27584               6.577011 0.02049750    88.82550 #> 502 2467.4938822     492.51375               6.566850 0.02049051    88.82590 #> 503 2468.6081734     491.75462               6.556728 0.02048363    88.82629 #> 504 2469.7220999     490.99843               6.546646 0.02047686    88.82668 #> 505 2470.8356675     490.24517               6.536602 0.02047020    88.82706 #> 506 2471.9488815     489.49483               6.526598 0.02046363    88.82744 #> 507 2473.0617476     488.74738               6.516632 0.02045717    88.82781 #> 508 2474.1742711     488.00281               6.506704 0.02045081    88.82817 #> 509 2475.2864575     487.26111               6.496815 0.02044455    88.82853 #> 510 2476.3983118     486.52226               6.486963 0.02043839    88.82889 #> 511 2477.5098394     485.78624               6.477150 0.02043232    88.82923 #> 512 2478.6210452     485.05304               6.467374 0.02042635    88.82958 #> 513 2479.7319343     484.32264               6.457635 0.02042047    88.82991 #> 514 2480.8425115     483.59503               6.447934 0.02041468    88.83024 #> 515 2481.9527818     482.87019               6.438269 0.02040898    88.83057 #> 516 2483.0627499     482.14811               6.428641 0.02040337    88.83089 #> 517 2484.1724206     481.42876               6.419050 0.02039785    88.83121 #> 518 2485.2817983     480.71215               6.409495 0.02039241    88.83152 #> 519 2486.3908878     479.99824               6.399977 0.02038706    88.83183 #> 520 2487.4996934     479.28703               6.390494 0.02038179    88.83213 #> 521 2488.6082196     478.57850               6.381047 0.02037660    88.83243 #> 522 2489.7164708     477.87264               6.371635 0.02037149    88.83272 #> 523 2490.8244511     477.16944               6.362259 0.02036647    88.83301 #> 524 2491.9321649     476.46887               6.352918 0.02036152    88.83329 #> 525 2493.0396163     475.77092               6.343612 0.02035665    88.83357 #> 526 2494.1468092     475.07558               6.334341 0.02035185    88.83384 #> 527 2495.2537479     474.38284               6.325105 0.02034713    88.83411 #> 528 2496.3604362     473.69268               6.315902 0.02034248    88.83438 #> 529 2497.4668779     473.00509               6.306735 0.02033791    88.83464 #> 530 2498.5730770     472.32005               6.297601 0.02033340    88.83490 #> 531 2499.6790373     471.63755               6.288501 0.02032897    88.83516 #> 532 2500.7847623     470.95758               6.279434 0.02032460    88.83541 #> 533 2501.8902559     470.28012               6.270402 0.02032030    88.83565 #> 534 2502.9955215     469.60516               6.261402 0.02031607    88.83589 #> 535 2504.1005628     468.93269               6.252436 0.02031191    88.83613 #> 536 2505.2053832     468.26269               6.243503 0.02030781    88.83637 #> 537 2506.3099862     467.59515               6.234602 0.02030377    88.83660 #> 538 2507.4143751     466.93005               6.225734 0.02029980    88.83683 #> 539 2508.5185532     466.26739               6.216899 0.02029589    88.83705 #> 540 2509.6225239     465.60715               6.208095 0.02029204    88.83727 #> 541 2510.7262904     464.94931               6.199324 0.02028825    88.83749 #> 542 2511.8298558     464.29387               6.190585 0.02028451    88.83770 #> 543 2512.9332233     463.64082               6.181878 0.02028084    88.83791 #> 544 2514.0363960     462.99013               6.173202 0.02027722    88.83812 #> 545 2515.1393768     462.34180               6.164557 0.02027366    88.83833 #> 546 2516.2421688     461.69581               6.155944 0.02027016    88.83853 #> 547 2517.3447749     461.05216               6.147362 0.02026671    88.83872 #> 548 2518.4471980     460.41082               6.138811 0.02026331    88.83892 #> 549 2519.5494409     459.77180               6.130291 0.02025997    88.83911 #> 550 2520.6515065     459.13506               6.121801 0.02025668    88.83930 #> 551 2521.7533974     458.50062               6.113342 0.02025343    88.83948 #> 552 2522.8551165     457.86844               6.104913 0.02025024    88.83967 #> 553 2523.9566664     457.23853               6.096514 0.02024710    88.83985 #> 554 2525.0580497     456.61086               6.088145 0.02024401    88.84002 #> 555 2526.1592690     455.98543               6.079806 0.02024097    88.84020 #> 556 2527.2603268     455.36222               6.071496 0.02023797    88.84037 #> 557 2528.3612258     454.74123               6.063216 0.02023502    88.84054 #> 558 2529.4619682     454.12244               6.054966 0.02023212    88.84071 #> 559 2530.5625567     453.50583               6.046744 0.02022926    88.84087 #> 560 2531.6629935     452.89141               6.038552 0.02022645    88.84103 #> 561 2532.7632810     452.27916               6.030389 0.02022368    88.84119 #> 562 2533.8634216     451.66906               6.022254 0.02022095    88.84135 #> 563 2534.9634176     451.06111               6.014148 0.02021826    88.84150 #> 564 2536.0632711     450.45529               6.006071 0.02021562    88.84165 #> 565 2537.1629845     449.85159               5.998021 0.02021302    88.84180 #> 566 2538.2625598     449.25001               5.990000 0.02021046    88.84195 #> 567 2539.3619992     448.65053               5.982007 0.02020794    88.84209 #> 568 2540.4613049     448.05314               5.974042 0.02020545    88.84223 #> 569 2541.5604789     447.45783               5.966104 0.02020301    88.84237 #> 570 2542.6595233     446.86459               5.958195 0.02020060    88.84251 #> 571 2543.7584401     446.27341               5.950312 0.02019824    88.84265 #> 572 2544.8572312     445.68428               5.942457 0.02019590    88.84278 #> 573 2545.9558987     445.09719               5.934629 0.02019361    88.84291 #> 574 2547.0544444     444.51212               5.926828 0.02019135    88.84304 #> 575 2548.1528703     443.92907               5.919054 0.02018913    88.84317 #> 576 2549.2511781     443.34803               5.911307 0.02018694    88.84330 #> 577 2550.3493698     442.76899               5.903587 0.02018478    88.84342 #> 578 2551.4474472     442.19193               5.895892 0.02018266    88.84354 #> 579 2552.5454120     441.61685               5.888225 0.02018057    88.84366 #> 580 2553.6432660     441.04374               5.880583 0.02017851    88.84378 #> 581 2554.7410109     440.47259               5.872968 0.02017649    88.84389 #> 582 2555.8386483     439.90338               5.865378 0.02017449    88.84401 #> 583 2556.9361801     439.33611               5.857815 0.02017253    88.84412 #> 584 2558.0336078     438.77077               5.850277 0.02017060    88.84423 #> 585 2559.1309330     438.20735               5.842765 0.02016870    88.84434 #> 586 2560.2281573     437.64584               5.835278 0.02016683    88.84445 #> 587 2561.3252823     437.08623               5.827816 0.02016498    88.84455 #> 588 2562.4223096     436.52850               5.820380 0.02016317    88.84466 #> 589 2563.5192406     435.97266               5.812969 0.02016138    88.84476 #> 590 2564.6160769     435.41869               5.805583 0.02015963    88.84486 #> 591 2565.7128199     434.86658               5.798221 0.02015790    88.84496 #> 592 2566.8094711     434.31632               5.790884 0.02015619    88.84506 #> 593 2567.9060319     433.76791               5.783572 0.02015451    88.84515 #> 594 2569.0025038     433.22133               5.776284 0.02015286    88.84525 #> 595 2570.0988880     432.67658               5.769021 0.02015124    88.84534 #> 596 2571.1951860     432.13364               5.761782 0.02014964    88.84543 #> 597 2572.2913991     431.59252               5.754567 0.02014806    88.84552 #> 598 2573.3875287     431.05319               5.747376 0.02014651    88.84561 #> 599 2574.4835760     430.51565               5.740209 0.02014498    88.84570 #> 600 2575.5795422     429.97989               5.733065 0.02014348    88.84579 #> 601 2576.6754288     429.44590               5.725945 0.02014200    88.84587"},{"path":"https://mladenjovanovic.github.io/shorts/reference/print.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for printing shorts_model object — print.shorts_model","title":"S3 method for printing shorts_model object — print.shorts_model","text":"S3 method printing shorts_model object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/print.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for printing shorts_model object — print.shorts_model","text":"","code":"# S3 method for class 'shorts_model' print(x, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/print.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for printing shorts_model object — print.shorts_model","text":"x shorts_model object ... used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/print.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for printing shorts_model object — print.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) simple_model #> Estimated model parameters #> -------------------------- #>        MSS        MAC        TAU       PMAX  #>  9.7809915 12.4128049  0.7879759 30.3523847  #>  #> Model fit estimators #> -------------------- #>             R2        meanErr   meanErr_perc         minErr    minErr_perc  #>    0.999905836   -0.000953123   -0.141465876   -0.023346388   -1.374616927  #>         maxErr    maxErr_perc      maxAbsErr maxAbsErr_perc           RMSE  #>    0.015046445    0.389376647    0.023346388    1.374616927    0.014570617  #>      RMSE_perc            MAE       MAE_perc  #>    0.669726995    0.013255750    0.491106517"},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Probe profile functions — probe_functions","title":"Probe profile functions — probe_functions","text":"Family functions serve purpose probing sprint force-velocity profile. done     increasing individual sprint parameter percentage calculating parameter     improvement yield biggest deduction sprint tim probe_FV \"probes\" F0 V0 calculates one     improves sprint time defined distance probe_MSS_MAC \"probes\" MSS MAC calculates one     improves sprint time defined distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probe profile functions — probe_functions","text":"","code":"probe_FV(   distance,   F0,   V0,   bodymass = 75,   inertia = 0,   resistance = 0,   perc = 2.5,   ... )  probe_MSS_MAC(distance, MSS, MAC, perc = 2.5)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probe profile functions — probe_functions","text":"distance Numeric vector F0, V0 Numeric vectors. FV profile parameters bodymass Body mass kg inertia External inertia kg (example weight vest, sled). included air resistance calculation resistance External horizontal resistance Newtons (example tether device sled friction resistance) perc Numeric vector. Probing percentage. Default 2.5 percent ... Arguments passed get_air_resistance velocity Instantaneous running velocity meters per second (m/s) bodyheight meters (m). Default 1.75m barometric_pressure Torrs. Default 760Torrs air_temperature Celzius (C). Default 25C wind_velocity meters per second (m/s). Use negative number head wind, positive number back wind. Default 0m/s (wind) MSS, MAC Numeric vectors. Model parameters","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probe profile functions — probe_functions","text":"probe_FV returns data frame following columns F0 Original F0 V0 Original F0 bodymass Bodymass inertia Inertia resistance Resistance Pmax Maximal power estimated using F0 * V0 / 4 Pmax_rel Relative maximal power slope FV profile slope distance Distance time Time cover distance probe_perc Probe percentage F0_probe Probing F0 F0_probe_time Predicted time distance F0 probed F0_probe_time_gain Difference time cover distance time_optimal time V0_probe Probing V0 V0_probe_time Predicted time distance V0 probed V0_probe_time_gain Difference time cover distance time_optimal time profile_imb Percent ratio V0_probe_time_gain F0_probe_time_gain probe_MSS_MAC returns data frame following columns MSS Original MSS MAC Original MAC Pmax_rel Relative maximal power estimated using MSS * MAC / 4 slope Sprint profile slope distance Distance time Time cover distance probe_perc Probe percentage MSS_probe Probing MSS MSS_probe_time Predicted time distance MSS probed MSS_probe_time_gain Difference time cover distance probe time time MAC_probe Probing MAC MAC_probe_time Predicted time distance MAC probed MAC_probe_time_gain Difference time cover distance probing time time profile_imb Percent ratio MSS_probe_time_gain MAC_probe_time_gain","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/probe_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probe profile functions — probe_functions","text":"","code":"MSS <- 10 MAC <- 8 bodymass <- 75  fv <- create_FVP(MSS, MAC, bodymass)  dist <- seq(5, 40, by = 5)  probe_MSS_MAC_profile <- probe_MSS_MAC(   distance = dist,   MSS,   MAC )[[\"profile_imb\"]]  probe_FV_profile <- probe_FV(   distance = dist,   fv$F0,   fv$V0,   fv$bodymass )[[\"profile_imb\"]]  plot(x = dist, y = probe_MSS_MAC_profile, type = \"l\", ylab = \"Profile imbalance\") lines(x = dist, y = probe_FV_profile, type = \"l\", col = \"blue\") abline(h = 100, col = \"gray\", lty = 2)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/radar_gun_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Radar Gun Data — radar_gun_data","title":"Radar Gun Data — radar_gun_data","text":"Data generated known MSS TAU measurement error N=5 athletes using radar gun     sampling frequency 100Hz 6 seconds.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/radar_gun_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radar Gun Data — radar_gun_data","text":"","code":"data(radar_gun_data)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/radar_gun_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Radar Gun Data — radar_gun_data","text":"Data frame 4 variables 3000 observations: athlete Character string bodyweight Bodyweight kilograms time Time reported radar gun seconds velocity Velocity reported radar gun m/s","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/residuals.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for returning residuals of shorts_model — residuals.shorts_model","title":"S3 method for returning residuals of shorts_model — residuals.shorts_model","text":"S3 method returning residuals shorts_model","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/residuals.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for returning residuals of shorts_model — residuals.shorts_model","text":"","code":"# S3 method for class 'shorts_model' residuals(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/residuals.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for returning residuals of shorts_model — residuals.shorts_model","text":"object shorts_model object ... Extra arguments. used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/residuals.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for returning residuals of shorts_model — residuals.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) residuals(simple_model) #> [1] -0.023346388  0.010889122  0.015046445  0.004821001 -0.012175794"},{"path":"https://mladenjovanovic.github.io/shorts/reference/split_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Testing Data — split_times","title":"Split Testing Data — split_times","text":"Data generated known MSS TAU measurement error N=5 athletes using 6 timing gates:     5m, 10m, 15m, 20m, 30m, 40m","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/split_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Testing Data — split_times","text":"","code":"data(split_times)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/split_times.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Split Testing Data — split_times","text":"Data frame 4 variables 30 observations: athlete Character string bodyweight Bodyweight kilograms distance Distance timing gates sprint start meters time Time reported timing gate","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/summary.shorts_model.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method for providing summary for the shorts_model object — summary.shorts_model","title":"S3 method for providing summary for the shorts_model object — summary.shorts_model","text":"S3 method providing summary shorts_model object","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/summary.shorts_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method for providing summary for the shorts_model object — summary.shorts_model","text":"","code":"# S3 method for class 'shorts_model' summary(object, ...)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/summary.shorts_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method for providing summary for the shorts_model object — summary.shorts_model","text":"object shorts_model object ... used","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/summary.shorts_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method for providing summary for the shorts_model object — summary.shorts_model","text":"","code":"split_distances <- c(10, 20, 30, 40, 50) split_times <- create_timing_gates_splits(   gates = split_distances,   MSS = 10,   MAC = 9,   FD = 0.25,   TC = 0 )  # Simple model simple_model <- model_timing_gates(split_distances, split_times) summary(simple_model) #>  #> Formula: time ~ predict_time_at_distance(distance, MSS, MAC) #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|)     #> MSS  9.78099    0.07441  131.44 9.71e-07 *** #> MAC 12.41280    0.35730   34.74 5.24e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01881 on 3 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08 #>"},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":null,"dir":"Reference","previous_headings":"","what":"Vescovi Timing Gates Sprint Times — vescovi","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"Timing gates sprint times involving 52 female athletes. Timing gates located     5m, 10m, 20m, 30m, 35m. See Details information.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"","code":"data(vescovi)"},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"Data frame 17 variables 52 observations: Team Team sport. Contains following levels: 'W Soccer' (Women Soccer),    'FH Sr' (Field Hockey Seniors), 'FH U21' (Field Hockey 21), 'FH U17' (Field Hockey 17) Surface Type testing surface. Contains following levels: 'Hard Cours' 'Natural Grass' Athlete Athlete ID Age Athlete age years Height Body height cm Bodyweight Body weight kg BMI Body Mass Index BSA Body Surface Area. Calculated using Mosteller equation sqrt((height/weight)/3600) 5m Time seconds 5m gate 10m Time seconds 10m gate 20m Time seconds 20m gate 30m Time seconds 30m gate 35m Time seconds 35m gate 10m-5m split Split time seconds 10m 5m gate 20m-10m split Split time seconds 20m 10m gate 30m-20m split Split time seconds 30m 20m gate 35m-30m split Split time seconds 35m 30m gate","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"data-set represents sub-set data total 220 high-level female athletes    (151 soccer players 69 field hockey players).  Using random number generator,    total 52 players (35 soccer 17 field hockey) selected data-set.    Soccer players older (24.6±3.6 vs. 18.9±2.7 yr, p < 0.001), however    differences height (167.3±5.9 vs. 167.0±5.7 cm, p = 0.886),    body mass (62.5±5.9 vs. 64.0±9.4 kg, p = 0.500) sprint interval time (p > 0.650). protocol assessing linear sprint speed described previously (Vescovi 2014,    2016, 2012) identical cohort.  Briefly, athletes performed standardized    warm-included general exercises jogging, shuffling, multi-directional movements,    dynamic stretching exercises. Infrared timing gates (Brower Timing, Utah) positioned    start line 5, 10, 20, 35 meters height approximately 1.0 meter.    Participants stood lead foot positioned approximately 5 cm behind initial infrared beam    (.e., start line). forward movement permitted (leaning rocking backwards) timing    started laser starting gate triggered. best 35 m time, associated split    times kept analysis.  assessment linear sprints using infrared timing gates    require familiarization (Moir, Button, Glaister, Stone 2004).","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"Moir G, Button C, Glaister M, Stone MH (2004). \"Influence Familiarization Reliability     Vertical Jump Acceleration Sprinting Performance Physically Active Men.\"     Journal Strength Conditioning Research, 18(2), 276. ISSN 1064-8011, 1533-4287.     doi:10.1519/R-13093.1. Vescovi JD (2012). \"Sprint Speed Characteristics High-Level American Female Soccer     Players: Female Athletes Motion (FAiM) Study.\" Journal Science Medicine     Sport, 15(5), 474-478. ISSN 14402440. doi:10.1016/j.jsams.2012.03.006. Vescovi JD (2014). \"Impact Maximum Speed Sprint Performance High-Level     Youth Female Field Hockey Matches: Female Athletes Motion (FAiM) Study.\" International     Journal Sports Physiology Performance, 9(4), 621-626. ISSN 1555-0265,    1555-0273. doi:10.1123/ijspp.2013-0263. Vescovi JD (2016). \"Locomotor, Heart-Rate, Metabolic Power Characteristics Youth    Women's Field Hockey: Female Athletes Motion (FAiM) Study.\" Research Quarterly    Exercise Sport, 87(1), 68-77. ISSN 0270-1367, 2168-3824.    doi:10.1080/02701367.2015.1124972.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/reference/vescovi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vescovi Timing Gates Sprint Times — vescovi","text":"Jason D. Vescovi     University Toronto     Faculty Kinesiology Physical Education     Graduate School Exercise Science     Toronto, Canadavescovij@gmail.com","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-330","dir":"Changelog","previous_headings":"","what":"shorts 3.3.0","title":"shorts 3.3.0","text":"Added latest reference DESCRIPTION README Added function filter_func parameter model_in_situ() function, allows user filter outliers within velocity bracket","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-320","dir":"Changelog","previous_headings":"","what":"shorts 3.2.0","title":"shorts 3.2.0","text":"CRAN release: 2024-05-22 Fixed error predict_work_till_distance() function Added model_timing_gates_FD_fixed() model_time_distance_FD_fixed() allow user set fixed FD parameter. done using additional parameter model_timing_gates_FD() model_time_distance_FD() functions, now functions provide estimated FD. done allow confidence intervals estimation, impossible since fixed FD also estimated, constrained optimization function user-provided value.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-311","dir":"Changelog","previous_headings":"","what":"shorts 3.1.1","title":"shorts 3.1.1","text":"CRAN release: 2024-05-02 model_in_situ() function, filtering parameters (velocity_threshold, velocity_step, n_observations) returned corrections element returned object. also returned CV element returned object every cross-validation fold velocity_threshold parameter model_in_situ() function now default NULL, case velocity observation fastest acceleration taken cutoff value Updated -situ examples README file Cleaned theme_bw() README set default ggplot theme ggdist::ggdist() Fixed error README example plotting -situ velocity-acceleration profile Fixed error find_optimal_FV_scalar() function upper-level calling functions happens resistance parameter zero Added new publication README DESCRIPTION Rebuilt split_times since AsIs object, causing issues ggplot2 plotting README file","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-310","dir":"Changelog","previous_headings":"","what":"shorts 3.1.0","title":"shorts 3.1.0","text":"CRAN release: 2024-01-21 Fixed error model_radar_gun() model_laser_gun() examples happened r-release-macos-arm64 r-oldrel-macos-arm64 due perfect model fit causing “singular gradient matrix initial parameter estimates”. sorted adding simple noise simulated data Modified model_in_situ() function now use minpack.lm::nlsLM() instead stats::lm() function, now estimates MSS MAC parameters, thus easier read code, estimate confidence intervals Updated DESCRIPTION file better package description","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-300","dir":"Changelog","previous_headings":"","what":"shorts 3.0.0","title":"shorts 3.0.0","text":"CRAN release: 2024-01-13","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"fixed-bugs-and-errors-3-0-0","dir":"Changelog","previous_headings":"","what":"Fixed Bugs and Errors","title":"shorts 3.0.0","text":"Fixed sign error get_air_resistance() function head wind tail wind returned resistance. Fixed error make_FV_profile() function estimating force-velocity profile wind conditions. Fixed error convert_FV() function converting force-velocity profile back acceleration-velocity profile wind conditions.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"changes-in-names-and-formats-3-0-0","dir":"Changelog","previous_headings":"","what":"Changes in names and formats","title":"shorts 3.0.0","text":"Renamed make_FV_profile() function create_FVP(). Renamed convert_FV() function convert_FVP(). Renamed output predict_kinematics() function relative_power power_relative alignment variables. Added work, average_power, average_power_relative output predict_kinematics() function, removed net_horizontal_force output avoid confusion whether inertia included . Updated internal shorts_model_fit() function return model fit metrics absolute percentage forms. Added internal model_sprint() wrapper function updated internal new_shorts_model() constructor provide changes model output format (\"shorts_model\" class). create BREAK CHANGE previous versions shorts package.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"new-functions-and-updates-in-functions-3-0-0","dir":"Changelog","previous_headings":"","what":"New functions and updates in functions","title":"shorts 3.0.0","text":"Added predict_work_till_time() predict_work_till_distance() calculate horizontal work performance. Rewritten model_radar_gun() added alias model_laser_gun() function. Rewritten model_timing_gates(), model_timing_gates_TC(), model_timing_gates_FD(), model_timing_gaes_FD_TC(), functions. Now TC parameter positive sign. Rewritten model_tether() model_tether_DC() functions. Changed sign DC parameter. Rewritten model_ family functions include predict_ function model definition. Now MSS MAC estimated, rather MSS TAU. improves readability model definition. Also moved MAC output MSS parameter. Removed model_timing_gates_FD_TC() function. Added model_timing_gates_DC() model_timing_gates_TC_DC() functions. Added model_in_situ() function performs embedded (.e., -situ) analysis session monitoring data using GPS LPS systems provide instantaneous acceleration velocity. Added model_time_distance(), model_time_distance_TC(), model_time_distance_DC(), model_time_distance_TC_DC(), model_time_distance_FD() functions. exactly model_timing_gates family functions, reverse predictor outcome variables. Added create_sprint_trace() function quickly creating sprint traces time- distance-shifts, well flying starts. Useful creating examples issues modeling sprint traces. Updated S3 print plot methods \"shorts_model\" class. plot method now plots four different types plots, depending type argument: “model” (default), “kinematics-time”, “kinematics-distance”, “residuals”. Added confint S3 method provide confidence intervals parameters. Changed coef S3 method return model parameters, sprint parameters.","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"datasets-and-documentation-3-0-0","dir":"Changelog","previous_headings":"","what":"Datasets and documentation","title":"shorts 3.0.0","text":"Updated examples model_ family functions. Added LPS_session dataset. dataset represents sample data provided Local Positioning System (LPS) single individual performing single basketball practice session (aprox. 90min). Sampling frequency 20Hz. Added dynaspeed dataset. Added laser_gun_data dataset. Updated README cover changes. Removed Jason Vescovi authorship DESCRIPTION file CITATION. Jason still referenced dataset provided","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-250","dir":"Changelog","previous_headings":"","what":"shorts 2.5.0","title":"shorts 2.5.0","text":"CRAN release: 2023-11-21 Added inertia (mass; kg) resistance (force; Newtons) predict_force_, predict_power_, predict_relative_power_, well predict_kinematics() functions. increases ability {shorts} package deal external resistance, like weight vest, sled, tether devices. Modified predict_kinematics() function include inertia (mass; kg) resistance (force; Newtons) parameters, well allow user either provide shorts_model object, provide MSS MAC parameters. Additional parameter add_inertia_to_vertical allow user decided whether inertia added bodymass calculating vertical force. Added predict_force_at_velocity() function Modified find_max_power_ find_power_critial_ function add support inertia (mass; kg) resistance (force; Newtons) parameters Simplified make_FV_profile() function added support inertia (mass; kg) resistance (force; Newtons) parameters. Removed S3 print plot methods, well class type involving function Made internal convert_FV() function available users added support inertia (mass; kg) resistance (force; Newtons) parameters Updated predict_time_at_distance_FV() function use simpler convert_FV() function Renamed find_max_power functions find_peak_power avoid confusion Pmax Ppeak Implemented inertia (mass; kg) resistance (force; Newtons) optimal_FV() function Implemented inertia (mass; kg) resistance (force; Newtons) probe_FV() function added model_tether_DC() function additional distance correction (DC) parameter estimate. DC parameter serves intercept distance doesn’t start zero","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-240","dir":"Changelog","previous_headings":"","what":"shorts 2.4.0","title":"shorts 2.4.0","text":"CRAN release: 2023-03-13 Removed “Suggest” package DESCRIPTION file Added use_observed_MSS parameter model_radar_gun() model_tether() functions. allows user estimate MSS parameter observed data Add FD parameter model_timing_gates_FD() model_timing_gates_FD_TC() functions, allow user provide fixed FD parameter value. Updated README.Rmd file example use feature. Also added reference published article previously available pre-print. Changed generic predict() function return fitted values, use generic predict method object. allows user use newdata parameter. Added fitted() method return fitted values instead","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-230","dir":"Changelog","previous_headings":"","what":"shorts 2.3.0","title":"shorts 2.3.0","text":"CRAN release: 2022-10-29 Moved optimal profile functions “optional-functions.R” file, accompanying documentation name Renamed FV_slope_perc profile_imb output optimal_ functions functions find_optimal_FV() find_optimal_FV_peak() now wrapped inside optimal_FV, method selected using method parameter (“max” find_optimal_FV() “peak” find_optimal_FV_peak()). Please refer examples Probing analysis now removed optimal_ functions moved probe_FV() probe_MSS_MAC() functions. Please refer examples Finding distance profile optimal now done using find_optimal_distance() function can take optimal probe functions parameter. Please refer examples Removed bug find_optimal_FV_peak() (now implemented find_optimal_FV() function using method=\"peak\" parameter) information needed calculate air resistance forwarded","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-220","dir":"Changelog","previous_headings":"","what":"shorts 2.2.0","title":"shorts 2.2.0","text":"Expanded results output find_optimal_MSS_MAC() find_optimal_FV() functions. columns renamed better clarity Added internal function convert_FV() convert FV profile sprint profile. used calculate Peak Power (Ppeak) metric location Added min_func parameter find_optimal_MSS_MAC_distance() find_optimal_FV_distance(). allows optimize using metric Added find_optimal_FV_peak() function, optimize profile keeping Peak Power . Accompanying find_optimal_FV_peak_distance() also added Added extra reference DESCRIPTION","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-210","dir":"Changelog","previous_headings":"","what":"shorts 2.1.0","title":"shorts 2.1.0","text":"CRAN release: 2022-09-26 Added mean acceleration distance format_splits() Added model_tether() function modeling data output tether devices, involve velocity distance Change Pmax_relative Pmax_rel output make_FV_profile() function Added analytically/polynomially estimated F0_poly, F0_poly_rel, V0_poly, Pmax_poly, Pmax_poly_rel, FV_slope_poly output make_FV_profile() function using method outlined Pierre Samozino Nicolas Peyror, et al (2021) <doi: 10.1111/sms.14097> Added predict_time_at_distance_FV() uses FV profile’s F0 V0 predict time distance. info see Pierre Samozino Nicolas Peyror, et al (2021) <doi: 10.1111/sms.14097> Added optimization functions: find_optimal_MSS_MAC(), find_optimal_MSS_MAC_distance(), find_optimal_FV(), find_optimal_FV_distance(). info FV optimization see Pierre Samozino Nicolas Peyror, et al (2021) <doi: 10.1111/sms.14097> Removed DOI citation info","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-200","dir":"Changelog","previous_headings":"","what":"shorts 2.0.0","title":"shorts 2.0.0","text":"CRAN release: 2022-07-07 NEW version {shorts} package INCOMPATIBLE previous due drastic changes functions. changes utilized: Removed mixed-effects function due small usage practice. predict_ functions, time_correction distance_correction longer used, since due novel models estimation, hard neatly implement functions. Now predict_ functions predict scale sprint starts t=0 d=0, rather original (data) scale. also remove confusion user. predict_ functions, user now uses MSS MAC parameters Changed non-linear regression estimation function stats::nls() minpack.lm::nlsLM() model_ functions. done avoid “singular gradient” error inability stats::nls() estimate zero residuals. Please make note now use ... model_ function, forwarded minpack.lm::nlsLM(). using control = stats::nls.control(warnOnly = TRUE) avoid stats::nls() throw error fitting zero residuals, now can remove . needed use control = minpack.lm::nls.lm.control() instead. Added create_timing_gates_splits() function generate timing gates splits modeling timing gates, following functions now available: model_timing_gates(), model_timing_gates_TC(), model_timing_gates_FD(), model_timing_gates_FD_TC(). functions removed modeling radar gun data, now one function model_radar_gun() also estimates time correction (TC) parameter. Function model_radar_gun() feature n-folds cross-validation, opposed model_timing_gates() family functions, features leave-one-cross-validation (LOOCV) due small number observations. Using CV parameter, set n-fold cross-validations model_radar_gun() function. Renamed element LOOCV shorts_model object CV reflect changes model_radar_gun() function Removed vignettes. working better pre-print well one peer-reviewed simulation paper reference instead","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-116","dir":"Changelog","previous_headings":"","what":"shorts 1.1.6","title":"shorts 1.1.6","text":"CRAN release: 2021-07-19 Updated documentation regarding mentioned potential issues IMPORTANT: model_using_splits_with_distance_correction() function predict_XXX_at_distance() family functions doesn’t work correctly distance_correction used parameter (.e., different zero). model definition completely different, predicting distance scale possible. Please refer Jovanović, M., Vescovi, J.D. (2020) information. Jovanović, M., Vescovi, J.D. (2020). shorts: R Package Modeling Short Sprints. Preprint available SportRxiv. https://doi.org/10.31236/osf.io/4jw62","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-115","dir":"Changelog","previous_headings":"","what":"shorts 1.1.5","title":"shorts 1.1.5","text":"CRAN release: 2021-07-02 Fixed wrong error message plot.shorts_fv_profile() function Minor model print aesthetic changes Fixed calculation residuals, now correctly calculated using observed - predicted. calculation implemented residuals() S3 method, well internal function shorts_model_fit() provides model fit estimates (.e. RMSE, MAE, MAPE) Fixed calculation residuals vignette Added model_using_splits_with_distance_correction() function implements novel model definition estimate flying start distance Added mixed_model_using_splits_with_distance_correction() function implements novel model definition estimate flying start distance","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-114","dir":"Changelog","previous_headings":"","what":"shorts 1.1.4","title":"shorts 1.1.4","text":"CRAN release: 2020-11-29 Added ggplot2 tidyr package dependency implemented S3 plotting functions get_FV_profile now return object class shorts_fv_profile Added S3 print plot methods shorts_fv_profile object Renamed column force relative_force horizontal_force relative_horizontal_force shorts_fv_profile object data frame returned predict_kinematics Added acceleration, bodymass, net_horizontal_force, air_resistance, vertical_force, resultant_force_relative, power, force_angle shorts_fv_profile object data frame returned predict_kinematics Improved examples README.Rmd Added S3 plot method shorts_model shorts_mixed_model objects","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-113","dir":"Changelog","previous_headings":"","what":"shorts 1.1.3","title":"shorts 1.1.3","text":"CRAN release: 2020-10-29 Added sample radar gun data Jean-Benoît Morin Microsoft Excel spreadsheet, freely available website (accessed October 27, 2020)). information ?jb_morin Added get_FV_profile generating Force-Velocity profile summary using Pierre Samozino Jean-Benoît Morin method (DOI:10.1111/sms.12490)","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-112","dir":"Changelog","previous_headings":"","what":"shorts 1.1.2","title":"shorts 1.1.2","text":"CRAN release: 2020-10-13 Added get_air_resistance function estimate air resistance newtons Added predict_air_resistance_at_time predict_air_resistance_at_time functions Added predict_force_at_time predict_force_at_distance functions Added predict_power_at_time predict_power_at_distance functions Now power calculations predict_relative_power_at_distance predict_relative_power_at_time use air resistance calculations. default bodymass 75kg. replicate earlier function behavior, use predict_velocity_at_ multiplied predict_acceleration_at_ get relative power without air resistance Function predict_kinematics now uses aforementioned changes predict_relative_power_ functions, added force air resistance output Functions find_max_power_distance find_power_critical_distance now uses aforementioned changes returns absolute power, rather relative, air resistance used power calculations Added find_max_power_time, find_velocity_critical_time, find_acceleration_critical_time, find_power_critical_time functions Added model_using_radar_with_time_correction time_correction parameter estimated Added mixed_model_using_radar_with_time_correction time_correction parameter estimated","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-111","dir":"Changelog","previous_headings":"","what":"shorts 1.1.1","title":"shorts 1.1.1","text":"CRAN release: 2020-09-11 Added James Vescovi contributed dataset (data(\"vescovi\")). info see ?vescovi","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-110","dir":"Changelog","previous_headings":"","what":"shorts 1.1.0","title":"shorts 1.1.0","text":"CRAN release: 2020-07-28 Used constructor functions modeling functions Added modular short_model_fit function three extra estimators: MAE, MAPE, MaxAbsErr. function hidden user, allows easier extension modularity well avoidance code repetition Added time_correction distance_correction model parameters output align Added S3 predict_kinematics function predicts 0-6s distance (100Hz), velocity, acceleration, relative power Added S3 print, coef, summary, predict, residuals methods Added LOOCV option modeling functions provided cross-validated predictions estimated model parameters Added random parameter mixed_ family functions allow higher flexibility model definitions, removed corrections_as_random_effects parameter. default behavious use parameters random effects. Added ... model_using_radar mixed_model_using_radar forwarded nlme::nlme Expanded Readme.md file Expanded sprint-corrections vignette adding short simulation study","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-101","dir":"Changelog","previous_headings":"","what":"shorts 1.0.1","title":"shorts 1.0.1","text":"CRAN release: 2020-05-08 Corrected error vignette showed Solaris system. Increased random noise allow nls fit","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-100","dir":"Changelog","previous_headings":"","what":"shorts 1.0.0","title":"shorts 1.0.0","text":"CRAN release: 2020-05-05 Renamed time_delay time_correction shorts::model_using_instant_velocity shorts::mixed_model_using_instant_velocity functions consistent across functions. Also, correction added time, use negative numbers instead time_correction shorts::mixed_model_using_instant_velocity shorts::mixed_model_using_split_times now numeric vector, column name Implemented time_correction shorts::model_using_split_times shorts::mixed_model_using_split_times Implemented time_correction shorts:predict_ family functions Implemented distance_correction shorts:predict_ family functions Implemented estimation time_correction shorts::model_using_split_times_with_time_correction shorts::mixed_model_using_split_times_with_time_correction Implemented estimation distance_correction shorts::model_using_split_times_with_corrections shorts::mixed_model_using_split_times_with_corrections Fixed error calculating PMAX shorts::mixed_model_ functions Removed maxAbsErr model_fit element Wrote “sprint-corrections” vignette explaining idea behind sprint time distance corrections Implemented find_ family functions finding max power critical distance velocity acceleration reaches certain threshold Implemented ... modeling functions extra parameters can forwarded optimization engine Data split_times recreated using distance shift behind first timing gate. Needed demo mixed models corrections Renamed _model_using_instant_velocity _model_using_radar Renamed _model_using_split_times_ _model_using_splits_","code":""},{"path":"https://mladenjovanovic.github.io/shorts/news/index.html","id":"shorts-001","dir":"Changelog","previous_headings":"","what":"shorts 0.0.1","title":"shorts 0.0.1","text":"CRAN release: 2020-04-23 Initial version core functionalities package submitted CRAN 2020-04-17. (commit b59402c9c5)","code":""}]
